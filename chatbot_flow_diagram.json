{
  "chatbot_system": {
    "name": "Enhanced Clang AI Chatbot",
    "version": "3.0",
    "description": "Advanced multi-service AI chatbot with comprehensive topic coverage",
    "flow_diagram": {
      "entry_point": {
        "component": "Django REST API",
        "endpoint": "/api/chat/",
        "method": "POST",
        "description": "Main entry point for all chat interactions"
      },
      "request_flow": [
        {
          "step": 1,
          "component": "ChatAPIView",
          "file": "views.py",
          "description": "Receives user message and session_id",
          "inputs": ["message", "session_id"],
          "actions": [
            "Validate request",
            "Extract message content",
            "Initialize session if needed"
          ]
        },
        {
          "step": 2,
          "component": "Trained Response Handler",
          "description": "Quick responses for common queries",
          "patterns": [
            "identity_questions",
            "greetings",
            "name_queries"
          ],
          "outputs": {
            "identity": "I'm Clang, your advanced AI assistant created by Krishna",
            "greetings": "Personalized greeting with capability overview"
          }
        },
        {
          "step": 3,
          "component": "Enhanced Clang Service",
          "file": "enhanced_clang_service.py",
          "description": "Core AI service with advanced topic coverage",
          "routing_logic": {
            "if_trained_response": "return_immediately",
            "else": "route_to_enhanced_clang"
          }
        }
      ],
      "enhanced_clang_flow": {
        "initialization": {
          "services_loaded": [
            "knowledge_base_service",
            "nlp_processor", 
            "medical_knowledge_service",
            "chatbot_service",
            "conversation_memory",
            "human_interaction"
          ],
          "fallback_handling": "Graceful degradation if services unavailable"
        },
        "processing_pipeline": [
          {
            "stage": 1,
            "name": "Input Processing",
            "actions": [
              "Clean and normalize message",
              "Extract keywords",
              "Identify query type"
            ]
          },
          {
            "stage": 2,
            "name": "Advanced Topic Detection",
            "description": "Check for 10 advanced topic areas",
            "topics": {
              "quantum_computing": {
                "keywords": ["quantum", "qubit", "quantum computing", "quantum mechanics"],
                "response_type": "comprehensive_quantum_explanation"
              },
              "blockchain": {
                "keywords": ["blockchain", "cryptocurrency", "bitcoin", "smart contract"],
                "response_type": "detailed_blockchain_overview"
              },
              "machine_learning": {
                "keywords": ["machine learning", "neural network", "deep learning", "AI model"],
                "response_type": "ml_fundamentals_and_applications"
              },
              "cybersecurity": {
                "keywords": ["cybersecurity", "encryption", "security", "firewall"],
                "response_type": "security_best_practices"
              },
              "biotechnology": {
                "keywords": ["biotechnology", "CRISPR", "gene editing", "genetic engineering"],
                "response_type": "biotech_applications_and_ethics"
              },
              "space_technology": {
                "keywords": ["space technology", "rocket", "satellite", "mars"],
                "response_type": "space_exploration_overview"
              },
              "renewable_energy": {
                "keywords": ["renewable energy", "solar", "wind", "clean energy"],
                "response_type": "sustainable_energy_solutions"
              },
              "climate_science": {
                "keywords": ["climate change", "global warming", "carbon footprint"],
                "response_type": "climate_analysis_and_solutions"
              },
              "medical_scenarios": {
                "keywords": ["symptoms", "diagnosis", "medical", "health"],
                "response_type": "medical_information_with_disclaimer"
              },
              "ai_ethics": {
                "keywords": ["responsible ai", "algorithmic fairness", "AI ethics"],
                "response_type": "ethical_ai_considerations"
              }
            }
          },
          {
            "stage": 3,
            "name": "Service Routing",
            "description": "Route to appropriate specialized service",
            "routing_table": {
              "medical_queries": "medical_knowledge_service",
              "mathematical_problems": "math_calculator",
              "grammar_questions": "grammar_checker",
              "knowledge_queries": "knowledge_base_service",
              "advanced_topics": "direct_comprehensive_response",
              "general_chat": "multi_api_service"
            }
          }
        ]
      },
      "specialized_services": {
        "medical_knowledge_service": {
          "file": "medical_knowledge_service.py",
          "database": "medical_knowledge.db",
          "capabilities": [
            "Symptom analysis",
            "Disease information",
            "Treatment suggestions",
            "Drug interactions"
          ],
          "safety_features": [
            "Medical disclaimers",
            "Emergency situation detection",
            "Professional consultation recommendations"
          ]
        },
        "knowledge_base_service": {
          "file": "knowledge_base_service.py",
          "components": {
            "grammar_checker": "TextBlob-based grammar analysis",
            "math_calculator": "SymPy-powered mathematical computation",
            "knowledge_database": "SQLite knowledge repository"
          }
        },
        "nlp_processor": {
          "file": "nlp_processor.py",
          "technologies": ["SpaCy", "NLTK"],
          "functions": [
            "Text preprocessing",
            "Named entity recognition",
            "Sentiment analysis",
            "Intent classification"
          ]
        },
        "conversation_memory": {
          "file": "conversation_memory.py",
          "database": "conversation_memory.db",
          "features": [
            "Session management",
            "Context preservation",
            "Conversation history",
            "User preference tracking"
          ]
        }
      },
      "multi_api_service": {
        "description": "Fallback service with 4 AI providers",
        "providers": [
          {
            "name": "Cohere",
            "priority": 1,
            "capabilities": ["Text generation", "Summarization", "Q&A"]
          },
          {
            "name": "Groq",
            "priority": 2,
            "capabilities": ["Fast inference", "Code generation", "Analysis"]
          },
          {
            "name": "Mistral",
            "priority": 3,
            "capabilities": ["Multilingual support", "Reasoning", "Creative writing"]
          },
          {
            "name": "Together AI",
            "priority": 4,
            "capabilities": ["Model diversity", "Specialized tasks", "Research support"]
          }
        ],
        "fallback_logic": {
          "if_primary_fails": "try_next_provider",
          "if_all_fail": "return_error_message",
          "retry_mechanism": "exponential_backoff"
        }
      },
      "response_generation": {
        "process": [
          {
            "stage": 1,
            "name": "Content Generation",
            "sources": [
              "Advanced topic responses",
              "Specialized service responses", 
              "Multi-API responses"
            ]
          },
          {
            "stage": 2,
            "name": "Response Enhancement",
            "enhancements": [
              "Add markdown formatting",
              "Include relevant examples",
              "Add safety disclaimers where needed",
              "Provide actionable information"
            ]
          },
          {
            "stage": 3,
            "name": "Quality Assurance",
            "checks": [
              "Content accuracy validation",
              "Safety filter application",
              "Response length optimization",
              "User context relevance"
            ]
          }
        ]
      },
      "database_layer": {
        "databases": [
          {
            "name": "db.sqlite3",
            "purpose": "Main Django database",
            "tables": ["chat_sessions", "chat_messages", "user_data"]
          },
          {
            "name": "medical_knowledge.db", 
            "purpose": "Medical information storage",
            "content": ["symptoms", "diseases", "treatments", "drug_interactions"]
          },
          {
            "name": "conversation_memory.db",
            "purpose": "Session and context management",
            "content": ["conversation_history", "user_preferences", "session_data"]
          },
          {
            "name": "knowledge_base.db",
            "purpose": "General knowledge repository",
            "content": ["facts", "definitions", "explanations", "examples"]
          }
        ]
      },
      "deployment_architecture": {
        "platform": "Render",
        "components": [
          {
            "name": "Web Service",
            "technology": "Django + Gunicorn",
            "scaling": "Auto-scaling based on traffic"
          },
          {
            "name": "Static Files",
            "technology": "WhiteNoise",
            "purpose": "Serve CSS, JS, images"
          },
          {
            "name": "Database",
            "technology": "SQLite",
            "backup": "Automated daily backups"
          }
        ],
        "environment_variables": [
          "DJANGO_SETTINGS_MODULE",
          "DEBUG",
          "ALLOWED_HOSTS",
          "API_KEYS (encrypted)"
        ]
      },
      "natural_language_support": {
        "description": "Enhanced keyword detection for natural queries",
        "features": [
          "Multiple keyword variations per topic",
          "Context-aware pattern matching",
          "Priority-based keyword resolution",
          "Conversational query handling"
        ],
        "examples": {
          "quantum_computing": [
            "Tell me about quantum computers",
            "How do qubits work?",
            "Quantum vs classical computing",
            "Quantum mechanics applications"
          ],
          "medical": [
            "I have a headache",
            "What are diabetes symptoms?", 
            "How to treat fever?",
            "Drug interaction checker"
          ]
        }
      },
      "error_handling": {
        "levels": [
          {
            "level": "Service Unavailable",
            "action": "Graceful degradation to available services"
          },
          {
            "level": "API Timeout",
            "action": "Switch to next provider in chain"
          },
          {
            "level": "Database Error", 
            "action": "Use cached responses or default messages"
          },
          {
            "level": "Critical Failure",
            "action": "Return user-friendly error message"
          }
        ],
        "monitoring": [
          "Error rate tracking",
          "Performance metrics",
          "Service health checks",
          "User feedback collection"
        ]
      },
      "performance_optimizations": {
        "techniques": [
          "Response caching for common queries",
          "Lazy loading of services",
          "Asynchronous processing where possible",
          "Database query optimization",
          "Content compression",
          "CDN integration for static assets"
        ],
        "metrics": {
          "average_response_time": "< 2 seconds",
          "availability": "99.9%",
          "concurrent_users": "100+",
          "database_size": "< 50MB"
        }
      }
    },
    "data_flow_summary": {
      "input": "User message + session_id via REST API",
      "processing": "Enhanced Clang → Topic Detection → Service Routing → Response Generation",
      "output": "JSON response with formatted message and metadata",
      "storage": "Session data, conversation history, user preferences",
      "external_apis": "4 AI providers with intelligent fallback",
      "response_time": "1-3 seconds average"
    }
  }
}
