[
  {
    "question": "[1] Solve a recursion problem. Code in Python.",
    "answer": "```python\ndef factorial(n):\n    if n == 0:\n        return 1\n    return n * factorial(n-1)\n```\nCalculates factorial using recursion."
  },
  {
    "question": "[2] Solve a strings problem. Code in Python.",
    "answer": "```python\ndef reverse_string(s):\n    return s[::-1]\n```\nReverses a string."
  },
  {
    "question": "[3] Solve a queues problem. Code in Java.",
    "answer": "```java\nimport java.util.*;\nQueue<Integer> q = new LinkedList<>();\nq.add(1);\nq.add(2);\nSystem.out.println(q.poll());\n```\nImplements a queue using LinkedList."
  },
  {
    "question": "[4] Solve a recursion problem. Code in Java.",
    "answer": "```java\npublic int factorial(int n) {\n    if (n == 0) return 1;\n    return n * factorial(n-1);\n}\n```\nCalculates factorial using recursion."
  },
  {
    "question": "[5] Solve a hashing problem. Code in Python.",
    "answer": "```python\nhash_map = {}\nhash_map['a'] = 1\nprint(hash_map['a'])\n```\nImplements a hash map using dict."
  },
  {
    "question": "[6] Solve a bit manipulation problem. Code in C++.",
    "answer": "```cpp\nint countSetBits(int n) {\n    int count = 0;\n    while (n) {\n        count += n & 1;\n        n >>= 1;\n    }\n    return count;\n}\n```\nCounts set bits in an integer."
  },
  {
    "question": "[7] Solve a sorting problem. Code in C++.",
    "answer": "```cpp\nvoid bubbleSort(int arr[], int n) {\n    for(int i=0;i<n-1;i++)\n        for(int j=0;j<n-i-1;j++)\n            if(arr[j]>arr[j+1]) swap(arr[j],arr[j+1]);\n}\n```\nSorts an array using bubble sort."
  },
  {
    "question": "[8] Solve a dynamic programming problem. Code in C++.",
    "answer": "// Code for dynamic programming in C++ not available."
  },
  {
    "question": "[9] Solve a greedy problem. Code in Java.",
    "answer": "```java\nimport java.util.*;\npublic List<int[]> activitySelection(List<int[]> activities) {\n    activities.sort(Comparator.comparingInt(a -> a[1]));\n    List<int[]> res = new ArrayList<>();\n    res.add(activities.get(0));\n    for (int i = 1; i < activities.size(); i++) {\n        if (activities.get(i)[0] >= res.get(res.size()-1)[1])\n            res.add(activities.get(i));\n    }\n    return res;\n}\n```\nSelects maximum number of non-overlapping activities."
  },
  {
    "question": "[10] Solve a geometry problem. Code in Java.",
    "answer": "```java\npublic double areaOfCircle(double r) {\n    return Math.PI * r * r;\n}\n```\nCalculates area of a circle."
  },
  {
    "question": "[11] Solve a queues problem. Code in Python.",
    "answer": "```python\nfrom collections import deque\nq = deque()\nq.append(1)\nq.append(2)\nprint(q.popleft())\n```\nImplements a queue using deque."
  },
  {
    "question": "[12] Solve a strings problem. Code in Python.",
    "answer": "```python\ndef reverse_string(s):\n    return s[::-1]\n```\nReverses a string."
  },
  {
    "question": "[13] Solve a tries problem. Code in Python.",
    "answer": "```python\nclass TrieNode:\n    def __init__(self):\n        self.children = {}\n        self.is_end = False\nclass Trie:\n    def __init__(self):\n        self.root = TrieNode()\n    def insert(self, word):\n        node = self.root\n        for char in word:\n            if char not in node.children:\n                node.children[char] = TrieNode()\n            node = node.children[char]\n        node.is_end = True\n```\nBasic Trie implementation."
  },
  {
    "question": "[14] Solve a backtracking problem. Code in Python.",
    "answer": "```python\ndef solve(nums, path):\n    if not nums:\n        print(path)\n        return\n    for i in range(len(nums)):\n        solve(nums[:i]+nums[i+1:], path+[nums[i]])\n```\nGenerates all permutations using backtracking."
  },
  {
    "question": "[15] Solve a sorting problem. Code in Python.",
    "answer": "```python\ndef bubble_sort(arr):\n    n = len(arr)\n    for i in range(n):\n        for j in range(0, n-i-1):\n            if arr[j] > arr[j+1]:\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n    return arr\n```\nSorts an array using bubble sort."
  },
  {
    "question": "[16] Solve a greedy problem. Code in Java.",
    "answer": "```java\nimport java.util.*;\npublic List<int[]> activitySelection(List<int[]> activities) {\n    activities.sort(Comparator.comparingInt(a -> a[1]));\n    List<int[]> res = new ArrayList<>();\n    res.add(activities.get(0));\n    for (int i = 1; i < activities.size(); i++) {\n        if (activities.get(i)[0] >= res.get(res.size()-1)[1])\n            res.add(activities.get(i));\n    }\n    return res;\n}\n```\nSelects maximum number of non-overlapping activities."
  },
  {
    "question": "[17] Solve a binary trees problem. Code in Python.",
    "answer": "```python\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef treeHeight(root):\n    if not root:\n        return 0\n    return 1 + max(treeHeight(root.left), treeHeight(root.right))\n```\nComputes the height of a binary tree."
  },
  {
    "question": "[18] Solve a number theory problem. Code in Java.",
    "answer": "```java\npublic boolean isPrime(int n) {\n    if (n < 2) return false;\n    for (int i = 2; i * i <= n; i++)\n        if (n % i == 0) return false;\n    return true;\n}\n```\nChecks if a number is prime."
  },
  {
    "question": "[19] Solve a searching problem. Code in Python.",
    "answer": "```python\ndef binary_search(arr, target):\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1\n```\nPerforms binary search on a sorted array."
  },
  {
    "question": "[20] Solve a math problem. Code in Java.",
    "answer": "```java\npublic boolean isArmstrong(int n) {\n    int temp = n, digitCount = 0, sum = 0;\n    digitCount = (int)(Math.log10(n)) + 1;\n    while (temp != 0) {\n        int digit = temp % 10;\n        sum += Math.pow(digit, digitCount);\n        temp /= 10;\n    }\n    return n == sum;\n}\n```\nChecks if a number is an Armstrong number."
  },
  {
    "question": "[21] Solve a number theory problem. Code in Python.",
    "answer": "```python\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True\n```\nChecks if a number is prime."
  },
  {
    "question": "[22] Solve a hashing problem. Code in Java.",
    "answer": "```java\nimport java.util.*;\nMap<String, Integer> hashMap = new HashMap<>();\nhashMap.put(\"a\", 1);\nSystem.out.println(hashMap.get(\"a\"));\n```\nImplements a hash map using HashMap."
  },
  {
    "question": "[23] Solve a binary trees problem. Code in Python.",
    "answer": "```python\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef treeHeight(root):\n    if not root:\n        return 0\n    return 1 + max(treeHeight(root.left), treeHeight(root.right))\n```\nComputes the height of a binary tree."
  },
  {
    "question": "[24] Solve a searching problem. Code in Java.",
    "answer": "```java\npublic int binarySearch(int[] arr, int target) {\n    int left=0,right=arr.length-1;\n    while(left<=right){\n        int mid=left+(right-left)/2;\n        if(arr[mid]==target) return mid;\n        else if(arr[mid]<target) left=mid+1;\n        else right=mid-1;\n    }\n    return -1;\n}\n```\nPerforms binary search on a sorted array."
  },
  {
    "question": "[25] Solve a dynamic programming problem. Code in Java.",
    "answer": "// Code for dynamic programming in Java not available."
  },
  {
    "question": "[26] Solve a math problem. Code in C++.",
    "answer": "```cpp\n#include <cmath>\nbool isArmstrong(int n) {\n    int temp = n, digitCount = 0, sum = 0;\n    digitCount = (int)(log10(n)) + 1;\n    while (temp != 0) {\n        int digit = temp % 10;\n        sum += pow(digit, digitCount);\n        temp /= 10;\n    }\n    return n == sum;\n}\n```\nChecks if a number is an Armstrong number."
  },
  {
    "question": "[27] Solve a hashing problem. Code in Java.",
    "answer": "```java\nimport java.util.*;\nMap<String, Integer> hashMap = new HashMap<>();\nhashMap.put(\"a\", 1);\nSystem.out.println(hashMap.get(\"a\"));\n```\nImplements a hash map using HashMap."
  },
  {
    "question": "[28] Solve a geometry problem. Code in Python.",
    "answer": "```python\ndef area_of_circle(r):\n    import math\n    return math.pi * r * r\n```\nCalculates area of a circle."
  },
  {
    "question": "[29] Solve a backtracking problem. Code in Python.",
    "answer": "```python\ndef solve(nums, path):\n    if not nums:\n        print(path)\n        return\n    for i in range(len(nums)):\n        solve(nums[:i]+nums[i+1:], path+[nums[i]])\n```\nGenerates all permutations using backtracking."
  },
  {
    "question": "[30] Solve a math problem. Code in Java.",
    "answer": "```java\npublic boolean isArmstrong(int n) {\n    int temp = n, digitCount = 0, sum = 0;\n    digitCount = (int)(Math.log10(n)) + 1;\n    while (temp != 0) {\n        int digit = temp % 10;\n        sum += Math.pow(digit, digitCount);\n        temp /= 10;\n    }\n    return n == sum;\n}\n```\nChecks if a number is an Armstrong number."
  },
  {
    "question": "[31] Solve a math problem. Code in Java.",
    "answer": "```java\npublic boolean isArmstrong(int n) {\n    int temp = n, digitCount = 0, sum = 0;\n    digitCount = (int)(Math.log10(n)) + 1;\n    while (temp != 0) {\n        int digit = temp % 10;\n        sum += Math.pow(digit, digitCount);\n        temp /= 10;\n    }\n    return n == sum;\n}\n```\nChecks if a number is an Armstrong number."
  },
  {
    "question": "[32] Solve a queues problem. Code in C++.",
    "answer": "```cpp\n#include <queue>\n#include <iostream>\nusing namespace std;\nqueue<int> q;\nq.push(1);\nq.push(2);\ncout << q.front() << endl;\nq.pop();\n```\nImplements a queue using STL queue."
  },
  {
    "question": "[33] Solve a backtracking problem. Code in Python.",
    "answer": "```python\ndef solve(nums, path):\n    if not nums:\n        print(path)\n        return\n    for i in range(len(nums)):\n        solve(nums[:i]+nums[i+1:], path+[nums[i]])\n```\nGenerates all permutations using backtracking."
  },
  {
    "question": "[34] Solve a backtracking problem. Code in Java.",
    "answer": "```java\npublic void solve(List<Integer> nums, List<Integer> path) {\n    if (nums.isEmpty()) {\n        System.out.println(path);\n        return;\n    }\n    for (int i = 0; i < nums.size(); i++) {\n        List<Integer> nums2 = new ArrayList<>(nums);\n        nums2.remove(i);\n        List<Integer> path2 = new ArrayList<>(path);\n        path2.add(nums.get(i));\n        solve(nums2, path2);\n    }\n}\n```\nGenerates all permutations using backtracking."
  },
  {
    "question": "[35] Solve a sorting problem. Code in C++.",
    "answer": "```cpp\nvoid bubbleSort(int arr[], int n) {\n    for(int i=0;i<n-1;i++)\n        for(int j=0;j<n-i-1;j++)\n            if(arr[j]>arr[j+1]) swap(arr[j],arr[j+1]);\n}\n```\nSorts an array using bubble sort."
  },
  {
    "question": "[36] Solve a strings problem. Code in Java.",
    "answer": "```java\npublic String reverseString(String s) {\n    return new StringBuilder(s).reverse().toString();\n}\n```\nReverses a string."
  },
  {
    "question": "[37] Solve a searching problem. Code in C++.",
    "answer": "```cpp\nint binarySearch(int arr[], int n, int target) {\n    int left=0,right=n-1;\n    while(left<=right){\n        int mid=left+(right-left)/2;\n        if(arr[mid]==target) return mid;\n        else if(arr[mid]<target) left=mid+1;\n        else right=mid-1;\n    }\n    return -1;\n}\n```\nPerforms binary search on a sorted array."
  },
  {
    "question": "[38] Solve a sorting problem. Code in C++.",
    "answer": "```cpp\nvoid bubbleSort(int arr[], int n) {\n    for(int i=0;i<n-1;i++)\n        for(int j=0;j<n-i-1;j++)\n            if(arr[j]>arr[j+1]) swap(arr[j],arr[j+1]);\n}\n```\nSorts an array using bubble sort."
  },
  {
    "question": "[39] Solve a sorting problem. Code in Java.",
    "answer": "```java\npublic void bubbleSort(int[] arr) {\n    int n = arr.length;\n    for(int i=0;i<n-1;i++)\n        for(int j=0;j<n-i-1;j++)\n            if(arr[j]>arr[j+1]) {\n                int temp=arr[j];arr[j]=arr[j+1];arr[j+1]=temp;\n            }\n}\n```\nSorts an array using bubble sort."
  },
  {
    "question": "[40] Solve a math problem. Code in C++.",
    "answer": "```cpp\n#include <cmath>\nbool isArmstrong(int n) {\n    int temp = n, digitCount = 0, sum = 0;\n    digitCount = (int)(log10(n)) + 1;\n    while (temp != 0) {\n        int digit = temp % 10;\n        sum += pow(digit, digitCount);\n        temp /= 10;\n    }\n    return n == sum;\n}\n```\nChecks if a number is an Armstrong number."
  },
  {
    "question": "[41] Solve a geometry problem. Code in C++.",
    "answer": "```cpp\n#include <cmath>\ndouble areaOfCircle(double r) {\n    return M_PI * r * r;\n}\n```\nCalculates area of a circle."
  },
  {
    "question": "[42] Solve a number theory problem. Code in Java.",
    "answer": "```java\npublic boolean isPrime(int n) {\n    if (n < 2) return false;\n    for (int i = 2; i * i <= n; i++)\n        if (n % i == 0) return false;\n    return true;\n}\n```\nChecks if a number is prime."
  },
  {
    "question": "[43] Solve a arrays problem. Code in C++.",
    "answer": "```cpp\n#include <iostream>\nusing namespace std;\nint findMax(int arr[], int n) {\n    int maxVal = arr[0];\n    for(int i=1;i<n;i++)\n        if(arr[i]>maxVal) maxVal=arr[i];\n    return maxVal;\n}\n```\nFinds the maximum element in an array."
  },
  {
    "question": "[44] Solve a geometry problem. Code in C++.",
    "answer": "```cpp\n#include <cmath>\ndouble areaOfCircle(double r) {\n    return M_PI * r * r;\n}\n```\nCalculates area of a circle."
  },
  {
    "question": "[45] Solve a greedy problem. Code in C++.",
    "answer": "```cpp\n#include <vector>\n#include <algorithm>\nusing namespace std;\nvector<pair<int,int>> activitySelection(vector<pair<int,int>>& activities) {\n    sort(activities.begin(), activities.end(), [](auto &a, auto &b){ return a.second < b.second; });\n    vector<pair<int,int>> res;\n    res.push_back(activities[0]);\n    for (size_t i = 1; i < activities.size(); ++i) {\n        if (activities[i].first >= res.back().second)\n            res.push_back(activities[i]);\n    }\n    return res;\n}\n```\nSelects maximum number of non-overlapping activities."
  },
  {
    "question": "[46] Solve a dynamic programming problem. Code in C++.",
    "answer": "// Code for dynamic programming in C++ not available."
  },
  {
    "question": "[47] Solve a heaps problem. Code in Python.",
    "answer": "```python\nimport heapq\nh = []\nheapq.heappush(h, 3)\nheapq.heappush(h, 1)\nheapq.heappush(h, 2)\nprint(heapq.heappop(h))\n```\nImplements a min-heap using heapq."
  },
  {
    "question": "[48] Solve a searching problem. Code in Java.",
    "answer": "```java\npublic int binarySearch(int[] arr, int target) {\n    int left=0,right=arr.length-1;\n    while(left<=right){\n        int mid=left+(right-left)/2;\n        if(arr[mid]==target) return mid;\n        else if(arr[mid]<target) left=mid+1;\n        else right=mid-1;\n    }\n    return -1;\n}\n```\nPerforms binary search on a sorted array."
  },
  {
    "question": "[49] Solve a arrays problem. Code in C++.",
    "answer": "```cpp\n#include <iostream>\nusing namespace std;\nint findMax(int arr[], int n) {\n    int maxVal = arr[0];\n    for(int i=1;i<n;i++)\n        if(arr[i]>maxVal) maxVal=arr[i];\n    return maxVal;\n}\n```\nFinds the maximum element in an array."
  },
  {
    "question": "[50] Solve a recursion problem. Code in C++.",
    "answer": "```cpp\nint factorial(int n) {\n    if (n == 0) return 1;\n    return n * factorial(n-1);\n}\n```\nCalculates factorial using recursion."
  },
  {
    "question": "[51] Solve a tries problem. Code in Python.",
    "answer": "```python\nclass TrieNode:\n    def __init__(self):\n        self.children = {}\n        self.is_end = False\nclass Trie:\n    def __init__(self):\n        self.root = TrieNode()\n    def insert(self, word):\n        node = self.root\n        for char in word:\n            if char not in node.children:\n                node.children[char] = TrieNode()\n            node = node.children[char]\n        node.is_end = True\n```\nBasic Trie implementation."
  },
  {
    "question": "[52] Solve a recursion problem. Code in C++.",
    "answer": "```cpp\nint factorial(int n) {\n    if (n == 0) return 1;\n    return n * factorial(n-1);\n}\n```\nCalculates factorial using recursion."
  },
  {
    "question": "[53] Solve a arrays problem. Code in Java.",
    "answer": "```java\npublic int findMax(int[] arr) {\n    int maxVal = arr[0];\n    for(int i=1;i<arr.length;i++)\n        if(arr[i]>maxVal) maxVal=arr[i];\n    return maxVal;\n}\n```\nFinds the maximum element in an array."
  },
  {
    "question": "[54] Solve a linked lists problem. Code in Python.",
    "answer": "```python\nclass ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n\ndef reverseList(head):\n    prev = None\n    curr = head\n    while curr:\n        next_node = curr.next\n        curr.next = prev\n        prev = curr\n        curr = next_node\n    return prev\n```\nReverses a singly linked list."
  },
  {
    "question": "[55] Solve a heaps problem. Code in Java.",
    "answer": "```java\nimport java.util.*;\nPriorityQueue<Integer> h = new PriorityQueue<>();\nh.add(3);\nh.add(1);\nh.add(2);\nSystem.out.println(h.poll());\n```\nImplements a min-heap using PriorityQueue."
  },
  {
    "question": "[56] Solve a bit manipulation problem. Code in C++.",
    "answer": "```cpp\nint countSetBits(int n) {\n    int count = 0;\n    while (n) {\n        count += n & 1;\n        n >>= 1;\n    }\n    return count;\n}\n```\nCounts set bits in an integer."
  },
  {
    "question": "[57] Solve a heaps problem. Code in Python.",
    "answer": "```python\nimport heapq\nh = []\nheapq.heappush(h, 3)\nheapq.heappush(h, 1)\nheapq.heappush(h, 2)\nprint(heapq.heappop(h))\n```\nImplements a min-heap using heapq."
  },
  {
    "question": "[58] Solve a number theory problem. Code in C++.",
    "answer": "```cpp\nbool isPrime(int n) {\n    if (n < 2) return false;\n    for (int i = 2; i * i <= n; ++i)\n        if (n % i == 0) return false;\n    return true;\n}\n```\nChecks if a number is prime."
  },
  {
    "question": "[59] Solve a heaps problem. Code in Java.",
    "answer": "```java\nimport java.util.*;\nPriorityQueue<Integer> h = new PriorityQueue<>();\nh.add(3);\nh.add(1);\nh.add(2);\nSystem.out.println(h.poll());\n```\nImplements a min-heap using PriorityQueue."
  },
  {
    "question": "[60] Solve a stacks problem. Code in Python.",
    "answer": "```python\nstack = []\nstack.append(1)\nstack.append(2)\nprint(stack.pop())\n```\nImplements a stack using list."
  },
  {
    "question": "[61] Solve a binary trees problem. Code in Java.",
    "answer": "```java\nclass TreeNode {\n    int val;\n    TreeNode left, right;\n    TreeNode(int x) { val = x; }\n}\npublic int treeHeight(TreeNode root) {\n    if (root == null) return 0;\n    return 1 + Math.max(treeHeight(root.left), treeHeight(root.right));\n}\n```\nComputes the height of a binary tree."
  },
  {
    "question": "[62] Solve a graphs problem. Code in Java.",
    "answer": "// Code for graphs in Java not available."
  },
  {
    "question": "[63] Solve a graphs problem. Code in Java.",
    "answer": "// Code for graphs in Java not available."
  },
  {
    "question": "[64] Solve a graphs problem. Code in Java.",
    "answer": "// Code for graphs in Java not available."
  },
  {
    "question": "[65] Solve a number theory problem. Code in Java.",
    "answer": "```java\npublic boolean isPrime(int n) {\n    if (n < 2) return false;\n    for (int i = 2; i * i <= n; i++)\n        if (n % i == 0) return false;\n    return true;\n}\n```\nChecks if a number is prime."
  },
  {
    "question": "[66] Solve a math problem. Code in Java.",
    "answer": "```java\npublic boolean isArmstrong(int n) {\n    int temp = n, digitCount = 0, sum = 0;\n    digitCount = (int)(Math.log10(n)) + 1;\n    while (temp != 0) {\n        int digit = temp % 10;\n        sum += Math.pow(digit, digitCount);\n        temp /= 10;\n    }\n    return n == sum;\n}\n```\nChecks if a number is an Armstrong number."
  },
  {
    "question": "[67] Solve a bit manipulation problem. Code in Python.",
    "answer": "```python\ndef count_set_bits(n):\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n```\nCounts set bits in an integer."
  },
  {
    "question": "[68] Solve a strings problem. Code in Java.",
    "answer": "```java\npublic String reverseString(String s) {\n    return new StringBuilder(s).reverse().toString();\n}\n```\nReverses a string."
  },
  {
    "question": "[69] Solve a hashing problem. Code in C++.",
    "answer": "```cpp\n#include <unordered_map>\n#include <iostream>\nusing namespace std;\nunordered_map<string, int> hash_map;\nhash_map[\"a\"] = 1;\ncout << hash_map[\"a\"] << endl;\n```\nImplements a hash map using unordered_map."
  },
  {
    "question": "[70] Solve a searching problem. Code in C++.",
    "answer": "```cpp\nint binarySearch(int arr[], int n, int target) {\n    int left=0,right=n-1;\n    while(left<=right){\n        int mid=left+(right-left)/2;\n        if(arr[mid]==target) return mid;\n        else if(arr[mid]<target) left=mid+1;\n        else right=mid-1;\n    }\n    return -1;\n}\n```\nPerforms binary search on a sorted array."
  },
  {
    "question": "[71] Solve a math problem. Code in C++.",
    "answer": "```cpp\n#include <cmath>\nbool isArmstrong(int n) {\n    int temp = n, digitCount = 0, sum = 0;\n    digitCount = (int)(log10(n)) + 1;\n    while (temp != 0) {\n        int digit = temp % 10;\n        sum += pow(digit, digitCount);\n        temp /= 10;\n    }\n    return n == sum;\n}\n```\nChecks if a number is an Armstrong number."
  },
  {
    "question": "[72] Solve a searching problem. Code in C++.",
    "answer": "```cpp\nint binarySearch(int arr[], int n, int target) {\n    int left=0,right=n-1;\n    while(left<=right){\n        int mid=left+(right-left)/2;\n        if(arr[mid]==target) return mid;\n        else if(arr[mid]<target) left=mid+1;\n        else right=mid-1;\n    }\n    return -1;\n}\n```\nPerforms binary search on a sorted array."
  },
  {
    "question": "[73] Solve a sorting problem. Code in Python.",
    "answer": "```python\ndef bubble_sort(arr):\n    n = len(arr)\n    for i in range(n):\n        for j in range(0, n-i-1):\n            if arr[j] > arr[j+1]:\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n    return arr\n```\nSorts an array using bubble sort."
  },
  {
    "question": "[74] Solve a tries problem. Code in C++.",
    "answer": "```cpp\n#include <unordered_map>\nclass TrieNode {\npublic:\n    unordered_map<char, TrieNode*> children;\n    bool is_end = false;\n};\nclass Trie {\npublic:\n    TrieNode* root = new TrieNode();\n    void insert(string word) {\n        TrieNode* node = root;\n        for (char c : word) {\n            if (!node->children[c]) node->children[c] = new TrieNode();\n            node = node->children[c];\n        }\n        node->is_end = true;\n    }\n};\n```\nBasic Trie implementation."
  },
  {
    "question": "[75] Solve a queues problem. Code in Java.",
    "answer": "```java\nimport java.util.*;\nQueue<Integer> q = new LinkedList<>();\nq.add(1);\nq.add(2);\nSystem.out.println(q.poll());\n```\nImplements a queue using LinkedList."
  },
  {
    "question": "[76] Solve a recursion problem. Code in Python.",
    "answer": "```python\ndef factorial(n):\n    if n == 0:\n        return 1\n    return n * factorial(n-1)\n```\nCalculates factorial using recursion."
  },
  {
    "question": "[77] Solve a graphs problem. Code in C++.",
    "answer": "// Code for graphs in C++ not available."
  },
  {
    "question": "[78] Solve a queues problem. Code in C++.",
    "answer": "```cpp\n#include <queue>\n#include <iostream>\nusing namespace std;\nqueue<int> q;\nq.push(1);\nq.push(2);\ncout << q.front() << endl;\nq.pop();\n```\nImplements a queue using STL queue."
  },
  {
    "question": "[79] Solve a bit manipulation problem. Code in C++.",
    "answer": "```cpp\nint countSetBits(int n) {\n    int count = 0;\n    while (n) {\n        count += n & 1;\n        n >>= 1;\n    }\n    return count;\n}\n```\nCounts set bits in an integer."
  },
  {
    "question": "[80] Solve a backtracking problem. Code in Python.",
    "answer": "```python\ndef solve(nums, path):\n    if not nums:\n        print(path)\n        return\n    for i in range(len(nums)):\n        solve(nums[:i]+nums[i+1:], path+[nums[i]])\n```\nGenerates all permutations using backtracking."
  },
  {
    "question": "[81] Solve a tries problem. Code in C++.",
    "answer": "```cpp\n#include <unordered_map>\nclass TrieNode {\npublic:\n    unordered_map<char, TrieNode*> children;\n    bool is_end = false;\n};\nclass Trie {\npublic:\n    TrieNode* root = new TrieNode();\n    void insert(string word) {\n        TrieNode* node = root;\n        for (char c : word) {\n            if (!node->children[c]) node->children[c] = new TrieNode();\n            node = node->children[c];\n        }\n        node->is_end = true;\n    }\n};\n```\nBasic Trie implementation."
  },
  {
    "question": "[82] Solve a binary trees problem. Code in Python.",
    "answer": "```python\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef treeHeight(root):\n    if not root:\n        return 0\n    return 1 + max(treeHeight(root.left), treeHeight(root.right))\n```\nComputes the height of a binary tree."
  },
  {
    "question": "[83] Solve a geometry problem. Code in Java.",
    "answer": "```java\npublic double areaOfCircle(double r) {\n    return Math.PI * r * r;\n}\n```\nCalculates area of a circle."
  },
  {
    "question": "[84] Solve a recursion problem. Code in C++.",
    "answer": "```cpp\nint factorial(int n) {\n    if (n == 0) return 1;\n    return n * factorial(n-1);\n}\n```\nCalculates factorial using recursion."
  },
  {
    "question": "[85] Solve a backtracking problem. Code in C++.",
    "answer": "```cpp\n#include <vector>\n#include <iostream>\nusing namespace std;\nvoid solve(vector<int>& nums, vector<int>& path) {\n    if (nums.empty()) {\n        for (int x : path) cout << x << \" \";\n        cout << endl;\n        return;\n    }\n    for (size_t i = 0; i < nums.size(); ++i) {\n        vector<int> nums2 = nums;\n        nums2.erase(nums2.begin() + i);\n        vector<int> path2 = path;\n        path2.push_back(nums[i]);\n        solve(nums2, path2);\n    }\n}\n```\nGenerates all permutations using backtracking."
  },
  {
    "question": "[86] Solve a backtracking problem. Code in Python.",
    "answer": "```python\ndef solve(nums, path):\n    if not nums:\n        print(path)\n        return\n    for i in range(len(nums)):\n        solve(nums[:i]+nums[i+1:], path+[nums[i]])\n```\nGenerates all permutations using backtracking."
  },
  {
    "question": "[87] Solve a linked lists problem. Code in Python.",
    "answer": "```python\nclass ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n\ndef reverseList(head):\n    prev = None\n    curr = head\n    while curr:\n        next_node = curr.next\n        curr.next = prev\n        prev = curr\n        curr = next_node\n    return prev\n```\nReverses a singly linked list."
  },
  {
    "question": "[88] Solve a math problem. Code in C++.",
    "answer": "```cpp\n#include <cmath>\nbool isArmstrong(int n) {\n    int temp = n, digitCount = 0, sum = 0;\n    digitCount = (int)(log10(n)) + 1;\n    while (temp != 0) {\n        int digit = temp % 10;\n        sum += pow(digit, digitCount);\n        temp /= 10;\n    }\n    return n == sum;\n}\n```\nChecks if a number is an Armstrong number."
  },
  {
    "question": "[89] Solve a searching problem. Code in Java.",
    "answer": "```java\npublic int binarySearch(int[] arr, int target) {\n    int left=0,right=arr.length-1;\n    while(left<=right){\n        int mid=left+(right-left)/2;\n        if(arr[mid]==target) return mid;\n        else if(arr[mid]<target) left=mid+1;\n        else right=mid-1;\n    }\n    return -1;\n}\n```\nPerforms binary search on a sorted array."
  },
  {
    "question": "[90] Solve a tries problem. Code in Python.",
    "answer": "```python\nclass TrieNode:\n    def __init__(self):\n        self.children = {}\n        self.is_end = False\nclass Trie:\n    def __init__(self):\n        self.root = TrieNode()\n    def insert(self, word):\n        node = self.root\n        for char in word:\n            if char not in node.children:\n                node.children[char] = TrieNode()\n            node = node.children[char]\n        node.is_end = True\n```\nBasic Trie implementation."
  },
  {
    "question": "[91] Solve a tries problem. Code in Java.",
    "answer": "```java\nclass TrieNode {\n    Map<Character, TrieNode> children = new HashMap<>();\n    boolean isEnd = false;\n}\nclass Trie {\n    TrieNode root = new TrieNode();\n    void insert(String word) {\n        TrieNode node = root;\n        for (char c : word.toCharArray()) {\n            node.children.putIfAbsent(c, new TrieNode());\n            node = node.children.get(c);\n        }\n        node.isEnd = true;\n    }\n}\n```\nBasic Trie implementation."
  },
  {
    "question": "[92] Solve a recursion problem. Code in Java.",
    "answer": "```java\npublic int factorial(int n) {\n    if (n == 0) return 1;\n    return n * factorial(n-1);\n}\n```\nCalculates factorial using recursion."
  },
  {
    "question": "[93] Solve a number theory problem. Code in C++.",
    "answer": "```cpp\nbool isPrime(int n) {\n    if (n < 2) return false;\n    for (int i = 2; i * i <= n; ++i)\n        if (n % i == 0) return false;\n    return true;\n}\n```\nChecks if a number is prime."
  },
  {
    "question": "[94] Solve a tries problem. Code in Java.",
    "answer": "```java\nclass TrieNode {\n    Map<Character, TrieNode> children = new HashMap<>();\n    boolean isEnd = false;\n}\nclass Trie {\n    TrieNode root = new TrieNode();\n    void insert(String word) {\n        TrieNode node = root;\n        for (char c : word.toCharArray()) {\n            node.children.putIfAbsent(c, new TrieNode());\n            node = node.children.get(c);\n        }\n        node.isEnd = true;\n    }\n}\n```\nBasic Trie implementation."
  },
  {
    "question": "[95] Solve a tries problem. Code in C++.",
    "answer": "```cpp\n#include <unordered_map>\nclass TrieNode {\npublic:\n    unordered_map<char, TrieNode*> children;\n    bool is_end = false;\n};\nclass Trie {\npublic:\n    TrieNode* root = new TrieNode();\n    void insert(string word) {\n        TrieNode* node = root;\n        for (char c : word) {\n            if (!node->children[c]) node->children[c] = new TrieNode();\n            node = node->children[c];\n        }\n        node->is_end = true;\n    }\n};\n```\nBasic Trie implementation."
  },
  {
    "question": "[96] Solve a tries problem. Code in Python.",
    "answer": "```python\nclass TrieNode:\n    def __init__(self):\n        self.children = {}\n        self.is_end = False\nclass Trie:\n    def __init__(self):\n        self.root = TrieNode()\n    def insert(self, word):\n        node = self.root\n        for char in word:\n            if char not in node.children:\n                node.children[char] = TrieNode()\n            node = node.children[char]\n        node.is_end = True\n```\nBasic Trie implementation."
  },
  {
    "question": "[97] Solve a recursion problem. Code in C++.",
    "answer": "```cpp\nint factorial(int n) {\n    if (n == 0) return 1;\n    return n * factorial(n-1);\n}\n```\nCalculates factorial using recursion."
  },
  {
    "question": "[98] Solve a arrays problem. Code in Python.",
    "answer": "```python\ndef find_max(arr):\n    return max(arr)\n```\nFinds the maximum element in an array."
  },
  {
    "question": "[99] Solve a dynamic programming problem. Code in Java.",
    "answer": "// Code for dynamic programming in Java not available."
  },
  {
    "question": "[100] Solve a stacks problem. Code in Python.",
    "answer": "```python\nstack = []\nstack.append(1)\nstack.append(2)\nprint(stack.pop())\n```\nImplements a stack using list."
  },
  {
    "question": "[101] Solve a dynamic programming problem. Code in Java.",
    "answer": "// Code for dynamic programming in Java not available."
  },
  {
    "question": "[102] Solve a searching problem. Code in Java.",
    "answer": "```java\npublic int binarySearch(int[] arr, int target) {\n    int left=0,right=arr.length-1;\n    while(left<=right){\n        int mid=left+(right-left)/2;\n        if(arr[mid]==target) return mid;\n        else if(arr[mid]<target) left=mid+1;\n        else right=mid-1;\n    }\n    return -1;\n}\n```\nPerforms binary search on a sorted array."
  },
  {
    "question": "[103] Solve a hashing problem. Code in C++.",
    "answer": "```cpp\n#include <unordered_map>\n#include <iostream>\nusing namespace std;\nunordered_map<string, int> hash_map;\nhash_map[\"a\"] = 1;\ncout << hash_map[\"a\"] << endl;\n```\nImplements a hash map using unordered_map."
  },
  {
    "question": "[104] Solve a number theory problem. Code in C++.",
    "answer": "```cpp\nbool isPrime(int n) {\n    if (n < 2) return false;\n    for (int i = 2; i * i <= n; ++i)\n        if (n % i == 0) return false;\n    return true;\n}\n```\nChecks if a number is prime."
  },
  {
    "question": "[105] Solve a greedy problem. Code in C++.",
    "answer": "```cpp\n#include <vector>\n#include <algorithm>\nusing namespace std;\nvector<pair<int,int>> activitySelection(vector<pair<int,int>>& activities) {\n    sort(activities.begin(), activities.end(), [](auto &a, auto &b){ return a.second < b.second; });\n    vector<pair<int,int>> res;\n    res.push_back(activities[0]);\n    for (size_t i = 1; i < activities.size(); ++i) {\n        if (activities[i].first >= res.back().second)\n            res.push_back(activities[i]);\n    }\n    return res;\n}\n```\nSelects maximum number of non-overlapping activities."
  },
  {
    "question": "[106] Solve a tries problem. Code in Python.",
    "answer": "```python\nclass TrieNode:\n    def __init__(self):\n        self.children = {}\n        self.is_end = False\nclass Trie:\n    def __init__(self):\n        self.root = TrieNode()\n    def insert(self, word):\n        node = self.root\n        for char in word:\n            if char not in node.children:\n                node.children[char] = TrieNode()\n            node = node.children[char]\n        node.is_end = True\n```\nBasic Trie implementation."
  },
  {
    "question": "[107] Solve a bit manipulation problem. Code in Python.",
    "answer": "```python\ndef count_set_bits(n):\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n```\nCounts set bits in an integer."
  },
  {
    "question": "[108] Solve a stacks problem. Code in Python.",
    "answer": "```python\nstack = []\nstack.append(1)\nstack.append(2)\nprint(stack.pop())\n```\nImplements a stack using list."
  },
  {
    "question": "[109] Solve a stacks problem. Code in C++.",
    "answer": "```cpp\n#include <stack>\n#include <iostream>\nusing namespace std;\nstack<int> s;\ns.push(1);\ns.push(2);\ncout << s.top() << endl;\ns.pop();\n```\nImplements a stack using STL stack."
  },
  {
    "question": "[110] Solve a dynamic programming problem. Code in C++.",
    "answer": "// Code for dynamic programming in C++ not available."
  },
  {
    "question": "[111] Solve a number theory problem. Code in C++.",
    "answer": "```cpp\nbool isPrime(int n) {\n    if (n < 2) return false;\n    for (int i = 2; i * i <= n; ++i)\n        if (n % i == 0) return false;\n    return true;\n}\n```\nChecks if a number is prime."
  },
  {
    "question": "[112] Solve a arrays problem. Code in C++.",
    "answer": "```cpp\n#include <iostream>\nusing namespace std;\nint findMax(int arr[], int n) {\n    int maxVal = arr[0];\n    for(int i=1;i<n;i++)\n        if(arr[i]>maxVal) maxVal=arr[i];\n    return maxVal;\n}\n```\nFinds the maximum element in an array."
  },
  {
    "question": "[113] Solve a sorting problem. Code in Java.",
    "answer": "```java\npublic void bubbleSort(int[] arr) {\n    int n = arr.length;\n    for(int i=0;i<n-1;i++)\n        for(int j=0;j<n-i-1;j++)\n            if(arr[j]>arr[j+1]) {\n                int temp=arr[j];arr[j]=arr[j+1];arr[j+1]=temp;\n            }\n}\n```\nSorts an array using bubble sort."
  },
  {
    "question": "[114] Solve a backtracking problem. Code in Java.",
    "answer": "```java\npublic void solve(List<Integer> nums, List<Integer> path) {\n    if (nums.isEmpty()) {\n        System.out.println(path);\n        return;\n    }\n    for (int i = 0; i < nums.size(); i++) {\n        List<Integer> nums2 = new ArrayList<>(nums);\n        nums2.remove(i);\n        List<Integer> path2 = new ArrayList<>(path);\n        path2.add(nums.get(i));\n        solve(nums2, path2);\n    }\n}\n```\nGenerates all permutations using backtracking."
  },
  {
    "question": "[115] Solve a dynamic programming problem. Code in Java.",
    "answer": "// Code for dynamic programming in Java not available."
  },
  {
    "question": "[116] Solve a bit manipulation problem. Code in C++.",
    "answer": "```cpp\nint countSetBits(int n) {\n    int count = 0;\n    while (n) {\n        count += n & 1;\n        n >>= 1;\n    }\n    return count;\n}\n```\nCounts set bits in an integer."
  },
  {
    "question": "[117] Solve a queues problem. Code in Java.",
    "answer": "```java\nimport java.util.*;\nQueue<Integer> q = new LinkedList<>();\nq.add(1);\nq.add(2);\nSystem.out.println(q.poll());\n```\nImplements a queue using LinkedList."
  },
  {
    "question": "[118] Solve a binary trees problem. Code in Python.",
    "answer": "```python\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef treeHeight(root):\n    if not root:\n        return 0\n    return 1 + max(treeHeight(root.left), treeHeight(root.right))\n```\nComputes the height of a binary tree."
  },
  {
    "question": "[119] Solve a queues problem. Code in Java.",
    "answer": "```java\nimport java.util.*;\nQueue<Integer> q = new LinkedList<>();\nq.add(1);\nq.add(2);\nSystem.out.println(q.poll());\n```\nImplements a queue using LinkedList."
  },
  {
    "question": "[120] Solve a dynamic programming problem. Code in Python.",
    "answer": "// Code for dynamic programming in Python not available."
  },
  {
    "question": "[121] Solve a number theory problem. Code in Python.",
    "answer": "```python\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True\n```\nChecks if a number is prime."
  },
  {
    "question": "[122] Solve a searching problem. Code in Python.",
    "answer": "```python\ndef binary_search(arr, target):\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1\n```\nPerforms binary search on a sorted array."
  },
  {
    "question": "[123] Solve a linked lists problem. Code in Python.",
    "answer": "```python\nclass ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n\ndef reverseList(head):\n    prev = None\n    curr = head\n    while curr:\n        next_node = curr.next\n        curr.next = prev\n        prev = curr\n        curr = next_node\n    return prev\n```\nReverses a singly linked list."
  },
  {
    "question": "[124] Solve a math problem. Code in C++.",
    "answer": "```cpp\n#include <cmath>\nbool isArmstrong(int n) {\n    int temp = n, digitCount = 0, sum = 0;\n    digitCount = (int)(log10(n)) + 1;\n    while (temp != 0) {\n        int digit = temp % 10;\n        sum += pow(digit, digitCount);\n        temp /= 10;\n    }\n    return n == sum;\n}\n```\nChecks if a number is an Armstrong number."
  },
  {
    "question": "[125] Solve a graphs problem. Code in Python.",
    "answer": "// Code for graphs in Python not available."
  },
  {
    "question": "[126] Solve a queues problem. Code in Python.",
    "answer": "```python\nfrom collections import deque\nq = deque()\nq.append(1)\nq.append(2)\nprint(q.popleft())\n```\nImplements a queue using deque."
  },
  {
    "question": "[127] Solve a graphs problem. Code in Python.",
    "answer": "// Code for graphs in Python not available."
  },
  {
    "question": "[128] Solve a math problem. Code in Java.",
    "answer": "```java\npublic boolean isArmstrong(int n) {\n    int temp = n, digitCount = 0, sum = 0;\n    digitCount = (int)(Math.log10(n)) + 1;\n    while (temp != 0) {\n        int digit = temp % 10;\n        sum += Math.pow(digit, digitCount);\n        temp /= 10;\n    }\n    return n == sum;\n}\n```\nChecks if a number is an Armstrong number."
  },
  {
    "question": "[129] Solve a graphs problem. Code in Java.",
    "answer": "// Code for graphs in Java not available."
  },
  {
    "question": "[130] Solve a backtracking problem. Code in C++.",
    "answer": "```cpp\n#include <vector>\n#include <iostream>\nusing namespace std;\nvoid solve(vector<int>& nums, vector<int>& path) {\n    if (nums.empty()) {\n        for (int x : path) cout << x << \" \";\n        cout << endl;\n        return;\n    }\n    for (size_t i = 0; i < nums.size(); ++i) {\n        vector<int> nums2 = nums;\n        nums2.erase(nums2.begin() + i);\n        vector<int> path2 = path;\n        path2.push_back(nums[i]);\n        solve(nums2, path2);\n    }\n}\n```\nGenerates all permutations using backtracking."
  },
  {
    "question": "[131] Solve a dynamic programming problem. Code in C++.",
    "answer": "// Code for dynamic programming in C++ not available."
  },
  {
    "question": "[132] Solve a hashing problem. Code in Java.",
    "answer": "```java\nimport java.util.*;\nMap<String, Integer> hashMap = new HashMap<>();\nhashMap.put(\"a\", 1);\nSystem.out.println(hashMap.get(\"a\"));\n```\nImplements a hash map using HashMap."
  },
  {
    "question": "[133] Solve a queues problem. Code in C++.",
    "answer": "```cpp\n#include <queue>\n#include <iostream>\nusing namespace std;\nqueue<int> q;\nq.push(1);\nq.push(2);\ncout << q.front() << endl;\nq.pop();\n```\nImplements a queue using STL queue."
  },
  {
    "question": "[134] Solve a heaps problem. Code in Java.",
    "answer": "```java\nimport java.util.*;\nPriorityQueue<Integer> h = new PriorityQueue<>();\nh.add(3);\nh.add(1);\nh.add(2);\nSystem.out.println(h.poll());\n```\nImplements a min-heap using PriorityQueue."
  },
  {
    "question": "[135] Solve a tries problem. Code in Java.",
    "answer": "```java\nclass TrieNode {\n    Map<Character, TrieNode> children = new HashMap<>();\n    boolean isEnd = false;\n}\nclass Trie {\n    TrieNode root = new TrieNode();\n    void insert(String word) {\n        TrieNode node = root;\n        for (char c : word.toCharArray()) {\n            node.children.putIfAbsent(c, new TrieNode());\n            node = node.children.get(c);\n        }\n        node.isEnd = true;\n    }\n}\n```\nBasic Trie implementation."
  },
  {
    "question": "[136] Solve a queues problem. Code in Python.",
    "answer": "```python\nfrom collections import deque\nq = deque()\nq.append(1)\nq.append(2)\nprint(q.popleft())\n```\nImplements a queue using deque."
  },
  {
    "question": "[137] Solve a linked lists problem. Code in Python.",
    "answer": "```python\nclass ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n\ndef reverseList(head):\n    prev = None\n    curr = head\n    while curr:\n        next_node = curr.next\n        curr.next = prev\n        prev = curr\n        curr = next_node\n    return prev\n```\nReverses a singly linked list."
  },
  {
    "question": "[138] Solve a dynamic programming problem. Code in Java.",
    "answer": "// Code for dynamic programming in Java not available."
  },
  {
    "question": "[139] Solve a arrays problem. Code in C++.",
    "answer": "```cpp\n#include <iostream>\nusing namespace std;\nint findMax(int arr[], int n) {\n    int maxVal = arr[0];\n    for(int i=1;i<n;i++)\n        if(arr[i]>maxVal) maxVal=arr[i];\n    return maxVal;\n}\n```\nFinds the maximum element in an array."
  },
  {
    "question": "[140] Solve a graphs problem. Code in Python.",
    "answer": "// Code for graphs in Python not available."
  },
  {
    "question": "[141] Solve a sorting problem. Code in Python.",
    "answer": "```python\ndef bubble_sort(arr):\n    n = len(arr)\n    for i in range(n):\n        for j in range(0, n-i-1):\n            if arr[j] > arr[j+1]:\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n    return arr\n```\nSorts an array using bubble sort."
  },
  {
    "question": "[142] Solve a queues problem. Code in C++.",
    "answer": "```cpp\n#include <queue>\n#include <iostream>\nusing namespace std;\nqueue<int> q;\nq.push(1);\nq.push(2);\ncout << q.front() << endl;\nq.pop();\n```\nImplements a queue using STL queue."
  },
  {
    "question": "[143] Solve a bit manipulation problem. Code in Python.",
    "answer": "```python\ndef count_set_bits(n):\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n```\nCounts set bits in an integer."
  },
  {
    "question": "[144] Solve a strings problem. Code in C++.",
    "answer": "```cpp\n#include <iostream>\n#include <algorithm>\nusing namespace std;\nstring reverseString(string s) {\n    reverse(s.begin(), s.end());\n    return s;\n}\n```\nReverses a string."
  },
  {
    "question": "[145] Solve a math problem. Code in Python.",
    "answer": "```python\ndef is_armstrong(n):\n    digits = [int(d) for d in str(n)]\n    power = len(digits)\n    return n == sum([d**power for d in digits])\n```\nChecks if a number is an Armstrong number."
  },
  {
    "question": "[146] Solve a strings problem. Code in Python.",
    "answer": "```python\ndef reverse_string(s):\n    return s[::-1]\n```\nReverses a string."
  },
  {
    "question": "[147] Solve a bit manipulation problem. Code in Python.",
    "answer": "```python\ndef count_set_bits(n):\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n```\nCounts set bits in an integer."
  },
  {
    "question": "[148] Solve a searching problem. Code in Java.",
    "answer": "```java\npublic int binarySearch(int[] arr, int target) {\n    int left=0,right=arr.length-1;\n    while(left<=right){\n        int mid=left+(right-left)/2;\n        if(arr[mid]==target) return mid;\n        else if(arr[mid]<target) left=mid+1;\n        else right=mid-1;\n    }\n    return -1;\n}\n```\nPerforms binary search on a sorted array."
  },
  {
    "question": "[149] Solve a dynamic programming problem. Code in Java.",
    "answer": "// Code for dynamic programming in Java not available."
  },
  {
    "question": "[150] Solve a searching problem. Code in C++.",
    "answer": "```cpp\nint binarySearch(int arr[], int n, int target) {\n    int left=0,right=n-1;\n    while(left<=right){\n        int mid=left+(right-left)/2;\n        if(arr[mid]==target) return mid;\n        else if(arr[mid]<target) left=mid+1;\n        else right=mid-1;\n    }\n    return -1;\n}\n```\nPerforms binary search on a sorted array."
  },
  {
    "question": "[151] Solve a graphs problem. Code in Python.",
    "answer": "// Code for graphs in Python not available."
  },
  {
    "question": "[152] Solve a arrays problem. Code in Java.",
    "answer": "```java\npublic int findMax(int[] arr) {\n    int maxVal = arr[0];\n    for(int i=1;i<arr.length;i++)\n        if(arr[i]>maxVal) maxVal=arr[i];\n    return maxVal;\n}\n```\nFinds the maximum element in an array."
  },
  {
    "question": "[153] Solve a geometry problem. Code in Python.",
    "answer": "```python\ndef area_of_circle(r):\n    import math\n    return math.pi * r * r\n```\nCalculates area of a circle."
  },
  {
    "question": "[154] Solve a math problem. Code in Java.",
    "answer": "```java\npublic boolean isArmstrong(int n) {\n    int temp = n, digitCount = 0, sum = 0;\n    digitCount = (int)(Math.log10(n)) + 1;\n    while (temp != 0) {\n        int digit = temp % 10;\n        sum += Math.pow(digit, digitCount);\n        temp /= 10;\n    }\n    return n == sum;\n}\n```\nChecks if a number is an Armstrong number."
  },
  {
    "question": "[155] Solve a greedy problem. Code in Java.",
    "answer": "```java\nimport java.util.*;\npublic List<int[]> activitySelection(List<int[]> activities) {\n    activities.sort(Comparator.comparingInt(a -> a[1]));\n    List<int[]> res = new ArrayList<>();\n    res.add(activities.get(0));\n    for (int i = 1; i < activities.size(); i++) {\n        if (activities.get(i)[0] >= res.get(res.size()-1)[1])\n            res.add(activities.get(i));\n    }\n    return res;\n}\n```\nSelects maximum number of non-overlapping activities."
  },
  {
    "question": "[156] Solve a number theory problem. Code in Python.",
    "answer": "```python\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True\n```\nChecks if a number is prime."
  },
  {
    "question": "[157] Solve a bit manipulation problem. Code in C++.",
    "answer": "```cpp\nint countSetBits(int n) {\n    int count = 0;\n    while (n) {\n        count += n & 1;\n        n >>= 1;\n    }\n    return count;\n}\n```\nCounts set bits in an integer."
  },
  {
    "question": "[158] Solve a hashing problem. Code in Python.",
    "answer": "```python\nhash_map = {}\nhash_map['a'] = 1\nprint(hash_map['a'])\n```\nImplements a hash map using dict."
  },
  {
    "question": "[159] Solve a greedy problem. Code in Java.",
    "answer": "```java\nimport java.util.*;\npublic List<int[]> activitySelection(List<int[]> activities) {\n    activities.sort(Comparator.comparingInt(a -> a[1]));\n    List<int[]> res = new ArrayList<>();\n    res.add(activities.get(0));\n    for (int i = 1; i < activities.size(); i++) {\n        if (activities.get(i)[0] >= res.get(res.size()-1)[1])\n            res.add(activities.get(i));\n    }\n    return res;\n}\n```\nSelects maximum number of non-overlapping activities."
  },
  {
    "question": "[160] Solve a math problem. Code in Python.",
    "answer": "```python\ndef is_armstrong(n):\n    digits = [int(d) for d in str(n)]\n    power = len(digits)\n    return n == sum([d**power for d in digits])\n```\nChecks if a number is an Armstrong number."
  },
  {
    "question": "[161] Solve a math problem. Code in Python.",
    "answer": "```python\ndef is_armstrong(n):\n    digits = [int(d) for d in str(n)]\n    power = len(digits)\n    return n == sum([d**power for d in digits])\n```\nChecks if a number is an Armstrong number."
  },
  {
    "question": "[162] Solve a sorting problem. Code in Java.",
    "answer": "```java\npublic void bubbleSort(int[] arr) {\n    int n = arr.length;\n    for(int i=0;i<n-1;i++)\n        for(int j=0;j<n-i-1;j++)\n            if(arr[j]>arr[j+1]) {\n                int temp=arr[j];arr[j]=arr[j+1];arr[j+1]=temp;\n            }\n}\n```\nSorts an array using bubble sort."
  },
  {
    "question": "[163] Solve a geometry problem. Code in Java.",
    "answer": "```java\npublic double areaOfCircle(double r) {\n    return Math.PI * r * r;\n}\n```\nCalculates area of a circle."
  },
  {
    "question": "[164] Solve a stacks problem. Code in C++.",
    "answer": "```cpp\n#include <stack>\n#include <iostream>\nusing namespace std;\nstack<int> s;\ns.push(1);\ns.push(2);\ncout << s.top() << endl;\ns.pop();\n```\nImplements a stack using STL stack."
  },
  {
    "question": "[165] Solve a strings problem. Code in Java.",
    "answer": "```java\npublic String reverseString(String s) {\n    return new StringBuilder(s).reverse().toString();\n}\n```\nReverses a string."
  },
  {
    "question": "[166] Solve a graphs problem. Code in C++.",
    "answer": "// Code for graphs in C++ not available."
  },
  {
    "question": "[167] Solve a bit manipulation problem. Code in Python.",
    "answer": "```python\ndef count_set_bits(n):\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n```\nCounts set bits in an integer."
  },
  {
    "question": "[168] Solve a sorting problem. Code in Python.",
    "answer": "```python\ndef bubble_sort(arr):\n    n = len(arr)\n    for i in range(n):\n        for j in range(0, n-i-1):\n            if arr[j] > arr[j+1]:\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n    return arr\n```\nSorts an array using bubble sort."
  },
  {
    "question": "[169] Solve a searching problem. Code in C++.",
    "answer": "```cpp\nint binarySearch(int arr[], int n, int target) {\n    int left=0,right=n-1;\n    while(left<=right){\n        int mid=left+(right-left)/2;\n        if(arr[mid]==target) return mid;\n        else if(arr[mid]<target) left=mid+1;\n        else right=mid-1;\n    }\n    return -1;\n}\n```\nPerforms binary search on a sorted array."
  },
  {
    "question": "[170] Solve a dynamic programming problem. Code in Python.",
    "answer": "// Code for dynamic programming in Python not available."
  },
  {
    "question": "[171] Solve a recursion problem. Code in Java.",
    "answer": "```java\npublic int factorial(int n) {\n    if (n == 0) return 1;\n    return n * factorial(n-1);\n}\n```\nCalculates factorial using recursion."
  },
  {
    "question": "[172] Solve a sorting problem. Code in Python.",
    "answer": "```python\ndef bubble_sort(arr):\n    n = len(arr)\n    for i in range(n):\n        for j in range(0, n-i-1):\n            if arr[j] > arr[j+1]:\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n    return arr\n```\nSorts an array using bubble sort."
  },
  {
    "question": "[173] Solve a arrays problem. Code in Python.",
    "answer": "```python\ndef find_max(arr):\n    return max(arr)\n```\nFinds the maximum element in an array."
  },
  {
    "question": "[174] Solve a geometry problem. Code in Python.",
    "answer": "```python\ndef area_of_circle(r):\n    import math\n    return math.pi * r * r\n```\nCalculates area of a circle."
  },
  {
    "question": "[175] Solve a dynamic programming problem. Code in Java.",
    "answer": "// Code for dynamic programming in Java not available."
  },
  {
    "question": "[176] Solve a recursion problem. Code in C++.",
    "answer": "```cpp\nint factorial(int n) {\n    if (n == 0) return 1;\n    return n * factorial(n-1);\n}\n```\nCalculates factorial using recursion."
  },
  {
    "question": "[177] Solve a bit manipulation problem. Code in C++.",
    "answer": "```cpp\nint countSetBits(int n) {\n    int count = 0;\n    while (n) {\n        count += n & 1;\n        n >>= 1;\n    }\n    return count;\n}\n```\nCounts set bits in an integer."
  },
  {
    "question": "[178] Solve a geometry problem. Code in Java.",
    "answer": "```java\npublic double areaOfCircle(double r) {\n    return Math.PI * r * r;\n}\n```\nCalculates area of a circle."
  },
  {
    "question": "[179] Solve a math problem. Code in C++.",
    "answer": "```cpp\n#include <cmath>\nbool isArmstrong(int n) {\n    int temp = n, digitCount = 0, sum = 0;\n    digitCount = (int)(log10(n)) + 1;\n    while (temp != 0) {\n        int digit = temp % 10;\n        sum += pow(digit, digitCount);\n        temp /= 10;\n    }\n    return n == sum;\n}\n```\nChecks if a number is an Armstrong number."
  },
  {
    "question": "[180] Solve a hashing problem. Code in C++.",
    "answer": "```cpp\n#include <unordered_map>\n#include <iostream>\nusing namespace std;\nunordered_map<string, int> hash_map;\nhash_map[\"a\"] = 1;\ncout << hash_map[\"a\"] << endl;\n```\nImplements a hash map using unordered_map."
  },
  {
    "question": "[181] Solve a sorting problem. Code in Java.",
    "answer": "```java\npublic void bubbleSort(int[] arr) {\n    int n = arr.length;\n    for(int i=0;i<n-1;i++)\n        for(int j=0;j<n-i-1;j++)\n            if(arr[j]>arr[j+1]) {\n                int temp=arr[j];arr[j]=arr[j+1];arr[j+1]=temp;\n            }\n}\n```\nSorts an array using bubble sort."
  },
  {
    "question": "[182] Solve a bit manipulation problem. Code in Python.",
    "answer": "```python\ndef count_set_bits(n):\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n```\nCounts set bits in an integer."
  },
  {
    "question": "[183] Solve a bit manipulation problem. Code in C++.",
    "answer": "```cpp\nint countSetBits(int n) {\n    int count = 0;\n    while (n) {\n        count += n & 1;\n        n >>= 1;\n    }\n    return count;\n}\n```\nCounts set bits in an integer."
  },
  {
    "question": "[184] Solve a stacks problem. Code in Java.",
    "answer": "```java\nimport java.util.*;\nStack<Integer> stack = new Stack<>();\nstack.push(1);\nstack.push(2);\nSystem.out.println(stack.pop());\n```\nImplements a stack using Stack class."
  },
  {
    "question": "[185] Solve a tries problem. Code in Python.",
    "answer": "```python\nclass TrieNode:\n    def __init__(self):\n        self.children = {}\n        self.is_end = False\nclass Trie:\n    def __init__(self):\n        self.root = TrieNode()\n    def insert(self, word):\n        node = self.root\n        for char in word:\n            if char not in node.children:\n                node.children[char] = TrieNode()\n            node = node.children[char]\n        node.is_end = True\n```\nBasic Trie implementation."
  },
  {
    "question": "[186] Solve a sorting problem. Code in Python.",
    "answer": "```python\ndef bubble_sort(arr):\n    n = len(arr)\n    for i in range(n):\n        for j in range(0, n-i-1):\n            if arr[j] > arr[j+1]:\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n    return arr\n```\nSorts an array using bubble sort."
  },
  {
    "question": "[187] Solve a number theory problem. Code in Python.",
    "answer": "```python\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True\n```\nChecks if a number is prime."
  },
  {
    "question": "[188] Solve a math problem. Code in Python.",
    "answer": "```python\ndef is_armstrong(n):\n    digits = [int(d) for d in str(n)]\n    power = len(digits)\n    return n == sum([d**power for d in digits])\n```\nChecks if a number is an Armstrong number."
  },
  {
    "question": "[189] Solve a sorting problem. Code in Python.",
    "answer": "```python\ndef bubble_sort(arr):\n    n = len(arr)\n    for i in range(n):\n        for j in range(0, n-i-1):\n            if arr[j] > arr[j+1]:\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n    return arr\n```\nSorts an array using bubble sort."
  },
  {
    "question": "[190] Solve a backtracking problem. Code in Java.",
    "answer": "```java\npublic void solve(List<Integer> nums, List<Integer> path) {\n    if (nums.isEmpty()) {\n        System.out.println(path);\n        return;\n    }\n    for (int i = 0; i < nums.size(); i++) {\n        List<Integer> nums2 = new ArrayList<>(nums);\n        nums2.remove(i);\n        List<Integer> path2 = new ArrayList<>(path);\n        path2.add(nums.get(i));\n        solve(nums2, path2);\n    }\n}\n```\nGenerates all permutations using backtracking."
  },
  {
    "question": "[191] Solve a strings problem. Code in Python.",
    "answer": "```python\ndef reverse_string(s):\n    return s[::-1]\n```\nReverses a string."
  },
  {
    "question": "[192] Solve a sorting problem. Code in Java.",
    "answer": "```java\npublic void bubbleSort(int[] arr) {\n    int n = arr.length;\n    for(int i=0;i<n-1;i++)\n        for(int j=0;j<n-i-1;j++)\n            if(arr[j]>arr[j+1]) {\n                int temp=arr[j];arr[j]=arr[j+1];arr[j+1]=temp;\n            }\n}\n```\nSorts an array using bubble sort."
  },
  {
    "question": "[193] Solve a math problem. Code in C++.",
    "answer": "```cpp\n#include <cmath>\nbool isArmstrong(int n) {\n    int temp = n, digitCount = 0, sum = 0;\n    digitCount = (int)(log10(n)) + 1;\n    while (temp != 0) {\n        int digit = temp % 10;\n        sum += pow(digit, digitCount);\n        temp /= 10;\n    }\n    return n == sum;\n}\n```\nChecks if a number is an Armstrong number."
  },
  {
    "question": "[194] Solve a searching problem. Code in Java.",
    "answer": "```java\npublic int binarySearch(int[] arr, int target) {\n    int left=0,right=arr.length-1;\n    while(left<=right){\n        int mid=left+(right-left)/2;\n        if(arr[mid]==target) return mid;\n        else if(arr[mid]<target) left=mid+1;\n        else right=mid-1;\n    }\n    return -1;\n}\n```\nPerforms binary search on a sorted array."
  },
  {
    "question": "[195] Solve a bit manipulation problem. Code in Python.",
    "answer": "```python\ndef count_set_bits(n):\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n```\nCounts set bits in an integer."
  },
  {
    "question": "[196] Solve a geometry problem. Code in Python.",
    "answer": "```python\ndef area_of_circle(r):\n    import math\n    return math.pi * r * r\n```\nCalculates area of a circle."
  },
  {
    "question": "[197] Solve a graphs problem. Code in Python.",
    "answer": "// Code for graphs in Python not available."
  },
  {
    "question": "[198] Solve a recursion problem. Code in Python.",
    "answer": "```python\ndef factorial(n):\n    if n == 0:\n        return 1\n    return n * factorial(n-1)\n```\nCalculates factorial using recursion."
  },
  {
    "question": "[199] Solve a graphs problem. Code in Java.",
    "answer": "// Code for graphs in Java not available."
  },
  {
    "question": "[200] Solve a graphs problem. Code in Java.",
    "answer": "// Code for graphs in Java not available."
  },
  {
    "question": "[201] Solve a hashing problem. Code in Python.",
    "answer": "```python\nhash_map = {}\nhash_map['a'] = 1\nprint(hash_map['a'])\n```\nImplements a hash map using dict."
  },
  {
    "question": "[202] Solve a linked lists problem. Code in Python.",
    "answer": "```python\nclass ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n\ndef reverseList(head):\n    prev = None\n    curr = head\n    while curr:\n        next_node = curr.next\n        curr.next = prev\n        prev = curr\n        curr = next_node\n    return prev\n```\nReverses a singly linked list."
  },
  {
    "question": "[203] Solve a graphs problem. Code in C++.",
    "answer": "// Code for graphs in C++ not available."
  },
  {
    "question": "[204] Solve a heaps problem. Code in Python.",
    "answer": "```python\nimport heapq\nh = []\nheapq.heappush(h, 3)\nheapq.heappush(h, 1)\nheapq.heappush(h, 2)\nprint(heapq.heappop(h))\n```\nImplements a min-heap using heapq."
  },
  {
    "question": "[205] Solve a bit manipulation problem. Code in Python.",
    "answer": "```python\ndef count_set_bits(n):\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n```\nCounts set bits in an integer."
  },
  {
    "question": "[206] Solve a linked lists problem. Code in Java.",
    "answer": "```java\nclass ListNode {\n    int val;\n    ListNode next;\n    ListNode(int x) { val = x; }\n}\npublic ListNode reverseList(ListNode head) {\n    ListNode prev = null;\n    while (head != null) {\n        ListNode next = head.next;\n        head.next = prev;\n        prev = head;\n        head = next;\n    }\n    return prev;\n}\n```\nReverses a singly linked list."
  },
  {
    "question": "[207] Solve a dynamic programming problem. Code in C++.",
    "answer": "// Code for dynamic programming in C++ not available."
  },
  {
    "question": "[208] Solve a linked lists problem. Code in Java.",
    "answer": "```java\nclass ListNode {\n    int val;\n    ListNode next;\n    ListNode(int x) { val = x; }\n}\npublic ListNode reverseList(ListNode head) {\n    ListNode prev = null;\n    while (head != null) {\n        ListNode next = head.next;\n        head.next = prev;\n        prev = head;\n        head = next;\n    }\n    return prev;\n}\n```\nReverses a singly linked list."
  },
  {
    "question": "[209] Solve a sorting problem. Code in C++.",
    "answer": "```cpp\nvoid bubbleSort(int arr[], int n) {\n    for(int i=0;i<n-1;i++)\n        for(int j=0;j<n-i-1;j++)\n            if(arr[j]>arr[j+1]) swap(arr[j],arr[j+1]);\n}\n```\nSorts an array using bubble sort."
  },
  {
    "question": "[210] Solve a recursion problem. Code in Java.",
    "answer": "```java\npublic int factorial(int n) {\n    if (n == 0) return 1;\n    return n * factorial(n-1);\n}\n```\nCalculates factorial using recursion."
  },
  {
    "question": "[211] Solve a geometry problem. Code in Java.",
    "answer": "```java\npublic double areaOfCircle(double r) {\n    return Math.PI * r * r;\n}\n```\nCalculates area of a circle."
  },
  {
    "question": "[212] Solve a hashing problem. Code in Python.",
    "answer": "```python\nhash_map = {}\nhash_map['a'] = 1\nprint(hash_map['a'])\n```\nImplements a hash map using dict."
  },
  {
    "question": "[213] Solve a queues problem. Code in C++.",
    "answer": "```cpp\n#include <queue>\n#include <iostream>\nusing namespace std;\nqueue<int> q;\nq.push(1);\nq.push(2);\ncout << q.front() << endl;\nq.pop();\n```\nImplements a queue using STL queue."
  },
  {
    "question": "[214] Solve a sorting problem. Code in C++.",
    "answer": "```cpp\nvoid bubbleSort(int arr[], int n) {\n    for(int i=0;i<n-1;i++)\n        for(int j=0;j<n-i-1;j++)\n            if(arr[j]>arr[j+1]) swap(arr[j],arr[j+1]);\n}\n```\nSorts an array using bubble sort."
  },
  {
    "question": "[215] Solve a arrays problem. Code in Python.",
    "answer": "```python\ndef find_max(arr):\n    return max(arr)\n```\nFinds the maximum element in an array."
  },
  {
    "question": "[216] Solve a backtracking problem. Code in Java.",
    "answer": "```java\npublic void solve(List<Integer> nums, List<Integer> path) {\n    if (nums.isEmpty()) {\n        System.out.println(path);\n        return;\n    }\n    for (int i = 0; i < nums.size(); i++) {\n        List<Integer> nums2 = new ArrayList<>(nums);\n        nums2.remove(i);\n        List<Integer> path2 = new ArrayList<>(path);\n        path2.add(nums.get(i));\n        solve(nums2, path2);\n    }\n}\n```\nGenerates all permutations using backtracking."
  },
  {
    "question": "[217] Solve a dynamic programming problem. Code in C++.",
    "answer": "// Code for dynamic programming in C++ not available."
  },
  {
    "question": "[218] Solve a heaps problem. Code in Java.",
    "answer": "```java\nimport java.util.*;\nPriorityQueue<Integer> h = new PriorityQueue<>();\nh.add(3);\nh.add(1);\nh.add(2);\nSystem.out.println(h.poll());\n```\nImplements a min-heap using PriorityQueue."
  },
  {
    "question": "[219] Solve a binary trees problem. Code in Java.",
    "answer": "```java\nclass TreeNode {\n    int val;\n    TreeNode left, right;\n    TreeNode(int x) { val = x; }\n}\npublic int treeHeight(TreeNode root) {\n    if (root == null) return 0;\n    return 1 + Math.max(treeHeight(root.left), treeHeight(root.right));\n}\n```\nComputes the height of a binary tree."
  },
  {
    "question": "[220] Solve a graphs problem. Code in C++.",
    "answer": "// Code for graphs in C++ not available."
  },
  {
    "question": "[221] Solve a binary trees problem. Code in Python.",
    "answer": "```python\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef treeHeight(root):\n    if not root:\n        return 0\n    return 1 + max(treeHeight(root.left), treeHeight(root.right))\n```\nComputes the height of a binary tree."
  },
  {
    "question": "[222] Solve a greedy problem. Code in C++.",
    "answer": "```cpp\n#include <vector>\n#include <algorithm>\nusing namespace std;\nvector<pair<int,int>> activitySelection(vector<pair<int,int>>& activities) {\n    sort(activities.begin(), activities.end(), [](auto &a, auto &b){ return a.second < b.second; });\n    vector<pair<int,int>> res;\n    res.push_back(activities[0]);\n    for (size_t i = 1; i < activities.size(); ++i) {\n        if (activities[i].first >= res.back().second)\n            res.push_back(activities[i]);\n    }\n    return res;\n}\n```\nSelects maximum number of non-overlapping activities."
  },
  {
    "question": "[223] Solve a backtracking problem. Code in C++.",
    "answer": "```cpp\n#include <vector>\n#include <iostream>\nusing namespace std;\nvoid solve(vector<int>& nums, vector<int>& path) {\n    if (nums.empty()) {\n        for (int x : path) cout << x << \" \";\n        cout << endl;\n        return;\n    }\n    for (size_t i = 0; i < nums.size(); ++i) {\n        vector<int> nums2 = nums;\n        nums2.erase(nums2.begin() + i);\n        vector<int> path2 = path;\n        path2.push_back(nums[i]);\n        solve(nums2, path2);\n    }\n}\n```\nGenerates all permutations using backtracking."
  },
  {
    "question": "[224] Solve a bit manipulation problem. Code in C++.",
    "answer": "```cpp\nint countSetBits(int n) {\n    int count = 0;\n    while (n) {\n        count += n & 1;\n        n >>= 1;\n    }\n    return count;\n}\n```\nCounts set bits in an integer."
  },
  {
    "question": "[225] Solve a stacks problem. Code in Python.",
    "answer": "```python\nstack = []\nstack.append(1)\nstack.append(2)\nprint(stack.pop())\n```\nImplements a stack using list."
  },
  {
    "question": "[226] Solve a queues problem. Code in Java.",
    "answer": "```java\nimport java.util.*;\nQueue<Integer> q = new LinkedList<>();\nq.add(1);\nq.add(2);\nSystem.out.println(q.poll());\n```\nImplements a queue using LinkedList."
  },
  {
    "question": "[227] Solve a strings problem. Code in Java.",
    "answer": "```java\npublic String reverseString(String s) {\n    return new StringBuilder(s).reverse().toString();\n}\n```\nReverses a string."
  },
  {
    "question": "[228] Solve a binary trees problem. Code in C++.",
    "answer": "```cpp\nstruct TreeNode {\n    int val;\n    TreeNode* left;\n    TreeNode* right;\n    TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n};\nint treeHeight(TreeNode* root) {\n    if (!root) return 0;\n    return 1 + max(treeHeight(root->left), treeHeight(root->right));\n}\n```\nComputes the height of a binary tree."
  },
  {
    "question": "[229] Solve a dynamic programming problem. Code in Java.",
    "answer": "// Code for dynamic programming in Java not available."
  },
  {
    "question": "[230] Solve a bit manipulation problem. Code in C++.",
    "answer": "```cpp\nint countSetBits(int n) {\n    int count = 0;\n    while (n) {\n        count += n & 1;\n        n >>= 1;\n    }\n    return count;\n}\n```\nCounts set bits in an integer."
  },
  {
    "question": "[231] Solve a recursion problem. Code in Python.",
    "answer": "```python\ndef factorial(n):\n    if n == 0:\n        return 1\n    return n * factorial(n-1)\n```\nCalculates factorial using recursion."
  },
  {
    "question": "[232] Solve a sorting problem. Code in Java.",
    "answer": "```java\npublic void bubbleSort(int[] arr) {\n    int n = arr.length;\n    for(int i=0;i<n-1;i++)\n        for(int j=0;j<n-i-1;j++)\n            if(arr[j]>arr[j+1]) {\n                int temp=arr[j];arr[j]=arr[j+1];arr[j+1]=temp;\n            }\n}\n```\nSorts an array using bubble sort."
  },
  {
    "question": "[233] Solve a geometry problem. Code in Java.",
    "answer": "```java\npublic double areaOfCircle(double r) {\n    return Math.PI * r * r;\n}\n```\nCalculates area of a circle."
  },
  {
    "question": "[234] Solve a hashing problem. Code in Java.",
    "answer": "```java\nimport java.util.*;\nMap<String, Integer> hashMap = new HashMap<>();\nhashMap.put(\"a\", 1);\nSystem.out.println(hashMap.get(\"a\"));\n```\nImplements a hash map using HashMap."
  },
  {
    "question": "[235] Solve a geometry problem. Code in Java.",
    "answer": "```java\npublic double areaOfCircle(double r) {\n    return Math.PI * r * r;\n}\n```\nCalculates area of a circle."
  },
  {
    "question": "[236] Solve a geometry problem. Code in Python.",
    "answer": "```python\ndef area_of_circle(r):\n    import math\n    return math.pi * r * r\n```\nCalculates area of a circle."
  },
  {
    "question": "[237] Solve a backtracking problem. Code in Python.",
    "answer": "```python\ndef solve(nums, path):\n    if not nums:\n        print(path)\n        return\n    for i in range(len(nums)):\n        solve(nums[:i]+nums[i+1:], path+[nums[i]])\n```\nGenerates all permutations using backtracking."
  },
  {
    "question": "[238] Solve a linked lists problem. Code in C++.",
    "answer": "```cpp\nstruct ListNode {\n    int val;\n    ListNode* next;\n    ListNode(int x) : val(x), next(nullptr) {}\n};\nListNode* reverseList(ListNode* head) {\n    ListNode* prev = nullptr;\n    while (head) {\n        ListNode* next = head->next;\n        head->next = prev;\n        prev = head;\n        head = next;\n    }\n    return prev;\n}\n```\nReverses a singly linked list."
  },
  {
    "question": "[239] Solve a heaps problem. Code in C++.",
    "answer": "```cpp\n#include <queue>\n#include <vector>\n#include <iostream>\nusing namespace std;\npriority_queue<int, vector<int>, greater<int>> h;\nh.push(3);\nh.push(1);\nh.push(2);\ncout << h.top() << endl;\nh.pop();\n```\nImplements a min-heap using STL priority_queue."
  },
  {
    "question": "[240] Solve a tries problem. Code in C++.",
    "answer": "```cpp\n#include <unordered_map>\nclass TrieNode {\npublic:\n    unordered_map<char, TrieNode*> children;\n    bool is_end = false;\n};\nclass Trie {\npublic:\n    TrieNode* root = new TrieNode();\n    void insert(string word) {\n        TrieNode* node = root;\n        for (char c : word) {\n            if (!node->children[c]) node->children[c] = new TrieNode();\n            node = node->children[c];\n        }\n        node->is_end = true;\n    }\n};\n```\nBasic Trie implementation."
  },
  {
    "question": "[241] Solve a searching problem. Code in C++.",
    "answer": "```cpp\nint binarySearch(int arr[], int n, int target) {\n    int left=0,right=n-1;\n    while(left<=right){\n        int mid=left+(right-left)/2;\n        if(arr[mid]==target) return mid;\n        else if(arr[mid]<target) left=mid+1;\n        else right=mid-1;\n    }\n    return -1;\n}\n```\nPerforms binary search on a sorted array."
  },
  {
    "question": "[242] Solve a linked lists problem. Code in C++.",
    "answer": "```cpp\nstruct ListNode {\n    int val;\n    ListNode* next;\n    ListNode(int x) : val(x), next(nullptr) {}\n};\nListNode* reverseList(ListNode* head) {\n    ListNode* prev = nullptr;\n    while (head) {\n        ListNode* next = head->next;\n        head->next = prev;\n        prev = head;\n        head = next;\n    }\n    return prev;\n}\n```\nReverses a singly linked list."
  },
  {
    "question": "[243] Solve a stacks problem. Code in Python.",
    "answer": "```python\nstack = []\nstack.append(1)\nstack.append(2)\nprint(stack.pop())\n```\nImplements a stack using list."
  },
  {
    "question": "[244] Solve a sorting problem. Code in Java.",
    "answer": "```java\npublic void bubbleSort(int[] arr) {\n    int n = arr.length;\n    for(int i=0;i<n-1;i++)\n        for(int j=0;j<n-i-1;j++)\n            if(arr[j]>arr[j+1]) {\n                int temp=arr[j];arr[j]=arr[j+1];arr[j+1]=temp;\n            }\n}\n```\nSorts an array using bubble sort."
  },
  {
    "question": "[245] Solve a geometry problem. Code in Java.",
    "answer": "```java\npublic double areaOfCircle(double r) {\n    return Math.PI * r * r;\n}\n```\nCalculates area of a circle."
  },
  {
    "question": "[246] Solve a sorting problem. Code in Java.",
    "answer": "```java\npublic void bubbleSort(int[] arr) {\n    int n = arr.length;\n    for(int i=0;i<n-1;i++)\n        for(int j=0;j<n-i-1;j++)\n            if(arr[j]>arr[j+1]) {\n                int temp=arr[j];arr[j]=arr[j+1];arr[j+1]=temp;\n            }\n}\n```\nSorts an array using bubble sort."
  },
  {
    "question": "[247] Solve a recursion problem. Code in Java.",
    "answer": "```java\npublic int factorial(int n) {\n    if (n == 0) return 1;\n    return n * factorial(n-1);\n}\n```\nCalculates factorial using recursion."
  },
  {
    "question": "[248] Solve a searching problem. Code in Python.",
    "answer": "```python\ndef binary_search(arr, target):\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1\n```\nPerforms binary search on a sorted array."
  },
  {
    "question": "[249] Solve a binary trees problem. Code in Python.",
    "answer": "```python\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef treeHeight(root):\n    if not root:\n        return 0\n    return 1 + max(treeHeight(root.left), treeHeight(root.right))\n```\nComputes the height of a binary tree."
  },
  {
    "question": "[250] Solve a backtracking problem. Code in C++.",
    "answer": "```cpp\n#include <vector>\n#include <iostream>\nusing namespace std;\nvoid solve(vector<int>& nums, vector<int>& path) {\n    if (nums.empty()) {\n        for (int x : path) cout << x << \" \";\n        cout << endl;\n        return;\n    }\n    for (size_t i = 0; i < nums.size(); ++i) {\n        vector<int> nums2 = nums;\n        nums2.erase(nums2.begin() + i);\n        vector<int> path2 = path;\n        path2.push_back(nums[i]);\n        solve(nums2, path2);\n    }\n}\n```\nGenerates all permutations using backtracking."
  },
  {
    "question": "[251] Solve a binary trees problem. Code in Python.",
    "answer": "```python\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef treeHeight(root):\n    if not root:\n        return 0\n    return 1 + max(treeHeight(root.left), treeHeight(root.right))\n```\nComputes the height of a binary tree."
  },
  {
    "question": "[252] Solve a queues problem. Code in C++.",
    "answer": "```cpp\n#include <queue>\n#include <iostream>\nusing namespace std;\nqueue<int> q;\nq.push(1);\nq.push(2);\ncout << q.front() << endl;\nq.pop();\n```\nImplements a queue using STL queue."
  },
  {
    "question": "[253] Solve a queues problem. Code in Java.",
    "answer": "```java\nimport java.util.*;\nQueue<Integer> q = new LinkedList<>();\nq.add(1);\nq.add(2);\nSystem.out.println(q.poll());\n```\nImplements a queue using LinkedList."
  },
  {
    "question": "[254] Solve a dynamic programming problem. Code in C++.",
    "answer": "// Code for dynamic programming in C++ not available."
  },
  {
    "question": "[255] Solve a geometry problem. Code in Python.",
    "answer": "```python\ndef area_of_circle(r):\n    import math\n    return math.pi * r * r\n```\nCalculates area of a circle."
  },
  {
    "question": "[256] Solve a heaps problem. Code in Python.",
    "answer": "```python\nimport heapq\nh = []\nheapq.heappush(h, 3)\nheapq.heappush(h, 1)\nheapq.heappush(h, 2)\nprint(heapq.heappop(h))\n```\nImplements a min-heap using heapq."
  },
  {
    "question": "[257] Solve a geometry problem. Code in Python.",
    "answer": "```python\ndef area_of_circle(r):\n    import math\n    return math.pi * r * r\n```\nCalculates area of a circle."
  },
  {
    "question": "[258] Solve a queues problem. Code in Python.",
    "answer": "```python\nfrom collections import deque\nq = deque()\nq.append(1)\nq.append(2)\nprint(q.popleft())\n```\nImplements a queue using deque."
  },
  {
    "question": "[259] Solve a tries problem. Code in Java.",
    "answer": "```java\nclass TrieNode {\n    Map<Character, TrieNode> children = new HashMap<>();\n    boolean isEnd = false;\n}\nclass Trie {\n    TrieNode root = new TrieNode();\n    void insert(String word) {\n        TrieNode node = root;\n        for (char c : word.toCharArray()) {\n            node.children.putIfAbsent(c, new TrieNode());\n            node = node.children.get(c);\n        }\n        node.isEnd = true;\n    }\n}\n```\nBasic Trie implementation."
  },
  {
    "question": "[260] Solve a graphs problem. Code in Python.",
    "answer": "// Code for graphs in Python not available."
  },
  {
    "question": "[261] Solve a queues problem. Code in Java.",
    "answer": "```java\nimport java.util.*;\nQueue<Integer> q = new LinkedList<>();\nq.add(1);\nq.add(2);\nSystem.out.println(q.poll());\n```\nImplements a queue using LinkedList."
  },
  {
    "question": "[262] Solve a arrays problem. Code in Java.",
    "answer": "```java\npublic int findMax(int[] arr) {\n    int maxVal = arr[0];\n    for(int i=1;i<arr.length;i++)\n        if(arr[i]>maxVal) maxVal=arr[i];\n    return maxVal;\n}\n```\nFinds the maximum element in an array."
  },
  {
    "question": "[263] Solve a dynamic programming problem. Code in Java.",
    "answer": "// Code for dynamic programming in Java not available."
  },
  {
    "question": "[264] Solve a linked lists problem. Code in Python.",
    "answer": "```python\nclass ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n\ndef reverseList(head):\n    prev = None\n    curr = head\n    while curr:\n        next_node = curr.next\n        curr.next = prev\n        prev = curr\n        curr = next_node\n    return prev\n```\nReverses a singly linked list."
  },
  {
    "question": "[265] Solve a graphs problem. Code in Python.",
    "answer": "// Code for graphs in Python not available."
  },
  {
    "question": "[266] Solve a searching problem. Code in Java.",
    "answer": "```java\npublic int binarySearch(int[] arr, int target) {\n    int left=0,right=arr.length-1;\n    while(left<=right){\n        int mid=left+(right-left)/2;\n        if(arr[mid]==target) return mid;\n        else if(arr[mid]<target) left=mid+1;\n        else right=mid-1;\n    }\n    return -1;\n}\n```\nPerforms binary search on a sorted array."
  },
  {
    "question": "[267] Solve a hashing problem. Code in Java.",
    "answer": "```java\nimport java.util.*;\nMap<String, Integer> hashMap = new HashMap<>();\nhashMap.put(\"a\", 1);\nSystem.out.println(hashMap.get(\"a\"));\n```\nImplements a hash map using HashMap."
  },
  {
    "question": "[268] Solve a queues problem. Code in Java.",
    "answer": "```java\nimport java.util.*;\nQueue<Integer> q = new LinkedList<>();\nq.add(1);\nq.add(2);\nSystem.out.println(q.poll());\n```\nImplements a queue using LinkedList."
  },
  {
    "question": "[269] Solve a heaps problem. Code in C++.",
    "answer": "```cpp\n#include <queue>\n#include <vector>\n#include <iostream>\nusing namespace std;\npriority_queue<int, vector<int>, greater<int>> h;\nh.push(3);\nh.push(1);\nh.push(2);\ncout << h.top() << endl;\nh.pop();\n```\nImplements a min-heap using STL priority_queue."
  },
  {
    "question": "[270] Solve a greedy problem. Code in C++.",
    "answer": "```cpp\n#include <vector>\n#include <algorithm>\nusing namespace std;\nvector<pair<int,int>> activitySelection(vector<pair<int,int>>& activities) {\n    sort(activities.begin(), activities.end(), [](auto &a, auto &b){ return a.second < b.second; });\n    vector<pair<int,int>> res;\n    res.push_back(activities[0]);\n    for (size_t i = 1; i < activities.size(); ++i) {\n        if (activities[i].first >= res.back().second)\n            res.push_back(activities[i]);\n    }\n    return res;\n}\n```\nSelects maximum number of non-overlapping activities."
  },
  {
    "question": "[271] Solve a searching problem. Code in Java.",
    "answer": "```java\npublic int binarySearch(int[] arr, int target) {\n    int left=0,right=arr.length-1;\n    while(left<=right){\n        int mid=left+(right-left)/2;\n        if(arr[mid]==target) return mid;\n        else if(arr[mid]<target) left=mid+1;\n        else right=mid-1;\n    }\n    return -1;\n}\n```\nPerforms binary search on a sorted array."
  },
  {
    "question": "[272] Solve a queues problem. Code in Python.",
    "answer": "```python\nfrom collections import deque\nq = deque()\nq.append(1)\nq.append(2)\nprint(q.popleft())\n```\nImplements a queue using deque."
  },
  {
    "question": "[273] Solve a tries problem. Code in Java.",
    "answer": "```java\nclass TrieNode {\n    Map<Character, TrieNode> children = new HashMap<>();\n    boolean isEnd = false;\n}\nclass Trie {\n    TrieNode root = new TrieNode();\n    void insert(String word) {\n        TrieNode node = root;\n        for (char c : word.toCharArray()) {\n            node.children.putIfAbsent(c, new TrieNode());\n            node = node.children.get(c);\n        }\n        node.isEnd = true;\n    }\n}\n```\nBasic Trie implementation."
  },
  {
    "question": "[274] Solve a recursion problem. Code in Java.",
    "answer": "```java\npublic int factorial(int n) {\n    if (n == 0) return 1;\n    return n * factorial(n-1);\n}\n```\nCalculates factorial using recursion."
  },
  {
    "question": "[275] Solve a number theory problem. Code in Python.",
    "answer": "```python\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True\n```\nChecks if a number is prime."
  },
  {
    "question": "[276] Solve a tries problem. Code in Java.",
    "answer": "```java\nclass TrieNode {\n    Map<Character, TrieNode> children = new HashMap<>();\n    boolean isEnd = false;\n}\nclass Trie {\n    TrieNode root = new TrieNode();\n    void insert(String word) {\n        TrieNode node = root;\n        for (char c : word.toCharArray()) {\n            node.children.putIfAbsent(c, new TrieNode());\n            node = node.children.get(c);\n        }\n        node.isEnd = true;\n    }\n}\n```\nBasic Trie implementation."
  },
  {
    "question": "[277] Solve a heaps problem. Code in Java.",
    "answer": "```java\nimport java.util.*;\nPriorityQueue<Integer> h = new PriorityQueue<>();\nh.add(3);\nh.add(1);\nh.add(2);\nSystem.out.println(h.poll());\n```\nImplements a min-heap using PriorityQueue."
  },
  {
    "question": "[278] Solve a searching problem. Code in Java.",
    "answer": "```java\npublic int binarySearch(int[] arr, int target) {\n    int left=0,right=arr.length-1;\n    while(left<=right){\n        int mid=left+(right-left)/2;\n        if(arr[mid]==target) return mid;\n        else if(arr[mid]<target) left=mid+1;\n        else right=mid-1;\n    }\n    return -1;\n}\n```\nPerforms binary search on a sorted array."
  },
  {
    "question": "[279] Solve a number theory problem. Code in C++.",
    "answer": "```cpp\nbool isPrime(int n) {\n    if (n < 2) return false;\n    for (int i = 2; i * i <= n; ++i)\n        if (n % i == 0) return false;\n    return true;\n}\n```\nChecks if a number is prime."
  },
  {
    "question": "[280] Solve a tries problem. Code in Python.",
    "answer": "```python\nclass TrieNode:\n    def __init__(self):\n        self.children = {}\n        self.is_end = False\nclass Trie:\n    def __init__(self):\n        self.root = TrieNode()\n    def insert(self, word):\n        node = self.root\n        for char in word:\n            if char not in node.children:\n                node.children[char] = TrieNode()\n            node = node.children[char]\n        node.is_end = True\n```\nBasic Trie implementation."
  },
  {
    "question": "[281] Solve a stacks problem. Code in C++.",
    "answer": "```cpp\n#include <stack>\n#include <iostream>\nusing namespace std;\nstack<int> s;\ns.push(1);\ns.push(2);\ncout << s.top() << endl;\ns.pop();\n```\nImplements a stack using STL stack."
  },
  {
    "question": "[282] Solve a geometry problem. Code in C++.",
    "answer": "```cpp\n#include <cmath>\ndouble areaOfCircle(double r) {\n    return M_PI * r * r;\n}\n```\nCalculates area of a circle."
  },
  {
    "question": "[283] Solve a queues problem. Code in C++.",
    "answer": "```cpp\n#include <queue>\n#include <iostream>\nusing namespace std;\nqueue<int> q;\nq.push(1);\nq.push(2);\ncout << q.front() << endl;\nq.pop();\n```\nImplements a queue using STL queue."
  },
  {
    "question": "[284] Solve a stacks problem. Code in Java.",
    "answer": "```java\nimport java.util.*;\nStack<Integer> stack = new Stack<>();\nstack.push(1);\nstack.push(2);\nSystem.out.println(stack.pop());\n```\nImplements a stack using Stack class."
  },
  {
    "question": "[285] Solve a binary trees problem. Code in C++.",
    "answer": "```cpp\nstruct TreeNode {\n    int val;\n    TreeNode* left;\n    TreeNode* right;\n    TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n};\nint treeHeight(TreeNode* root) {\n    if (!root) return 0;\n    return 1 + max(treeHeight(root->left), treeHeight(root->right));\n}\n```\nComputes the height of a binary tree."
  },
  {
    "question": "[286] Solve a bit manipulation problem. Code in Python.",
    "answer": "```python\ndef count_set_bits(n):\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n```\nCounts set bits in an integer."
  },
  {
    "question": "[287] Solve a queues problem. Code in Python.",
    "answer": "```python\nfrom collections import deque\nq = deque()\nq.append(1)\nq.append(2)\nprint(q.popleft())\n```\nImplements a queue using deque."
  },
  {
    "question": "[288] Solve a queues problem. Code in C++.",
    "answer": "```cpp\n#include <queue>\n#include <iostream>\nusing namespace std;\nqueue<int> q;\nq.push(1);\nq.push(2);\ncout << q.front() << endl;\nq.pop();\n```\nImplements a queue using STL queue."
  },
  {
    "question": "[289] Solve a number theory problem. Code in C++.",
    "answer": "```cpp\nbool isPrime(int n) {\n    if (n < 2) return false;\n    for (int i = 2; i * i <= n; ++i)\n        if (n % i == 0) return false;\n    return true;\n}\n```\nChecks if a number is prime."
  },
  {
    "question": "[290] Solve a strings problem. Code in C++.",
    "answer": "```cpp\n#include <iostream>\n#include <algorithm>\nusing namespace std;\nstring reverseString(string s) {\n    reverse(s.begin(), s.end());\n    return s;\n}\n```\nReverses a string."
  },
  {
    "question": "[291] Solve a graphs problem. Code in Python.",
    "answer": "// Code for graphs in Python not available."
  },
  {
    "question": "[292] Solve a searching problem. Code in Java.",
    "answer": "```java\npublic int binarySearch(int[] arr, int target) {\n    int left=0,right=arr.length-1;\n    while(left<=right){\n        int mid=left+(right-left)/2;\n        if(arr[mid]==target) return mid;\n        else if(arr[mid]<target) left=mid+1;\n        else right=mid-1;\n    }\n    return -1;\n}\n```\nPerforms binary search on a sorted array."
  },
  {
    "question": "[293] Solve a heaps problem. Code in C++.",
    "answer": "```cpp\n#include <queue>\n#include <vector>\n#include <iostream>\nusing namespace std;\npriority_queue<int, vector<int>, greater<int>> h;\nh.push(3);\nh.push(1);\nh.push(2);\ncout << h.top() << endl;\nh.pop();\n```\nImplements a min-heap using STL priority_queue."
  },
  {
    "question": "[294] Solve a math problem. Code in C++.",
    "answer": "```cpp\n#include <cmath>\nbool isArmstrong(int n) {\n    int temp = n, digitCount = 0, sum = 0;\n    digitCount = (int)(log10(n)) + 1;\n    while (temp != 0) {\n        int digit = temp % 10;\n        sum += pow(digit, digitCount);\n        temp /= 10;\n    }\n    return n == sum;\n}\n```\nChecks if a number is an Armstrong number."
  },
  {
    "question": "[295] Solve a bit manipulation problem. Code in Python.",
    "answer": "```python\ndef count_set_bits(n):\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n```\nCounts set bits in an integer."
  },
  {
    "question": "[296] Solve a tries problem. Code in Python.",
    "answer": "```python\nclass TrieNode:\n    def __init__(self):\n        self.children = {}\n        self.is_end = False\nclass Trie:\n    def __init__(self):\n        self.root = TrieNode()\n    def insert(self, word):\n        node = self.root\n        for char in word:\n            if char not in node.children:\n                node.children[char] = TrieNode()\n            node = node.children[char]\n        node.is_end = True\n```\nBasic Trie implementation."
  },
  {
    "question": "[297] Solve a arrays problem. Code in Java.",
    "answer": "```java\npublic int findMax(int[] arr) {\n    int maxVal = arr[0];\n    for(int i=1;i<arr.length;i++)\n        if(arr[i]>maxVal) maxVal=arr[i];\n    return maxVal;\n}\n```\nFinds the maximum element in an array."
  },
  {
    "question": "[298] Solve a tries problem. Code in Java.",
    "answer": "```java\nclass TrieNode {\n    Map<Character, TrieNode> children = new HashMap<>();\n    boolean isEnd = false;\n}\nclass Trie {\n    TrieNode root = new TrieNode();\n    void insert(String word) {\n        TrieNode node = root;\n        for (char c : word.toCharArray()) {\n            node.children.putIfAbsent(c, new TrieNode());\n            node = node.children.get(c);\n        }\n        node.isEnd = true;\n    }\n}\n```\nBasic Trie implementation."
  },
  {
    "question": "[299] Solve a queues problem. Code in Python.",
    "answer": "```python\nfrom collections import deque\nq = deque()\nq.append(1)\nq.append(2)\nprint(q.popleft())\n```\nImplements a queue using deque."
  },
  {
    "question": "[300] Solve a queues problem. Code in Java.",
    "answer": "```java\nimport java.util.*;\nQueue<Integer> q = new LinkedList<>();\nq.add(1);\nq.add(2);\nSystem.out.println(q.poll());\n```\nImplements a queue using LinkedList."
  },
  {
    "question": "[301] Solve a greedy problem. Code in C++.",
    "answer": "```cpp\n#include <vector>\n#include <algorithm>\nusing namespace std;\nvector<pair<int,int>> activitySelection(vector<pair<int,int>>& activities) {\n    sort(activities.begin(), activities.end(), [](auto &a, auto &b){ return a.second < b.second; });\n    vector<pair<int,int>> res;\n    res.push_back(activities[0]);\n    for (size_t i = 1; i < activities.size(); ++i) {\n        if (activities[i].first >= res.back().second)\n            res.push_back(activities[i]);\n    }\n    return res;\n}\n```\nSelects maximum number of non-overlapping activities."
  },
  {
    "question": "[302] Solve a queues problem. Code in Python.",
    "answer": "```python\nfrom collections import deque\nq = deque()\nq.append(1)\nq.append(2)\nprint(q.popleft())\n```\nImplements a queue using deque."
  },
  {
    "question": "[303] Solve a greedy problem. Code in Python.",
    "answer": "```python\ndef activity_selection(activities):\n    activities.sort(key=lambda x: x[1])\n    res = [activities[0]]\n    for i in range(1, len(activities)):\n        if activities[i][0] >= res[-1][1]:\n            res.append(activities[i])\n    return res\n```\nSelects maximum number of non-overlapping activities."
  },
  {
    "question": "[304] Solve a arrays problem. Code in Python.",
    "answer": "```python\ndef find_max(arr):\n    return max(arr)\n```\nFinds the maximum element in an array."
  },
  {
    "question": "[305] Solve a queues problem. Code in Python.",
    "answer": "```python\nfrom collections import deque\nq = deque()\nq.append(1)\nq.append(2)\nprint(q.popleft())\n```\nImplements a queue using deque."
  },
  {
    "question": "[306] Solve a tries problem. Code in Python.",
    "answer": "```python\nclass TrieNode:\n    def __init__(self):\n        self.children = {}\n        self.is_end = False\nclass Trie:\n    def __init__(self):\n        self.root = TrieNode()\n    def insert(self, word):\n        node = self.root\n        for char in word:\n            if char not in node.children:\n                node.children[char] = TrieNode()\n            node = node.children[char]\n        node.is_end = True\n```\nBasic Trie implementation."
  },
  {
    "question": "[307] Solve a geometry problem. Code in C++.",
    "answer": "```cpp\n#include <cmath>\ndouble areaOfCircle(double r) {\n    return M_PI * r * r;\n}\n```\nCalculates area of a circle."
  },
  {
    "question": "[308] Solve a hashing problem. Code in Python.",
    "answer": "```python\nhash_map = {}\nhash_map['a'] = 1\nprint(hash_map['a'])\n```\nImplements a hash map using dict."
  },
  {
    "question": "[309] Solve a bit manipulation problem. Code in C++.",
    "answer": "```cpp\nint countSetBits(int n) {\n    int count = 0;\n    while (n) {\n        count += n & 1;\n        n >>= 1;\n    }\n    return count;\n}\n```\nCounts set bits in an integer."
  },
  {
    "question": "[310] Solve a arrays problem. Code in Python.",
    "answer": "```python\ndef find_max(arr):\n    return max(arr)\n```\nFinds the maximum element in an array."
  },
  {
    "question": "[311] Solve a bit manipulation problem. Code in C++.",
    "answer": "```cpp\nint countSetBits(int n) {\n    int count = 0;\n    while (n) {\n        count += n & 1;\n        n >>= 1;\n    }\n    return count;\n}\n```\nCounts set bits in an integer."
  },
  {
    "question": "[312] Solve a sorting problem. Code in Java.",
    "answer": "```java\npublic void bubbleSort(int[] arr) {\n    int n = arr.length;\n    for(int i=0;i<n-1;i++)\n        for(int j=0;j<n-i-1;j++)\n            if(arr[j]>arr[j+1]) {\n                int temp=arr[j];arr[j]=arr[j+1];arr[j+1]=temp;\n            }\n}\n```\nSorts an array using bubble sort."
  },
  {
    "question": "[313] Solve a searching problem. Code in Python.",
    "answer": "```python\ndef binary_search(arr, target):\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1\n```\nPerforms binary search on a sorted array."
  },
  {
    "question": "[314] Solve a math problem. Code in C++.",
    "answer": "```cpp\n#include <cmath>\nbool isArmstrong(int n) {\n    int temp = n, digitCount = 0, sum = 0;\n    digitCount = (int)(log10(n)) + 1;\n    while (temp != 0) {\n        int digit = temp % 10;\n        sum += pow(digit, digitCount);\n        temp /= 10;\n    }\n    return n == sum;\n}\n```\nChecks if a number is an Armstrong number."
  },
  {
    "question": "[315] Solve a graphs problem. Code in Python.",
    "answer": "// Code for graphs in Python not available."
  },
  {
    "question": "[316] Solve a arrays problem. Code in Java.",
    "answer": "```java\npublic int findMax(int[] arr) {\n    int maxVal = arr[0];\n    for(int i=1;i<arr.length;i++)\n        if(arr[i]>maxVal) maxVal=arr[i];\n    return maxVal;\n}\n```\nFinds the maximum element in an array."
  },
  {
    "question": "[317] Solve a graphs problem. Code in Python.",
    "answer": "// Code for graphs in Python not available."
  },
  {
    "question": "[318] Solve a strings problem. Code in C++.",
    "answer": "```cpp\n#include <iostream>\n#include <algorithm>\nusing namespace std;\nstring reverseString(string s) {\n    reverse(s.begin(), s.end());\n    return s;\n}\n```\nReverses a string."
  },
  {
    "question": "[319] Solve a sorting problem. Code in Java.",
    "answer": "```java\npublic void bubbleSort(int[] arr) {\n    int n = arr.length;\n    for(int i=0;i<n-1;i++)\n        for(int j=0;j<n-i-1;j++)\n            if(arr[j]>arr[j+1]) {\n                int temp=arr[j];arr[j]=arr[j+1];arr[j+1]=temp;\n            }\n}\n```\nSorts an array using bubble sort."
  },
  {
    "question": "[320] Solve a math problem. Code in C++.",
    "answer": "```cpp\n#include <cmath>\nbool isArmstrong(int n) {\n    int temp = n, digitCount = 0, sum = 0;\n    digitCount = (int)(log10(n)) + 1;\n    while (temp != 0) {\n        int digit = temp % 10;\n        sum += pow(digit, digitCount);\n        temp /= 10;\n    }\n    return n == sum;\n}\n```\nChecks if a number is an Armstrong number."
  },
  {
    "question": "[321] Solve a queues problem. Code in Python.",
    "answer": "```python\nfrom collections import deque\nq = deque()\nq.append(1)\nq.append(2)\nprint(q.popleft())\n```\nImplements a queue using deque."
  },
  {
    "question": "[322] Solve a dynamic programming problem. Code in C++.",
    "answer": "// Code for dynamic programming in C++ not available."
  },
  {
    "question": "[323] Solve a tries problem. Code in Java.",
    "answer": "```java\nclass TrieNode {\n    Map<Character, TrieNode> children = new HashMap<>();\n    boolean isEnd = false;\n}\nclass Trie {\n    TrieNode root = new TrieNode();\n    void insert(String word) {\n        TrieNode node = root;\n        for (char c : word.toCharArray()) {\n            node.children.putIfAbsent(c, new TrieNode());\n            node = node.children.get(c);\n        }\n        node.isEnd = true;\n    }\n}\n```\nBasic Trie implementation."
  },
  {
    "question": "[324] Solve a queues problem. Code in Python.",
    "answer": "```python\nfrom collections import deque\nq = deque()\nq.append(1)\nq.append(2)\nprint(q.popleft())\n```\nImplements a queue using deque."
  },
  {
    "question": "[325] Solve a backtracking problem. Code in C++.",
    "answer": "```cpp\n#include <vector>\n#include <iostream>\nusing namespace std;\nvoid solve(vector<int>& nums, vector<int>& path) {\n    if (nums.empty()) {\n        for (int x : path) cout << x << \" \";\n        cout << endl;\n        return;\n    }\n    for (size_t i = 0; i < nums.size(); ++i) {\n        vector<int> nums2 = nums;\n        nums2.erase(nums2.begin() + i);\n        vector<int> path2 = path;\n        path2.push_back(nums[i]);\n        solve(nums2, path2);\n    }\n}\n```\nGenerates all permutations using backtracking."
  },
  {
    "question": "[326] Solve a searching problem. Code in Java.",
    "answer": "```java\npublic int binarySearch(int[] arr, int target) {\n    int left=0,right=arr.length-1;\n    while(left<=right){\n        int mid=left+(right-left)/2;\n        if(arr[mid]==target) return mid;\n        else if(arr[mid]<target) left=mid+1;\n        else right=mid-1;\n    }\n    return -1;\n}\n```\nPerforms binary search on a sorted array."
  },
  {
    "question": "[327] Solve a number theory problem. Code in Python.",
    "answer": "```python\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True\n```\nChecks if a number is prime."
  },
  {
    "question": "[328] Solve a linked lists problem. Code in C++.",
    "answer": "```cpp\nstruct ListNode {\n    int val;\n    ListNode* next;\n    ListNode(int x) : val(x), next(nullptr) {}\n};\nListNode* reverseList(ListNode* head) {\n    ListNode* prev = nullptr;\n    while (head) {\n        ListNode* next = head->next;\n        head->next = prev;\n        prev = head;\n        head = next;\n    }\n    return prev;\n}\n```\nReverses a singly linked list."
  },
  {
    "question": "[329] Solve a recursion problem. Code in Python.",
    "answer": "```python\ndef factorial(n):\n    if n == 0:\n        return 1\n    return n * factorial(n-1)\n```\nCalculates factorial using recursion."
  },
  {
    "question": "[330] Solve a queues problem. Code in C++.",
    "answer": "```cpp\n#include <queue>\n#include <iostream>\nusing namespace std;\nqueue<int> q;\nq.push(1);\nq.push(2);\ncout << q.front() << endl;\nq.pop();\n```\nImplements a queue using STL queue."
  },
  {
    "question": "[331] Solve a geometry problem. Code in Java.",
    "answer": "```java\npublic double areaOfCircle(double r) {\n    return Math.PI * r * r;\n}\n```\nCalculates area of a circle."
  },
  {
    "question": "[332] Solve a geometry problem. Code in Java.",
    "answer": "```java\npublic double areaOfCircle(double r) {\n    return Math.PI * r * r;\n}\n```\nCalculates area of a circle."
  },
  {
    "question": "[333] Solve a number theory problem. Code in Python.",
    "answer": "```python\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True\n```\nChecks if a number is prime."
  },
  {
    "question": "[334] Solve a backtracking problem. Code in Java.",
    "answer": "```java\npublic void solve(List<Integer> nums, List<Integer> path) {\n    if (nums.isEmpty()) {\n        System.out.println(path);\n        return;\n    }\n    for (int i = 0; i < nums.size(); i++) {\n        List<Integer> nums2 = new ArrayList<>(nums);\n        nums2.remove(i);\n        List<Integer> path2 = new ArrayList<>(path);\n        path2.add(nums.get(i));\n        solve(nums2, path2);\n    }\n}\n```\nGenerates all permutations using backtracking."
  },
  {
    "question": "[335] Solve a graphs problem. Code in Java.",
    "answer": "// Code for graphs in Java not available."
  },
  {
    "question": "[336] Solve a bit manipulation problem. Code in Python.",
    "answer": "```python\ndef count_set_bits(n):\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n```\nCounts set bits in an integer."
  },
  {
    "question": "[337] Solve a searching problem. Code in Python.",
    "answer": "```python\ndef binary_search(arr, target):\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1\n```\nPerforms binary search on a sorted array."
  },
  {
    "question": "[338] Solve a queues problem. Code in Python.",
    "answer": "```python\nfrom collections import deque\nq = deque()\nq.append(1)\nq.append(2)\nprint(q.popleft())\n```\nImplements a queue using deque."
  },
  {
    "question": "[339] Solve a number theory problem. Code in C++.",
    "answer": "```cpp\nbool isPrime(int n) {\n    if (n < 2) return false;\n    for (int i = 2; i * i <= n; ++i)\n        if (n % i == 0) return false;\n    return true;\n}\n```\nChecks if a number is prime."
  },
  {
    "question": "[340] Solve a greedy problem. Code in Java.",
    "answer": "```java\nimport java.util.*;\npublic List<int[]> activitySelection(List<int[]> activities) {\n    activities.sort(Comparator.comparingInt(a -> a[1]));\n    List<int[]> res = new ArrayList<>();\n    res.add(activities.get(0));\n    for (int i = 1; i < activities.size(); i++) {\n        if (activities.get(i)[0] >= res.get(res.size()-1)[1])\n            res.add(activities.get(i));\n    }\n    return res;\n}\n```\nSelects maximum number of non-overlapping activities."
  },
  {
    "question": "[341] Solve a heaps problem. Code in C++.",
    "answer": "```cpp\n#include <queue>\n#include <vector>\n#include <iostream>\nusing namespace std;\npriority_queue<int, vector<int>, greater<int>> h;\nh.push(3);\nh.push(1);\nh.push(2);\ncout << h.top() << endl;\nh.pop();\n```\nImplements a min-heap using STL priority_queue."
  },
  {
    "question": "[342] Solve a searching problem. Code in Java.",
    "answer": "```java\npublic int binarySearch(int[] arr, int target) {\n    int left=0,right=arr.length-1;\n    while(left<=right){\n        int mid=left+(right-left)/2;\n        if(arr[mid]==target) return mid;\n        else if(arr[mid]<target) left=mid+1;\n        else right=mid-1;\n    }\n    return -1;\n}\n```\nPerforms binary search on a sorted array."
  },
  {
    "question": "[343] Solve a strings problem. Code in Java.",
    "answer": "```java\npublic String reverseString(String s) {\n    return new StringBuilder(s).reverse().toString();\n}\n```\nReverses a string."
  },
  {
    "question": "[344] Solve a heaps problem. Code in Python.",
    "answer": "```python\nimport heapq\nh = []\nheapq.heappush(h, 3)\nheapq.heappush(h, 1)\nheapq.heappush(h, 2)\nprint(heapq.heappop(h))\n```\nImplements a min-heap using heapq."
  },
  {
    "question": "[345] Solve a number theory problem. Code in Java.",
    "answer": "```java\npublic boolean isPrime(int n) {\n    if (n < 2) return false;\n    for (int i = 2; i * i <= n; i++)\n        if (n % i == 0) return false;\n    return true;\n}\n```\nChecks if a number is prime."
  },
  {
    "question": "[346] Solve a hashing problem. Code in Python.",
    "answer": "```python\nhash_map = {}\nhash_map['a'] = 1\nprint(hash_map['a'])\n```\nImplements a hash map using dict."
  },
  {
    "question": "[347] Solve a graphs problem. Code in C++.",
    "answer": "// Code for graphs in C++ not available."
  },
  {
    "question": "[348] Solve a math problem. Code in Python.",
    "answer": "```python\ndef is_armstrong(n):\n    digits = [int(d) for d in str(n)]\n    power = len(digits)\n    return n == sum([d**power for d in digits])\n```\nChecks if a number is an Armstrong number."
  },
  {
    "question": "[349] Solve a stacks problem. Code in C++.",
    "answer": "```cpp\n#include <stack>\n#include <iostream>\nusing namespace std;\nstack<int> s;\ns.push(1);\ns.push(2);\ncout << s.top() << endl;\ns.pop();\n```\nImplements a stack using STL stack."
  },
  {
    "question": "[350] Solve a number theory problem. Code in C++.",
    "answer": "```cpp\nbool isPrime(int n) {\n    if (n < 2) return false;\n    for (int i = 2; i * i <= n; ++i)\n        if (n % i == 0) return false;\n    return true;\n}\n```\nChecks if a number is prime."
  },
  {
    "question": "[351] Solve a backtracking problem. Code in Python.",
    "answer": "```python\ndef solve(nums, path):\n    if not nums:\n        print(path)\n        return\n    for i in range(len(nums)):\n        solve(nums[:i]+nums[i+1:], path+[nums[i]])\n```\nGenerates all permutations using backtracking."
  },
  {
    "question": "[352] Solve a backtracking problem. Code in Java.",
    "answer": "```java\npublic void solve(List<Integer> nums, List<Integer> path) {\n    if (nums.isEmpty()) {\n        System.out.println(path);\n        return;\n    }\n    for (int i = 0; i < nums.size(); i++) {\n        List<Integer> nums2 = new ArrayList<>(nums);\n        nums2.remove(i);\n        List<Integer> path2 = new ArrayList<>(path);\n        path2.add(nums.get(i));\n        solve(nums2, path2);\n    }\n}\n```\nGenerates all permutations using backtracking."
  },
  {
    "question": "[353] Solve a sorting problem. Code in Java.",
    "answer": "```java\npublic void bubbleSort(int[] arr) {\n    int n = arr.length;\n    for(int i=0;i<n-1;i++)\n        for(int j=0;j<n-i-1;j++)\n            if(arr[j]>arr[j+1]) {\n                int temp=arr[j];arr[j]=arr[j+1];arr[j+1]=temp;\n            }\n}\n```\nSorts an array using bubble sort."
  },
  {
    "question": "[354] Solve a binary trees problem. Code in Java.",
    "answer": "```java\nclass TreeNode {\n    int val;\n    TreeNode left, right;\n    TreeNode(int x) { val = x; }\n}\npublic int treeHeight(TreeNode root) {\n    if (root == null) return 0;\n    return 1 + Math.max(treeHeight(root.left), treeHeight(root.right));\n}\n```\nComputes the height of a binary tree."
  },
  {
    "question": "[355] Solve a stacks problem. Code in Java.",
    "answer": "```java\nimport java.util.*;\nStack<Integer> stack = new Stack<>();\nstack.push(1);\nstack.push(2);\nSystem.out.println(stack.pop());\n```\nImplements a stack using Stack class."
  },
  {
    "question": "[356] Solve a math problem. Code in Python.",
    "answer": "```python\ndef is_armstrong(n):\n    digits = [int(d) for d in str(n)]\n    power = len(digits)\n    return n == sum([d**power for d in digits])\n```\nChecks if a number is an Armstrong number."
  },
  {
    "question": "[357] Solve a recursion problem. Code in Python.",
    "answer": "```python\ndef factorial(n):\n    if n == 0:\n        return 1\n    return n * factorial(n-1)\n```\nCalculates factorial using recursion."
  },
  {
    "question": "[358] Solve a searching problem. Code in Python.",
    "answer": "```python\ndef binary_search(arr, target):\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1\n```\nPerforms binary search on a sorted array."
  },
  {
    "question": "[359] Solve a math problem. Code in C++.",
    "answer": "```cpp\n#include <cmath>\nbool isArmstrong(int n) {\n    int temp = n, digitCount = 0, sum = 0;\n    digitCount = (int)(log10(n)) + 1;\n    while (temp != 0) {\n        int digit = temp % 10;\n        sum += pow(digit, digitCount);\n        temp /= 10;\n    }\n    return n == sum;\n}\n```\nChecks if a number is an Armstrong number."
  },
  {
    "question": "[360] Solve a queues problem. Code in C++.",
    "answer": "```cpp\n#include <queue>\n#include <iostream>\nusing namespace std;\nqueue<int> q;\nq.push(1);\nq.push(2);\ncout << q.front() << endl;\nq.pop();\n```\nImplements a queue using STL queue."
  },
  {
    "question": "[361] Solve a stacks problem. Code in Python.",
    "answer": "```python\nstack = []\nstack.append(1)\nstack.append(2)\nprint(stack.pop())\n```\nImplements a stack using list."
  },
  {
    "question": "[362] Solve a geometry problem. Code in C++.",
    "answer": "```cpp\n#include <cmath>\ndouble areaOfCircle(double r) {\n    return M_PI * r * r;\n}\n```\nCalculates area of a circle."
  },
  {
    "question": "[363] Solve a graphs problem. Code in C++.",
    "answer": "// Code for graphs in C++ not available."
  },
  {
    "question": "[364] Solve a bit manipulation problem. Code in C++.",
    "answer": "```cpp\nint countSetBits(int n) {\n    int count = 0;\n    while (n) {\n        count += n & 1;\n        n >>= 1;\n    }\n    return count;\n}\n```\nCounts set bits in an integer."
  },
  {
    "question": "[365] Solve a queues problem. Code in Python.",
    "answer": "```python\nfrom collections import deque\nq = deque()\nq.append(1)\nq.append(2)\nprint(q.popleft())\n```\nImplements a queue using deque."
  },
  {
    "question": "[366] Solve a binary trees problem. Code in Java.",
    "answer": "```java\nclass TreeNode {\n    int val;\n    TreeNode left, right;\n    TreeNode(int x) { val = x; }\n}\npublic int treeHeight(TreeNode root) {\n    if (root == null) return 0;\n    return 1 + Math.max(treeHeight(root.left), treeHeight(root.right));\n}\n```\nComputes the height of a binary tree."
  },
  {
    "question": "[367] Solve a queues problem. Code in Java.",
    "answer": "```java\nimport java.util.*;\nQueue<Integer> q = new LinkedList<>();\nq.add(1);\nq.add(2);\nSystem.out.println(q.poll());\n```\nImplements a queue using LinkedList."
  },
  {
    "question": "[368] Solve a arrays problem. Code in Java.",
    "answer": "```java\npublic int findMax(int[] arr) {\n    int maxVal = arr[0];\n    for(int i=1;i<arr.length;i++)\n        if(arr[i]>maxVal) maxVal=arr[i];\n    return maxVal;\n}\n```\nFinds the maximum element in an array."
  },
  {
    "question": "[369] Solve a graphs problem. Code in C++.",
    "answer": "// Code for graphs in C++ not available."
  },
  {
    "question": "[370] Solve a sorting problem. Code in C++.",
    "answer": "```cpp\nvoid bubbleSort(int arr[], int n) {\n    for(int i=0;i<n-1;i++)\n        for(int j=0;j<n-i-1;j++)\n            if(arr[j]>arr[j+1]) swap(arr[j],arr[j+1]);\n}\n```\nSorts an array using bubble sort."
  },
  {
    "question": "[371] Solve a graphs problem. Code in Java.",
    "answer": "// Code for graphs in Java not available."
  },
  {
    "question": "[372] Solve a graphs problem. Code in Java.",
    "answer": "// Code for graphs in Java not available."
  },
  {
    "question": "[373] Solve a strings problem. Code in Java.",
    "answer": "```java\npublic String reverseString(String s) {\n    return new StringBuilder(s).reverse().toString();\n}\n```\nReverses a string."
  },
  {
    "question": "[374] Solve a searching problem. Code in Java.",
    "answer": "```java\npublic int binarySearch(int[] arr, int target) {\n    int left=0,right=arr.length-1;\n    while(left<=right){\n        int mid=left+(right-left)/2;\n        if(arr[mid]==target) return mid;\n        else if(arr[mid]<target) left=mid+1;\n        else right=mid-1;\n    }\n    return -1;\n}\n```\nPerforms binary search on a sorted array."
  },
  {
    "question": "[375] Solve a recursion problem. Code in Java.",
    "answer": "```java\npublic int factorial(int n) {\n    if (n == 0) return 1;\n    return n * factorial(n-1);\n}\n```\nCalculates factorial using recursion."
  },
  {
    "question": "[376] Solve a recursion problem. Code in C++.",
    "answer": "```cpp\nint factorial(int n) {\n    if (n == 0) return 1;\n    return n * factorial(n-1);\n}\n```\nCalculates factorial using recursion."
  },
  {
    "question": "[377] Solve a graphs problem. Code in C++.",
    "answer": "// Code for graphs in C++ not available."
  },
  {
    "question": "[378] Solve a searching problem. Code in C++.",
    "answer": "```cpp\nint binarySearch(int arr[], int n, int target) {\n    int left=0,right=n-1;\n    while(left<=right){\n        int mid=left+(right-left)/2;\n        if(arr[mid]==target) return mid;\n        else if(arr[mid]<target) left=mid+1;\n        else right=mid-1;\n    }\n    return -1;\n}\n```\nPerforms binary search on a sorted array."
  },
  {
    "question": "[379] Solve a strings problem. Code in C++.",
    "answer": "```cpp\n#include <iostream>\n#include <algorithm>\nusing namespace std;\nstring reverseString(string s) {\n    reverse(s.begin(), s.end());\n    return s;\n}\n```\nReverses a string."
  },
  {
    "question": "[380] Solve a sorting problem. Code in Java.",
    "answer": "```java\npublic void bubbleSort(int[] arr) {\n    int n = arr.length;\n    for(int i=0;i<n-1;i++)\n        for(int j=0;j<n-i-1;j++)\n            if(arr[j]>arr[j+1]) {\n                int temp=arr[j];arr[j]=arr[j+1];arr[j+1]=temp;\n            }\n}\n```\nSorts an array using bubble sort."
  },
  {
    "question": "[381] Solve a sorting problem. Code in Python.",
    "answer": "```python\ndef bubble_sort(arr):\n    n = len(arr)\n    for i in range(n):\n        for j in range(0, n-i-1):\n            if arr[j] > arr[j+1]:\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n    return arr\n```\nSorts an array using bubble sort."
  },
  {
    "question": "[382] Solve a geometry problem. Code in Java.",
    "answer": "```java\npublic double areaOfCircle(double r) {\n    return Math.PI * r * r;\n}\n```\nCalculates area of a circle."
  },
  {
    "question": "[383] Solve a binary trees problem. Code in Java.",
    "answer": "```java\nclass TreeNode {\n    int val;\n    TreeNode left, right;\n    TreeNode(int x) { val = x; }\n}\npublic int treeHeight(TreeNode root) {\n    if (root == null) return 0;\n    return 1 + Math.max(treeHeight(root.left), treeHeight(root.right));\n}\n```\nComputes the height of a binary tree."
  },
  {
    "question": "[384] Solve a backtracking problem. Code in Java.",
    "answer": "```java\npublic void solve(List<Integer> nums, List<Integer> path) {\n    if (nums.isEmpty()) {\n        System.out.println(path);\n        return;\n    }\n    for (int i = 0; i < nums.size(); i++) {\n        List<Integer> nums2 = new ArrayList<>(nums);\n        nums2.remove(i);\n        List<Integer> path2 = new ArrayList<>(path);\n        path2.add(nums.get(i));\n        solve(nums2, path2);\n    }\n}\n```\nGenerates all permutations using backtracking."
  },
  {
    "question": "[385] Solve a heaps problem. Code in Java.",
    "answer": "```java\nimport java.util.*;\nPriorityQueue<Integer> h = new PriorityQueue<>();\nh.add(3);\nh.add(1);\nh.add(2);\nSystem.out.println(h.poll());\n```\nImplements a min-heap using PriorityQueue."
  },
  {
    "question": "[386] Solve a stacks problem. Code in C++.",
    "answer": "```cpp\n#include <stack>\n#include <iostream>\nusing namespace std;\nstack<int> s;\ns.push(1);\ns.push(2);\ncout << s.top() << endl;\ns.pop();\n```\nImplements a stack using STL stack."
  },
  {
    "question": "[387] Solve a linked lists problem. Code in Java.",
    "answer": "```java\nclass ListNode {\n    int val;\n    ListNode next;\n    ListNode(int x) { val = x; }\n}\npublic ListNode reverseList(ListNode head) {\n    ListNode prev = null;\n    while (head != null) {\n        ListNode next = head.next;\n        head.next = prev;\n        prev = head;\n        head = next;\n    }\n    return prev;\n}\n```\nReverses a singly linked list."
  },
  {
    "question": "[388] Solve a geometry problem. Code in Java.",
    "answer": "```java\npublic double areaOfCircle(double r) {\n    return Math.PI * r * r;\n}\n```\nCalculates area of a circle."
  },
  {
    "question": "[389] Solve a hashing problem. Code in Java.",
    "answer": "```java\nimport java.util.*;\nMap<String, Integer> hashMap = new HashMap<>();\nhashMap.put(\"a\", 1);\nSystem.out.println(hashMap.get(\"a\"));\n```\nImplements a hash map using HashMap."
  },
  {
    "question": "[390] Solve a searching problem. Code in Java.",
    "answer": "```java\npublic int binarySearch(int[] arr, int target) {\n    int left=0,right=arr.length-1;\n    while(left<=right){\n        int mid=left+(right-left)/2;\n        if(arr[mid]==target) return mid;\n        else if(arr[mid]<target) left=mid+1;\n        else right=mid-1;\n    }\n    return -1;\n}\n```\nPerforms binary search on a sorted array."
  },
  {
    "question": "[391] Solve a math problem. Code in Python.",
    "answer": "```python\ndef is_armstrong(n):\n    digits = [int(d) for d in str(n)]\n    power = len(digits)\n    return n == sum([d**power for d in digits])\n```\nChecks if a number is an Armstrong number."
  },
  {
    "question": "[392] Solve a graphs problem. Code in Java.",
    "answer": "// Code for graphs in Java not available."
  },
  {
    "question": "[393] Solve a recursion problem. Code in Python.",
    "answer": "```python\ndef factorial(n):\n    if n == 0:\n        return 1\n    return n * factorial(n-1)\n```\nCalculates factorial using recursion."
  },
  {
    "question": "[394] Solve a linked lists problem. Code in C++.",
    "answer": "```cpp\nstruct ListNode {\n    int val;\n    ListNode* next;\n    ListNode(int x) : val(x), next(nullptr) {}\n};\nListNode* reverseList(ListNode* head) {\n    ListNode* prev = nullptr;\n    while (head) {\n        ListNode* next = head->next;\n        head->next = prev;\n        prev = head;\n        head = next;\n    }\n    return prev;\n}\n```\nReverses a singly linked list."
  },
  {
    "question": "[395] Solve a number theory problem. Code in C++.",
    "answer": "```cpp\nbool isPrime(int n) {\n    if (n < 2) return false;\n    for (int i = 2; i * i <= n; ++i)\n        if (n % i == 0) return false;\n    return true;\n}\n```\nChecks if a number is prime."
  },
  {
    "question": "[396] Solve a sorting problem. Code in C++.",
    "answer": "```cpp\nvoid bubbleSort(int arr[], int n) {\n    for(int i=0;i<n-1;i++)\n        for(int j=0;j<n-i-1;j++)\n            if(arr[j]>arr[j+1]) swap(arr[j],arr[j+1]);\n}\n```\nSorts an array using bubble sort."
  },
  {
    "question": "[397] Solve a hashing problem. Code in Python.",
    "answer": "```python\nhash_map = {}\nhash_map['a'] = 1\nprint(hash_map['a'])\n```\nImplements a hash map using dict."
  },
  {
    "question": "[398] Solve a heaps problem. Code in Java.",
    "answer": "```java\nimport java.util.*;\nPriorityQueue<Integer> h = new PriorityQueue<>();\nh.add(3);\nh.add(1);\nh.add(2);\nSystem.out.println(h.poll());\n```\nImplements a min-heap using PriorityQueue."
  },
  {
    "question": "[399] Solve a backtracking problem. Code in Python.",
    "answer": "```python\ndef solve(nums, path):\n    if not nums:\n        print(path)\n        return\n    for i in range(len(nums)):\n        solve(nums[:i]+nums[i+1:], path+[nums[i]])\n```\nGenerates all permutations using backtracking."
  },
  {
    "question": "[400] Solve a number theory problem. Code in Java.",
    "answer": "```java\npublic boolean isPrime(int n) {\n    if (n < 2) return false;\n    for (int i = 2; i * i <= n; i++)\n        if (n % i == 0) return false;\n    return true;\n}\n```\nChecks if a number is prime."
  },
  {
    "question": "[401] Solve a hashing problem. Code in C++.",
    "answer": "```cpp\n#include <unordered_map>\n#include <iostream>\nusing namespace std;\nunordered_map<string, int> hash_map;\nhash_map[\"a\"] = 1;\ncout << hash_map[\"a\"] << endl;\n```\nImplements a hash map using unordered_map."
  },
  {
    "question": "[402] Solve a tries problem. Code in Python.",
    "answer": "```python\nclass TrieNode:\n    def __init__(self):\n        self.children = {}\n        self.is_end = False\nclass Trie:\n    def __init__(self):\n        self.root = TrieNode()\n    def insert(self, word):\n        node = self.root\n        for char in word:\n            if char not in node.children:\n                node.children[char] = TrieNode()\n            node = node.children[char]\n        node.is_end = True\n```\nBasic Trie implementation."
  },
  {
    "question": "[403] Solve a arrays problem. Code in C++.",
    "answer": "```cpp\n#include <iostream>\nusing namespace std;\nint findMax(int arr[], int n) {\n    int maxVal = arr[0];\n    for(int i=1;i<n;i++)\n        if(arr[i]>maxVal) maxVal=arr[i];\n    return maxVal;\n}\n```\nFinds the maximum element in an array."
  },
  {
    "question": "[404] Solve a greedy problem. Code in C++.",
    "answer": "```cpp\n#include <vector>\n#include <algorithm>\nusing namespace std;\nvector<pair<int,int>> activitySelection(vector<pair<int,int>>& activities) {\n    sort(activities.begin(), activities.end(), [](auto &a, auto &b){ return a.second < b.second; });\n    vector<pair<int,int>> res;\n    res.push_back(activities[0]);\n    for (size_t i = 1; i < activities.size(); ++i) {\n        if (activities[i].first >= res.back().second)\n            res.push_back(activities[i]);\n    }\n    return res;\n}\n```\nSelects maximum number of non-overlapping activities."
  },
  {
    "question": "[405] Solve a sorting problem. Code in C++.",
    "answer": "```cpp\nvoid bubbleSort(int arr[], int n) {\n    for(int i=0;i<n-1;i++)\n        for(int j=0;j<n-i-1;j++)\n            if(arr[j]>arr[j+1]) swap(arr[j],arr[j+1]);\n}\n```\nSorts an array using bubble sort."
  },
  {
    "question": "[406] Solve a arrays problem. Code in C++.",
    "answer": "```cpp\n#include <iostream>\nusing namespace std;\nint findMax(int arr[], int n) {\n    int maxVal = arr[0];\n    for(int i=1;i<n;i++)\n        if(arr[i]>maxVal) maxVal=arr[i];\n    return maxVal;\n}\n```\nFinds the maximum element in an array."
  },
  {
    "question": "[407] Solve a heaps problem. Code in Python.",
    "answer": "```python\nimport heapq\nh = []\nheapq.heappush(h, 3)\nheapq.heappush(h, 1)\nheapq.heappush(h, 2)\nprint(heapq.heappop(h))\n```\nImplements a min-heap using heapq."
  },
  {
    "question": "[408] Solve a binary trees problem. Code in C++.",
    "answer": "```cpp\nstruct TreeNode {\n    int val;\n    TreeNode* left;\n    TreeNode* right;\n    TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n};\nint treeHeight(TreeNode* root) {\n    if (!root) return 0;\n    return 1 + max(treeHeight(root->left), treeHeight(root->right));\n}\n```\nComputes the height of a binary tree."
  },
  {
    "question": "[409] Solve a geometry problem. Code in Java.",
    "answer": "```java\npublic double areaOfCircle(double r) {\n    return Math.PI * r * r;\n}\n```\nCalculates area of a circle."
  },
  {
    "question": "[410] Solve a arrays problem. Code in C++.",
    "answer": "```cpp\n#include <iostream>\nusing namespace std;\nint findMax(int arr[], int n) {\n    int maxVal = arr[0];\n    for(int i=1;i<n;i++)\n        if(arr[i]>maxVal) maxVal=arr[i];\n    return maxVal;\n}\n```\nFinds the maximum element in an array."
  },
  {
    "question": "[411] Solve a graphs problem. Code in Python.",
    "answer": "// Code for graphs in Python not available."
  },
  {
    "question": "[412] Solve a binary trees problem. Code in Java.",
    "answer": "```java\nclass TreeNode {\n    int val;\n    TreeNode left, right;\n    TreeNode(int x) { val = x; }\n}\npublic int treeHeight(TreeNode root) {\n    if (root == null) return 0;\n    return 1 + Math.max(treeHeight(root.left), treeHeight(root.right));\n}\n```\nComputes the height of a binary tree."
  },
  {
    "question": "[413] Solve a stacks problem. Code in Python.",
    "answer": "```python\nstack = []\nstack.append(1)\nstack.append(2)\nprint(stack.pop())\n```\nImplements a stack using list."
  },
  {
    "question": "[414] Solve a searching problem. Code in Java.",
    "answer": "```java\npublic int binarySearch(int[] arr, int target) {\n    int left=0,right=arr.length-1;\n    while(left<=right){\n        int mid=left+(right-left)/2;\n        if(arr[mid]==target) return mid;\n        else if(arr[mid]<target) left=mid+1;\n        else right=mid-1;\n    }\n    return -1;\n}\n```\nPerforms binary search on a sorted array."
  },
  {
    "question": "[415] Solve a bit manipulation problem. Code in Python.",
    "answer": "```python\ndef count_set_bits(n):\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n```\nCounts set bits in an integer."
  },
  {
    "question": "[416] Solve a heaps problem. Code in Java.",
    "answer": "```java\nimport java.util.*;\nPriorityQueue<Integer> h = new PriorityQueue<>();\nh.add(3);\nh.add(1);\nh.add(2);\nSystem.out.println(h.poll());\n```\nImplements a min-heap using PriorityQueue."
  },
  {
    "question": "[417] Solve a hashing problem. Code in Python.",
    "answer": "```python\nhash_map = {}\nhash_map['a'] = 1\nprint(hash_map['a'])\n```\nImplements a hash map using dict."
  },
  {
    "question": "[418] Solve a searching problem. Code in Java.",
    "answer": "```java\npublic int binarySearch(int[] arr, int target) {\n    int left=0,right=arr.length-1;\n    while(left<=right){\n        int mid=left+(right-left)/2;\n        if(arr[mid]==target) return mid;\n        else if(arr[mid]<target) left=mid+1;\n        else right=mid-1;\n    }\n    return -1;\n}\n```\nPerforms binary search on a sorted array."
  },
  {
    "question": "[419] Solve a backtracking problem. Code in Java.",
    "answer": "```java\npublic void solve(List<Integer> nums, List<Integer> path) {\n    if (nums.isEmpty()) {\n        System.out.println(path);\n        return;\n    }\n    for (int i = 0; i < nums.size(); i++) {\n        List<Integer> nums2 = new ArrayList<>(nums);\n        nums2.remove(i);\n        List<Integer> path2 = new ArrayList<>(path);\n        path2.add(nums.get(i));\n        solve(nums2, path2);\n    }\n}\n```\nGenerates all permutations using backtracking."
  },
  {
    "question": "[420] Solve a sorting problem. Code in C++.",
    "answer": "```cpp\nvoid bubbleSort(int arr[], int n) {\n    for(int i=0;i<n-1;i++)\n        for(int j=0;j<n-i-1;j++)\n            if(arr[j]>arr[j+1]) swap(arr[j],arr[j+1]);\n}\n```\nSorts an array using bubble sort."
  },
  {
    "question": "[421] Solve a greedy problem. Code in Python.",
    "answer": "```python\ndef activity_selection(activities):\n    activities.sort(key=lambda x: x[1])\n    res = [activities[0]]\n    for i in range(1, len(activities)):\n        if activities[i][0] >= res[-1][1]:\n            res.append(activities[i])\n    return res\n```\nSelects maximum number of non-overlapping activities."
  },
  {
    "question": "[422] Solve a sorting problem. Code in C++.",
    "answer": "```cpp\nvoid bubbleSort(int arr[], int n) {\n    for(int i=0;i<n-1;i++)\n        for(int j=0;j<n-i-1;j++)\n            if(arr[j]>arr[j+1]) swap(arr[j],arr[j+1]);\n}\n```\nSorts an array using bubble sort."
  },
  {
    "question": "[423] Solve a tries problem. Code in C++.",
    "answer": "```cpp\n#include <unordered_map>\nclass TrieNode {\npublic:\n    unordered_map<char, TrieNode*> children;\n    bool is_end = false;\n};\nclass Trie {\npublic:\n    TrieNode* root = new TrieNode();\n    void insert(string word) {\n        TrieNode* node = root;\n        for (char c : word) {\n            if (!node->children[c]) node->children[c] = new TrieNode();\n            node = node->children[c];\n        }\n        node->is_end = true;\n    }\n};\n```\nBasic Trie implementation."
  },
  {
    "question": "[424] Solve a sorting problem. Code in Python.",
    "answer": "```python\ndef bubble_sort(arr):\n    n = len(arr)\n    for i in range(n):\n        for j in range(0, n-i-1):\n            if arr[j] > arr[j+1]:\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n    return arr\n```\nSorts an array using bubble sort."
  },
  {
    "question": "[425] Solve a geometry problem. Code in Python.",
    "answer": "```python\ndef area_of_circle(r):\n    import math\n    return math.pi * r * r\n```\nCalculates area of a circle."
  },
  {
    "question": "[426] Solve a strings problem. Code in C++.",
    "answer": "```cpp\n#include <iostream>\n#include <algorithm>\nusing namespace std;\nstring reverseString(string s) {\n    reverse(s.begin(), s.end());\n    return s;\n}\n```\nReverses a string."
  },
  {
    "question": "[427] Solve a dynamic programming problem. Code in Java.",
    "answer": "// Code for dynamic programming in Java not available."
  },
  {
    "question": "[428] Solve a dynamic programming problem. Code in Python.",
    "answer": "// Code for dynamic programming in Python not available."
  },
  {
    "question": "[429] Solve a heaps problem. Code in Java.",
    "answer": "```java\nimport java.util.*;\nPriorityQueue<Integer> h = new PriorityQueue<>();\nh.add(3);\nh.add(1);\nh.add(2);\nSystem.out.println(h.poll());\n```\nImplements a min-heap using PriorityQueue."
  },
  {
    "question": "[430] Solve a heaps problem. Code in C++.",
    "answer": "```cpp\n#include <queue>\n#include <vector>\n#include <iostream>\nusing namespace std;\npriority_queue<int, vector<int>, greater<int>> h;\nh.push(3);\nh.push(1);\nh.push(2);\ncout << h.top() << endl;\nh.pop();\n```\nImplements a min-heap using STL priority_queue."
  },
  {
    "question": "[431] Solve a number theory problem. Code in C++.",
    "answer": "```cpp\nbool isPrime(int n) {\n    if (n < 2) return false;\n    for (int i = 2; i * i <= n; ++i)\n        if (n % i == 0) return false;\n    return true;\n}\n```\nChecks if a number is prime."
  },
  {
    "question": "[432] Solve a recursion problem. Code in Python.",
    "answer": "```python\ndef factorial(n):\n    if n == 0:\n        return 1\n    return n * factorial(n-1)\n```\nCalculates factorial using recursion."
  },
  {
    "question": "[433] Solve a searching problem. Code in C++.",
    "answer": "```cpp\nint binarySearch(int arr[], int n, int target) {\n    int left=0,right=n-1;\n    while(left<=right){\n        int mid=left+(right-left)/2;\n        if(arr[mid]==target) return mid;\n        else if(arr[mid]<target) left=mid+1;\n        else right=mid-1;\n    }\n    return -1;\n}\n```\nPerforms binary search on a sorted array."
  },
  {
    "question": "[434] Solve a strings problem. Code in Java.",
    "answer": "```java\npublic String reverseString(String s) {\n    return new StringBuilder(s).reverse().toString();\n}\n```\nReverses a string."
  },
  {
    "question": "[435] Solve a hashing problem. Code in Java.",
    "answer": "```java\nimport java.util.*;\nMap<String, Integer> hashMap = new HashMap<>();\nhashMap.put(\"a\", 1);\nSystem.out.println(hashMap.get(\"a\"));\n```\nImplements a hash map using HashMap."
  },
  {
    "question": "[436] Solve a binary trees problem. Code in Python.",
    "answer": "```python\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef treeHeight(root):\n    if not root:\n        return 0\n    return 1 + max(treeHeight(root.left), treeHeight(root.right))\n```\nComputes the height of a binary tree."
  },
  {
    "question": "[437] Solve a greedy problem. Code in C++.",
    "answer": "```cpp\n#include <vector>\n#include <algorithm>\nusing namespace std;\nvector<pair<int,int>> activitySelection(vector<pair<int,int>>& activities) {\n    sort(activities.begin(), activities.end(), [](auto &a, auto &b){ return a.second < b.second; });\n    vector<pair<int,int>> res;\n    res.push_back(activities[0]);\n    for (size_t i = 1; i < activities.size(); ++i) {\n        if (activities[i].first >= res.back().second)\n            res.push_back(activities[i]);\n    }\n    return res;\n}\n```\nSelects maximum number of non-overlapping activities."
  },
  {
    "question": "[438] Solve a recursion problem. Code in Python.",
    "answer": "```python\ndef factorial(n):\n    if n == 0:\n        return 1\n    return n * factorial(n-1)\n```\nCalculates factorial using recursion."
  },
  {
    "question": "[439] Solve a searching problem. Code in C++.",
    "answer": "```cpp\nint binarySearch(int arr[], int n, int target) {\n    int left=0,right=n-1;\n    while(left<=right){\n        int mid=left+(right-left)/2;\n        if(arr[mid]==target) return mid;\n        else if(arr[mid]<target) left=mid+1;\n        else right=mid-1;\n    }\n    return -1;\n}\n```\nPerforms binary search on a sorted array."
  },
  {
    "question": "[440] Solve a queues problem. Code in Java.",
    "answer": "```java\nimport java.util.*;\nQueue<Integer> q = new LinkedList<>();\nq.add(1);\nq.add(2);\nSystem.out.println(q.poll());\n```\nImplements a queue using LinkedList."
  },
  {
    "question": "[441] Solve a math problem. Code in Python.",
    "answer": "```python\ndef is_armstrong(n):\n    digits = [int(d) for d in str(n)]\n    power = len(digits)\n    return n == sum([d**power for d in digits])\n```\nChecks if a number is an Armstrong number."
  },
  {
    "question": "[442] Solve a recursion problem. Code in C++.",
    "answer": "```cpp\nint factorial(int n) {\n    if (n == 0) return 1;\n    return n * factorial(n-1);\n}\n```\nCalculates factorial using recursion."
  },
  {
    "question": "[443] Solve a hashing problem. Code in C++.",
    "answer": "```cpp\n#include <unordered_map>\n#include <iostream>\nusing namespace std;\nunordered_map<string, int> hash_map;\nhash_map[\"a\"] = 1;\ncout << hash_map[\"a\"] << endl;\n```\nImplements a hash map using unordered_map."
  },
  {
    "question": "[444] Solve a backtracking problem. Code in Python.",
    "answer": "```python\ndef solve(nums, path):\n    if not nums:\n        print(path)\n        return\n    for i in range(len(nums)):\n        solve(nums[:i]+nums[i+1:], path+[nums[i]])\n```\nGenerates all permutations using backtracking."
  },
  {
    "question": "[445] Solve a sorting problem. Code in C++.",
    "answer": "```cpp\nvoid bubbleSort(int arr[], int n) {\n    for(int i=0;i<n-1;i++)\n        for(int j=0;j<n-i-1;j++)\n            if(arr[j]>arr[j+1]) swap(arr[j],arr[j+1]);\n}\n```\nSorts an array using bubble sort."
  },
  {
    "question": "[446] Solve a graphs problem. Code in Python.",
    "answer": "// Code for graphs in Python not available."
  },
  {
    "question": "[447] Solve a greedy problem. Code in Java.",
    "answer": "```java\nimport java.util.*;\npublic List<int[]> activitySelection(List<int[]> activities) {\n    activities.sort(Comparator.comparingInt(a -> a[1]));\n    List<int[]> res = new ArrayList<>();\n    res.add(activities.get(0));\n    for (int i = 1; i < activities.size(); i++) {\n        if (activities.get(i)[0] >= res.get(res.size()-1)[1])\n            res.add(activities.get(i));\n    }\n    return res;\n}\n```\nSelects maximum number of non-overlapping activities."
  },
  {
    "question": "[448] Solve a binary trees problem. Code in Python.",
    "answer": "```python\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef treeHeight(root):\n    if not root:\n        return 0\n    return 1 + max(treeHeight(root.left), treeHeight(root.right))\n```\nComputes the height of a binary tree."
  },
  {
    "question": "[449] Solve a number theory problem. Code in Java.",
    "answer": "```java\npublic boolean isPrime(int n) {\n    if (n < 2) return false;\n    for (int i = 2; i * i <= n; i++)\n        if (n % i == 0) return false;\n    return true;\n}\n```\nChecks if a number is prime."
  },
  {
    "question": "[450] Solve a linked lists problem. Code in Java.",
    "answer": "```java\nclass ListNode {\n    int val;\n    ListNode next;\n    ListNode(int x) { val = x; }\n}\npublic ListNode reverseList(ListNode head) {\n    ListNode prev = null;\n    while (head != null) {\n        ListNode next = head.next;\n        head.next = prev;\n        prev = head;\n        head = next;\n    }\n    return prev;\n}\n```\nReverses a singly linked list."
  },
  {
    "question": "[451] Solve a heaps problem. Code in Java.",
    "answer": "```java\nimport java.util.*;\nPriorityQueue<Integer> h = new PriorityQueue<>();\nh.add(3);\nh.add(1);\nh.add(2);\nSystem.out.println(h.poll());\n```\nImplements a min-heap using PriorityQueue."
  },
  {
    "question": "[452] Solve a strings problem. Code in C++.",
    "answer": "```cpp\n#include <iostream>\n#include <algorithm>\nusing namespace std;\nstring reverseString(string s) {\n    reverse(s.begin(), s.end());\n    return s;\n}\n```\nReverses a string."
  },
  {
    "question": "[453] Solve a math problem. Code in Python.",
    "answer": "```python\ndef is_armstrong(n):\n    digits = [int(d) for d in str(n)]\n    power = len(digits)\n    return n == sum([d**power for d in digits])\n```\nChecks if a number is an Armstrong number."
  },
  {
    "question": "[454] Solve a strings problem. Code in C++.",
    "answer": "```cpp\n#include <iostream>\n#include <algorithm>\nusing namespace std;\nstring reverseString(string s) {\n    reverse(s.begin(), s.end());\n    return s;\n}\n```\nReverses a string."
  },
  {
    "question": "[455] Solve a backtracking problem. Code in C++.",
    "answer": "```cpp\n#include <vector>\n#include <iostream>\nusing namespace std;\nvoid solve(vector<int>& nums, vector<int>& path) {\n    if (nums.empty()) {\n        for (int x : path) cout << x << \" \";\n        cout << endl;\n        return;\n    }\n    for (size_t i = 0; i < nums.size(); ++i) {\n        vector<int> nums2 = nums;\n        nums2.erase(nums2.begin() + i);\n        vector<int> path2 = path;\n        path2.push_back(nums[i]);\n        solve(nums2, path2);\n    }\n}\n```\nGenerates all permutations using backtracking."
  },
  {
    "question": "[456] Solve a backtracking problem. Code in Java.",
    "answer": "```java\npublic void solve(List<Integer> nums, List<Integer> path) {\n    if (nums.isEmpty()) {\n        System.out.println(path);\n        return;\n    }\n    for (int i = 0; i < nums.size(); i++) {\n        List<Integer> nums2 = new ArrayList<>(nums);\n        nums2.remove(i);\n        List<Integer> path2 = new ArrayList<>(path);\n        path2.add(nums.get(i));\n        solve(nums2, path2);\n    }\n}\n```\nGenerates all permutations using backtracking."
  },
  {
    "question": "[457] Solve a binary trees problem. Code in Python.",
    "answer": "```python\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef treeHeight(root):\n    if not root:\n        return 0\n    return 1 + max(treeHeight(root.left), treeHeight(root.right))\n```\nComputes the height of a binary tree."
  },
  {
    "question": "[458] Solve a strings problem. Code in Python.",
    "answer": "```python\ndef reverse_string(s):\n    return s[::-1]\n```\nReverses a string."
  },
  {
    "question": "[459] Solve a geometry problem. Code in C++.",
    "answer": "```cpp\n#include <cmath>\ndouble areaOfCircle(double r) {\n    return M_PI * r * r;\n}\n```\nCalculates area of a circle."
  },
  {
    "question": "[460] Solve a backtracking problem. Code in Java.",
    "answer": "```java\npublic void solve(List<Integer> nums, List<Integer> path) {\n    if (nums.isEmpty()) {\n        System.out.println(path);\n        return;\n    }\n    for (int i = 0; i < nums.size(); i++) {\n        List<Integer> nums2 = new ArrayList<>(nums);\n        nums2.remove(i);\n        List<Integer> path2 = new ArrayList<>(path);\n        path2.add(nums.get(i));\n        solve(nums2, path2);\n    }\n}\n```\nGenerates all permutations using backtracking."
  },
  {
    "question": "[461] Solve a backtracking problem. Code in Python.",
    "answer": "```python\ndef solve(nums, path):\n    if not nums:\n        print(path)\n        return\n    for i in range(len(nums)):\n        solve(nums[:i]+nums[i+1:], path+[nums[i]])\n```\nGenerates all permutations using backtracking."
  },
  {
    "question": "[462] Solve a bit manipulation problem. Code in Python.",
    "answer": "```python\ndef count_set_bits(n):\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n```\nCounts set bits in an integer."
  },
  {
    "question": "[463] Solve a arrays problem. Code in Java.",
    "answer": "```java\npublic int findMax(int[] arr) {\n    int maxVal = arr[0];\n    for(int i=1;i<arr.length;i++)\n        if(arr[i]>maxVal) maxVal=arr[i];\n    return maxVal;\n}\n```\nFinds the maximum element in an array."
  },
  {
    "question": "[464] Solve a binary trees problem. Code in Python.",
    "answer": "```python\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef treeHeight(root):\n    if not root:\n        return 0\n    return 1 + max(treeHeight(root.left), treeHeight(root.right))\n```\nComputes the height of a binary tree."
  },
  {
    "question": "[465] Solve a heaps problem. Code in Python.",
    "answer": "```python\nimport heapq\nh = []\nheapq.heappush(h, 3)\nheapq.heappush(h, 1)\nheapq.heappush(h, 2)\nprint(heapq.heappop(h))\n```\nImplements a min-heap using heapq."
  },
  {
    "question": "[466] Solve a arrays problem. Code in Java.",
    "answer": "```java\npublic int findMax(int[] arr) {\n    int maxVal = arr[0];\n    for(int i=1;i<arr.length;i++)\n        if(arr[i]>maxVal) maxVal=arr[i];\n    return maxVal;\n}\n```\nFinds the maximum element in an array."
  },
  {
    "question": "[467] Solve a searching problem. Code in Java.",
    "answer": "```java\npublic int binarySearch(int[] arr, int target) {\n    int left=0,right=arr.length-1;\n    while(left<=right){\n        int mid=left+(right-left)/2;\n        if(arr[mid]==target) return mid;\n        else if(arr[mid]<target) left=mid+1;\n        else right=mid-1;\n    }\n    return -1;\n}\n```\nPerforms binary search on a sorted array."
  },
  {
    "question": "[468] Solve a hashing problem. Code in Java.",
    "answer": "```java\nimport java.util.*;\nMap<String, Integer> hashMap = new HashMap<>();\nhashMap.put(\"a\", 1);\nSystem.out.println(hashMap.get(\"a\"));\n```\nImplements a hash map using HashMap."
  },
  {
    "question": "[469] Solve a recursion problem. Code in Python.",
    "answer": "```python\ndef factorial(n):\n    if n == 0:\n        return 1\n    return n * factorial(n-1)\n```\nCalculates factorial using recursion."
  },
  {
    "question": "[470] Solve a backtracking problem. Code in C++.",
    "answer": "```cpp\n#include <vector>\n#include <iostream>\nusing namespace std;\nvoid solve(vector<int>& nums, vector<int>& path) {\n    if (nums.empty()) {\n        for (int x : path) cout << x << \" \";\n        cout << endl;\n        return;\n    }\n    for (size_t i = 0; i < nums.size(); ++i) {\n        vector<int> nums2 = nums;\n        nums2.erase(nums2.begin() + i);\n        vector<int> path2 = path;\n        path2.push_back(nums[i]);\n        solve(nums2, path2);\n    }\n}\n```\nGenerates all permutations using backtracking."
  },
  {
    "question": "[471] Solve a strings problem. Code in Python.",
    "answer": "```python\ndef reverse_string(s):\n    return s[::-1]\n```\nReverses a string."
  },
  {
    "question": "[472] Solve a strings problem. Code in C++.",
    "answer": "```cpp\n#include <iostream>\n#include <algorithm>\nusing namespace std;\nstring reverseString(string s) {\n    reverse(s.begin(), s.end());\n    return s;\n}\n```\nReverses a string."
  },
  {
    "question": "[473] Solve a backtracking problem. Code in Java.",
    "answer": "```java\npublic void solve(List<Integer> nums, List<Integer> path) {\n    if (nums.isEmpty()) {\n        System.out.println(path);\n        return;\n    }\n    for (int i = 0; i < nums.size(); i++) {\n        List<Integer> nums2 = new ArrayList<>(nums);\n        nums2.remove(i);\n        List<Integer> path2 = new ArrayList<>(path);\n        path2.add(nums.get(i));\n        solve(nums2, path2);\n    }\n}\n```\nGenerates all permutations using backtracking."
  },
  {
    "question": "[474] Solve a dynamic programming problem. Code in Java.",
    "answer": "// Code for dynamic programming in Java not available."
  },
  {
    "question": "[475] Solve a linked lists problem. Code in Python.",
    "answer": "```python\nclass ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n\ndef reverseList(head):\n    prev = None\n    curr = head\n    while curr:\n        next_node = curr.next\n        curr.next = prev\n        prev = curr\n        curr = next_node\n    return prev\n```\nReverses a singly linked list."
  },
  {
    "question": "[476] Solve a geometry problem. Code in Python.",
    "answer": "```python\ndef area_of_circle(r):\n    import math\n    return math.pi * r * r\n```\nCalculates area of a circle."
  },
  {
    "question": "[477] Solve a math problem. Code in Java.",
    "answer": "```java\npublic boolean isArmstrong(int n) {\n    int temp = n, digitCount = 0, sum = 0;\n    digitCount = (int)(Math.log10(n)) + 1;\n    while (temp != 0) {\n        int digit = temp % 10;\n        sum += Math.pow(digit, digitCount);\n        temp /= 10;\n    }\n    return n == sum;\n}\n```\nChecks if a number is an Armstrong number."
  },
  {
    "question": "[478] Solve a queues problem. Code in Java.",
    "answer": "```java\nimport java.util.*;\nQueue<Integer> q = new LinkedList<>();\nq.add(1);\nq.add(2);\nSystem.out.println(q.poll());\n```\nImplements a queue using LinkedList."
  },
  {
    "question": "[479] Solve a number theory problem. Code in Python.",
    "answer": "```python\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True\n```\nChecks if a number is prime."
  },
  {
    "question": "[480] Solve a bit manipulation problem. Code in C++.",
    "answer": "```cpp\nint countSetBits(int n) {\n    int count = 0;\n    while (n) {\n        count += n & 1;\n        n >>= 1;\n    }\n    return count;\n}\n```\nCounts set bits in an integer."
  },
  {
    "question": "[481] Solve a number theory problem. Code in Python.",
    "answer": "```python\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True\n```\nChecks if a number is prime."
  },
  {
    "question": "[482] Solve a number theory problem. Code in Python.",
    "answer": "```python\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True\n```\nChecks if a number is prime."
  },
  {
    "question": "[483] Solve a strings problem. Code in C++.",
    "answer": "```cpp\n#include <iostream>\n#include <algorithm>\nusing namespace std;\nstring reverseString(string s) {\n    reverse(s.begin(), s.end());\n    return s;\n}\n```\nReverses a string."
  },
  {
    "question": "[484] Solve a number theory problem. Code in C++.",
    "answer": "```cpp\nbool isPrime(int n) {\n    if (n < 2) return false;\n    for (int i = 2; i * i <= n; ++i)\n        if (n % i == 0) return false;\n    return true;\n}\n```\nChecks if a number is prime."
  },
  {
    "question": "[485] Solve a strings problem. Code in Python.",
    "answer": "```python\ndef reverse_string(s):\n    return s[::-1]\n```\nReverses a string."
  },
  {
    "question": "[486] Solve a greedy problem. Code in C++.",
    "answer": "```cpp\n#include <vector>\n#include <algorithm>\nusing namespace std;\nvector<pair<int,int>> activitySelection(vector<pair<int,int>>& activities) {\n    sort(activities.begin(), activities.end(), [](auto &a, auto &b){ return a.second < b.second; });\n    vector<pair<int,int>> res;\n    res.push_back(activities[0]);\n    for (size_t i = 1; i < activities.size(); ++i) {\n        if (activities[i].first >= res.back().second)\n            res.push_back(activities[i]);\n    }\n    return res;\n}\n```\nSelects maximum number of non-overlapping activities."
  },
  {
    "question": "[487] Solve a dynamic programming problem. Code in C++.",
    "answer": "// Code for dynamic programming in C++ not available."
  },
  {
    "question": "[488] Solve a number theory problem. Code in C++.",
    "answer": "```cpp\nbool isPrime(int n) {\n    if (n < 2) return false;\n    for (int i = 2; i * i <= n; ++i)\n        if (n % i == 0) return false;\n    return true;\n}\n```\nChecks if a number is prime."
  },
  {
    "question": "[489] Solve a number theory problem. Code in Java.",
    "answer": "```java\npublic boolean isPrime(int n) {\n    if (n < 2) return false;\n    for (int i = 2; i * i <= n; i++)\n        if (n % i == 0) return false;\n    return true;\n}\n```\nChecks if a number is prime."
  },
  {
    "question": "[490] Solve a stacks problem. Code in C++.",
    "answer": "```cpp\n#include <stack>\n#include <iostream>\nusing namespace std;\nstack<int> s;\ns.push(1);\ns.push(2);\ncout << s.top() << endl;\ns.pop();\n```\nImplements a stack using STL stack."
  },
  {
    "question": "[491] Solve a greedy problem. Code in Python.",
    "answer": "```python\ndef activity_selection(activities):\n    activities.sort(key=lambda x: x[1])\n    res = [activities[0]]\n    for i in range(1, len(activities)):\n        if activities[i][0] >= res[-1][1]:\n            res.append(activities[i])\n    return res\n```\nSelects maximum number of non-overlapping activities."
  },
  {
    "question": "[492] Solve a greedy problem. Code in Java.",
    "answer": "```java\nimport java.util.*;\npublic List<int[]> activitySelection(List<int[]> activities) {\n    activities.sort(Comparator.comparingInt(a -> a[1]));\n    List<int[]> res = new ArrayList<>();\n    res.add(activities.get(0));\n    for (int i = 1; i < activities.size(); i++) {\n        if (activities.get(i)[0] >= res.get(res.size()-1)[1])\n            res.add(activities.get(i));\n    }\n    return res;\n}\n```\nSelects maximum number of non-overlapping activities."
  },
  {
    "question": "[493] Solve a graphs problem. Code in C++.",
    "answer": "// Code for graphs in C++ not available."
  },
  {
    "question": "[494] Solve a heaps problem. Code in C++.",
    "answer": "```cpp\n#include <queue>\n#include <vector>\n#include <iostream>\nusing namespace std;\npriority_queue<int, vector<int>, greater<int>> h;\nh.push(3);\nh.push(1);\nh.push(2);\ncout << h.top() << endl;\nh.pop();\n```\nImplements a min-heap using STL priority_queue."
  },
  {
    "question": "[495] Solve a heaps problem. Code in Java.",
    "answer": "```java\nimport java.util.*;\nPriorityQueue<Integer> h = new PriorityQueue<>();\nh.add(3);\nh.add(1);\nh.add(2);\nSystem.out.println(h.poll());\n```\nImplements a min-heap using PriorityQueue."
  },
  {
    "question": "[496] Solve a tries problem. Code in C++.",
    "answer": "```cpp\n#include <unordered_map>\nclass TrieNode {\npublic:\n    unordered_map<char, TrieNode*> children;\n    bool is_end = false;\n};\nclass Trie {\npublic:\n    TrieNode* root = new TrieNode();\n    void insert(string word) {\n        TrieNode* node = root;\n        for (char c : word) {\n            if (!node->children[c]) node->children[c] = new TrieNode();\n            node = node->children[c];\n        }\n        node->is_end = true;\n    }\n};\n```\nBasic Trie implementation."
  },
  {
    "question": "[497] Solve a number theory problem. Code in Python.",
    "answer": "```python\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True\n```\nChecks if a number is prime."
  },
  {
    "question": "[498] Solve a dynamic programming problem. Code in C++.",
    "answer": "// Code for dynamic programming in C++ not available."
  },
  {
    "question": "[499] Solve a searching problem. Code in Python.",
    "answer": "```python\ndef binary_search(arr, target):\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1\n```\nPerforms binary search on a sorted array."
  },
  {
    "question": "[500] Solve a greedy problem. Code in C++.",
    "answer": "```cpp\n#include <vector>\n#include <algorithm>\nusing namespace std;\nvector<pair<int,int>> activitySelection(vector<pair<int,int>>& activities) {\n    sort(activities.begin(), activities.end(), [](auto &a, auto &b){ return a.second < b.second; });\n    vector<pair<int,int>> res;\n    res.push_back(activities[0]);\n    for (size_t i = 1; i < activities.size(); ++i) {\n        if (activities[i].first >= res.back().second)\n            res.push_back(activities[i]);\n    }\n    return res;\n}\n```\nSelects maximum number of non-overlapping activities."
  },
  {
    "question": "[501] Solve a queues problem. Code in C++.",
    "answer": "```cpp\n#include <queue>\n#include <iostream>\nusing namespace std;\nqueue<int> q;\nq.push(1);\nq.push(2);\ncout << q.front() << endl;\nq.pop();\n```\nImplements a queue using STL queue."
  },
  {
    "question": "[502] Solve a stacks problem. Code in Java.",
    "answer": "```java\nimport java.util.*;\nStack<Integer> stack = new Stack<>();\nstack.push(1);\nstack.push(2);\nSystem.out.println(stack.pop());\n```\nImplements a stack using Stack class."
  },
  {
    "question": "[503] Solve a stacks problem. Code in Java.",
    "answer": "```java\nimport java.util.*;\nStack<Integer> stack = new Stack<>();\nstack.push(1);\nstack.push(2);\nSystem.out.println(stack.pop());\n```\nImplements a stack using Stack class."
  },
  {
    "question": "[504] Solve a tries problem. Code in Python.",
    "answer": "```python\nclass TrieNode:\n    def __init__(self):\n        self.children = {}\n        self.is_end = False\nclass Trie:\n    def __init__(self):\n        self.root = TrieNode()\n    def insert(self, word):\n        node = self.root\n        for char in word:\n            if char not in node.children:\n                node.children[char] = TrieNode()\n            node = node.children[char]\n        node.is_end = True\n```\nBasic Trie implementation."
  },
  {
    "question": "[505] Solve a heaps problem. Code in C++.",
    "answer": "```cpp\n#include <queue>\n#include <vector>\n#include <iostream>\nusing namespace std;\npriority_queue<int, vector<int>, greater<int>> h;\nh.push(3);\nh.push(1);\nh.push(2);\ncout << h.top() << endl;\nh.pop();\n```\nImplements a min-heap using STL priority_queue."
  },
  {
    "question": "[506] Solve a strings problem. Code in Java.",
    "answer": "```java\npublic String reverseString(String s) {\n    return new StringBuilder(s).reverse().toString();\n}\n```\nReverses a string."
  },
  {
    "question": "[507] Solve a graphs problem. Code in Python.",
    "answer": "// Code for graphs in Python not available."
  },
  {
    "question": "[508] Solve a sorting problem. Code in Python.",
    "answer": "```python\ndef bubble_sort(arr):\n    n = len(arr)\n    for i in range(n):\n        for j in range(0, n-i-1):\n            if arr[j] > arr[j+1]:\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n    return arr\n```\nSorts an array using bubble sort."
  },
  {
    "question": "[509] Solve a number theory problem. Code in Java.",
    "answer": "```java\npublic boolean isPrime(int n) {\n    if (n < 2) return false;\n    for (int i = 2; i * i <= n; i++)\n        if (n % i == 0) return false;\n    return true;\n}\n```\nChecks if a number is prime."
  },
  {
    "question": "[510] Solve a geometry problem. Code in C++.",
    "answer": "```cpp\n#include <cmath>\ndouble areaOfCircle(double r) {\n    return M_PI * r * r;\n}\n```\nCalculates area of a circle."
  },
  {
    "question": "[511] Solve a strings problem. Code in Java.",
    "answer": "```java\npublic String reverseString(String s) {\n    return new StringBuilder(s).reverse().toString();\n}\n```\nReverses a string."
  },
  {
    "question": "[512] Solve a binary trees problem. Code in Java.",
    "answer": "```java\nclass TreeNode {\n    int val;\n    TreeNode left, right;\n    TreeNode(int x) { val = x; }\n}\npublic int treeHeight(TreeNode root) {\n    if (root == null) return 0;\n    return 1 + Math.max(treeHeight(root.left), treeHeight(root.right));\n}\n```\nComputes the height of a binary tree."
  },
  {
    "question": "[513] Solve a linked lists problem. Code in C++.",
    "answer": "```cpp\nstruct ListNode {\n    int val;\n    ListNode* next;\n    ListNode(int x) : val(x), next(nullptr) {}\n};\nListNode* reverseList(ListNode* head) {\n    ListNode* prev = nullptr;\n    while (head) {\n        ListNode* next = head->next;\n        head->next = prev;\n        prev = head;\n        head = next;\n    }\n    return prev;\n}\n```\nReverses a singly linked list."
  },
  {
    "question": "[514] Solve a number theory problem. Code in C++.",
    "answer": "```cpp\nbool isPrime(int n) {\n    if (n < 2) return false;\n    for (int i = 2; i * i <= n; ++i)\n        if (n % i == 0) return false;\n    return true;\n}\n```\nChecks if a number is prime."
  },
  {
    "question": "[515] Solve a bit manipulation problem. Code in Java.",
    "answer": "```java\npublic int countSetBits(int n) {\n    int count = 0;\n    while (n != 0) {\n        count += n & 1;\n        n >>= 1;\n    }\n    return count;\n}\n```\nCounts set bits in an integer."
  },
  {
    "question": "[516] Solve a searching problem. Code in Java.",
    "answer": "```java\npublic int binarySearch(int[] arr, int target) {\n    int left=0,right=arr.length-1;\n    while(left<=right){\n        int mid=left+(right-left)/2;\n        if(arr[mid]==target) return mid;\n        else if(arr[mid]<target) left=mid+1;\n        else right=mid-1;\n    }\n    return -1;\n}\n```\nPerforms binary search on a sorted array."
  },
  {
    "question": "[517] Solve a recursion problem. Code in Java.",
    "answer": "```java\npublic int factorial(int n) {\n    if (n == 0) return 1;\n    return n * factorial(n-1);\n}\n```\nCalculates factorial using recursion."
  },
  {
    "question": "[518] Solve a sorting problem. Code in C++.",
    "answer": "```cpp\nvoid bubbleSort(int arr[], int n) {\n    for(int i=0;i<n-1;i++)\n        for(int j=0;j<n-i-1;j++)\n            if(arr[j]>arr[j+1]) swap(arr[j],arr[j+1]);\n}\n```\nSorts an array using bubble sort."
  },
  {
    "question": "[519] Solve a dynamic programming problem. Code in Java.",
    "answer": "// Code for dynamic programming in Java not available."
  },
  {
    "question": "[520] Solve a binary trees problem. Code in Python.",
    "answer": "```python\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef treeHeight(root):\n    if not root:\n        return 0\n    return 1 + max(treeHeight(root.left), treeHeight(root.right))\n```\nComputes the height of a binary tree."
  },
  {
    "question": "[521] Solve a stacks problem. Code in Java.",
    "answer": "```java\nimport java.util.*;\nStack<Integer> stack = new Stack<>();\nstack.push(1);\nstack.push(2);\nSystem.out.println(stack.pop());\n```\nImplements a stack using Stack class."
  },
  {
    "question": "[522] Solve a math problem. Code in Python.",
    "answer": "```python\ndef is_armstrong(n):\n    digits = [int(d) for d in str(n)]\n    power = len(digits)\n    return n == sum([d**power for d in digits])\n```\nChecks if a number is an Armstrong number."
  },
  {
    "question": "[523] Solve a dynamic programming problem. Code in C++.",
    "answer": "// Code for dynamic programming in C++ not available."
  },
  {
    "question": "[524] Solve a graphs problem. Code in Java.",
    "answer": "// Code for graphs in Java not available."
  },
  {
    "question": "[525] Solve a linked lists problem. Code in Python.",
    "answer": "```python\nclass ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n\ndef reverseList(head):\n    prev = None\n    curr = head\n    while curr:\n        next_node = curr.next\n        curr.next = prev\n        prev = curr\n        curr = next_node\n    return prev\n```\nReverses a singly linked list."
  },
  {
    "question": "[526] Solve a stacks problem. Code in Python.",
    "answer": "```python\nstack = []\nstack.append(1)\nstack.append(2)\nprint(stack.pop())\n```\nImplements a stack using list."
  },
  {
    "question": "[527] Solve a number theory problem. Code in Java.",
    "answer": "```java\npublic boolean isPrime(int n) {\n    if (n < 2) return false;\n    for (int i = 2; i * i <= n; i++)\n        if (n % i == 0) return false;\n    return true;\n}\n```\nChecks if a number is prime."
  },
  {
    "question": "[528] Solve a searching problem. Code in Python.",
    "answer": "```python\ndef binary_search(arr, target):\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1\n```\nPerforms binary search on a sorted array."
  },
  {
    "question": "[529] Solve a arrays problem. Code in C++.",
    "answer": "```cpp\n#include <iostream>\nusing namespace std;\nint findMax(int arr[], int n) {\n    int maxVal = arr[0];\n    for(int i=1;i<n;i++)\n        if(arr[i]>maxVal) maxVal=arr[i];\n    return maxVal;\n}\n```\nFinds the maximum element in an array."
  },
  {
    "question": "[530] Solve a math problem. Code in Java.",
    "answer": "```java\npublic boolean isArmstrong(int n) {\n    int temp = n, digitCount = 0, sum = 0;\n    digitCount = (int)(Math.log10(n)) + 1;\n    while (temp != 0) {\n        int digit = temp % 10;\n        sum += Math.pow(digit, digitCount);\n        temp /= 10;\n    }\n    return n == sum;\n}\n```\nChecks if a number is an Armstrong number."
  },
  {
    "question": "[531] Solve a tries problem. Code in Java.",
    "answer": "```java\nclass TrieNode {\n    Map<Character, TrieNode> children = new HashMap<>();\n    boolean isEnd = false;\n}\nclass Trie {\n    TrieNode root = new TrieNode();\n    void insert(String word) {\n        TrieNode node = root;\n        for (char c : word.toCharArray()) {\n            node.children.putIfAbsent(c, new TrieNode());\n            node = node.children.get(c);\n        }\n        node.isEnd = true;\n    }\n}\n```\nBasic Trie implementation."
  },
  {
    "question": "[532] Solve a bit manipulation problem. Code in Python.",
    "answer": "```python\ndef count_set_bits(n):\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n```\nCounts set bits in an integer."
  },
  {
    "question": "[533] Solve a number theory problem. Code in Python.",
    "answer": "```python\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True\n```\nChecks if a number is prime."
  },
  {
    "question": "[534] Solve a stacks problem. Code in Java.",
    "answer": "```java\nimport java.util.*;\nStack<Integer> stack = new Stack<>();\nstack.push(1);\nstack.push(2);\nSystem.out.println(stack.pop());\n```\nImplements a stack using Stack class."
  },
  {
    "question": "[535] Solve a math problem. Code in C++.",
    "answer": "```cpp\n#include <cmath>\nbool isArmstrong(int n) {\n    int temp = n, digitCount = 0, sum = 0;\n    digitCount = (int)(log10(n)) + 1;\n    while (temp != 0) {\n        int digit = temp % 10;\n        sum += pow(digit, digitCount);\n        temp /= 10;\n    }\n    return n == sum;\n}\n```\nChecks if a number is an Armstrong number."
  },
  {
    "question": "[536] Solve a searching problem. Code in C++.",
    "answer": "```cpp\nint binarySearch(int arr[], int n, int target) {\n    int left=0,right=n-1;\n    while(left<=right){\n        int mid=left+(right-left)/2;\n        if(arr[mid]==target) return mid;\n        else if(arr[mid]<target) left=mid+1;\n        else right=mid-1;\n    }\n    return -1;\n}\n```\nPerforms binary search on a sorted array."
  },
  {
    "question": "[537] Solve a stacks problem. Code in C++.",
    "answer": "```cpp\n#include <stack>\n#include <iostream>\nusing namespace std;\nstack<int> s;\ns.push(1);\ns.push(2);\ncout << s.top() << endl;\ns.pop();\n```\nImplements a stack using STL stack."
  },
  {
    "question": "[538] Solve a dynamic programming problem. Code in C++.",
    "answer": "// Code for dynamic programming in C++ not available."
  },
  {
    "question": "[539] Solve a stacks problem. Code in C++.",
    "answer": "```cpp\n#include <stack>\n#include <iostream>\nusing namespace std;\nstack<int> s;\ns.push(1);\ns.push(2);\ncout << s.top() << endl;\ns.pop();\n```\nImplements a stack using STL stack."
  },
  {
    "question": "[540] Solve a searching problem. Code in C++.",
    "answer": "```cpp\nint binarySearch(int arr[], int n, int target) {\n    int left=0,right=n-1;\n    while(left<=right){\n        int mid=left+(right-left)/2;\n        if(arr[mid]==target) return mid;\n        else if(arr[mid]<target) left=mid+1;\n        else right=mid-1;\n    }\n    return -1;\n}\n```\nPerforms binary search on a sorted array."
  },
  {
    "question": "[541] Solve a binary trees problem. Code in Python.",
    "answer": "```python\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef treeHeight(root):\n    if not root:\n        return 0\n    return 1 + max(treeHeight(root.left), treeHeight(root.right))\n```\nComputes the height of a binary tree."
  },
  {
    "question": "[542] Solve a bit manipulation problem. Code in Python.",
    "answer": "```python\ndef count_set_bits(n):\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n```\nCounts set bits in an integer."
  },
  {
    "question": "[543] Solve a strings problem. Code in C++.",
    "answer": "```cpp\n#include <iostream>\n#include <algorithm>\nusing namespace std;\nstring reverseString(string s) {\n    reverse(s.begin(), s.end());\n    return s;\n}\n```\nReverses a string."
  },
  {
    "question": "[544] Solve a recursion problem. Code in Java.",
    "answer": "```java\npublic int factorial(int n) {\n    if (n == 0) return 1;\n    return n * factorial(n-1);\n}\n```\nCalculates factorial using recursion."
  },
  {
    "question": "[545] Solve a searching problem. Code in C++.",
    "answer": "```cpp\nint binarySearch(int arr[], int n, int target) {\n    int left=0,right=n-1;\n    while(left<=right){\n        int mid=left+(right-left)/2;\n        if(arr[mid]==target) return mid;\n        else if(arr[mid]<target) left=mid+1;\n        else right=mid-1;\n    }\n    return -1;\n}\n```\nPerforms binary search on a sorted array."
  },
  {
    "question": "[546] Solve a greedy problem. Code in Python.",
    "answer": "```python\ndef activity_selection(activities):\n    activities.sort(key=lambda x: x[1])\n    res = [activities[0]]\n    for i in range(1, len(activities)):\n        if activities[i][0] >= res[-1][1]:\n            res.append(activities[i])\n    return res\n```\nSelects maximum number of non-overlapping activities."
  },
  {
    "question": "[547] Solve a searching problem. Code in Python.",
    "answer": "```python\ndef binary_search(arr, target):\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1\n```\nPerforms binary search on a sorted array."
  },
  {
    "question": "[548] Solve a strings problem. Code in C++.",
    "answer": "```cpp\n#include <iostream>\n#include <algorithm>\nusing namespace std;\nstring reverseString(string s) {\n    reverse(s.begin(), s.end());\n    return s;\n}\n```\nReverses a string."
  },
  {
    "question": "[549] Solve a dynamic programming problem. Code in C++.",
    "answer": "// Code for dynamic programming in C++ not available."
  },
  {
    "question": "[550] Solve a greedy problem. Code in Python.",
    "answer": "```python\ndef activity_selection(activities):\n    activities.sort(key=lambda x: x[1])\n    res = [activities[0]]\n    for i in range(1, len(activities)):\n        if activities[i][0] >= res[-1][1]:\n            res.append(activities[i])\n    return res\n```\nSelects maximum number of non-overlapping activities."
  },
  {
    "question": "[551] Solve a searching problem. Code in Java.",
    "answer": "```java\npublic int binarySearch(int[] arr, int target) {\n    int left=0,right=arr.length-1;\n    while(left<=right){\n        int mid=left+(right-left)/2;\n        if(arr[mid]==target) return mid;\n        else if(arr[mid]<target) left=mid+1;\n        else right=mid-1;\n    }\n    return -1;\n}\n```\nPerforms binary search on a sorted array."
  },
  {
    "question": "[552] Solve a graphs problem. Code in C++.",
    "answer": "// Code for graphs in C++ not available."
  },
  {
    "question": "[553] Solve a sorting problem. Code in C++.",
    "answer": "```cpp\nvoid bubbleSort(int arr[], int n) {\n    for(int i=0;i<n-1;i++)\n        for(int j=0;j<n-i-1;j++)\n            if(arr[j]>arr[j+1]) swap(arr[j],arr[j+1]);\n}\n```\nSorts an array using bubble sort."
  },
  {
    "question": "[554] Solve a geometry problem. Code in C++.",
    "answer": "```cpp\n#include <cmath>\ndouble areaOfCircle(double r) {\n    return M_PI * r * r;\n}\n```\nCalculates area of a circle."
  },
  {
    "question": "[555] Solve a graphs problem. Code in Java.",
    "answer": "// Code for graphs in Java not available."
  },
  {
    "question": "[556] Solve a tries problem. Code in Java.",
    "answer": "```java\nclass TrieNode {\n    Map<Character, TrieNode> children = new HashMap<>();\n    boolean isEnd = false;\n}\nclass Trie {\n    TrieNode root = new TrieNode();\n    void insert(String word) {\n        TrieNode node = root;\n        for (char c : word.toCharArray()) {\n            node.children.putIfAbsent(c, new TrieNode());\n            node = node.children.get(c);\n        }\n        node.isEnd = true;\n    }\n}\n```\nBasic Trie implementation."
  },
  {
    "question": "[557] Solve a dynamic programming problem. Code in Python.",
    "answer": "// Code for dynamic programming in Python not available."
  },
  {
    "question": "[558] Solve a graphs problem. Code in C++.",
    "answer": "// Code for graphs in C++ not available."
  },
  {
    "question": "[559] Solve a geometry problem. Code in Python.",
    "answer": "```python\ndef area_of_circle(r):\n    import math\n    return math.pi * r * r\n```\nCalculates area of a circle."
  },
  {
    "question": "[560] Solve a hashing problem. Code in Python.",
    "answer": "```python\nhash_map = {}\nhash_map['a'] = 1\nprint(hash_map['a'])\n```\nImplements a hash map using dict."
  },
  {
    "question": "[561] Solve a strings problem. Code in Java.",
    "answer": "```java\npublic String reverseString(String s) {\n    return new StringBuilder(s).reverse().toString();\n}\n```\nReverses a string."
  },
  {
    "question": "[562] Solve a arrays problem. Code in Python.",
    "answer": "```python\ndef find_max(arr):\n    return max(arr)\n```\nFinds the maximum element in an array."
  },
  {
    "question": "[563] Solve a strings problem. Code in C++.",
    "answer": "```cpp\n#include <iostream>\n#include <algorithm>\nusing namespace std;\nstring reverseString(string s) {\n    reverse(s.begin(), s.end());\n    return s;\n}\n```\nReverses a string."
  },
  {
    "question": "[564] Solve a dynamic programming problem. Code in Java.",
    "answer": "// Code for dynamic programming in Java not available."
  },
  {
    "question": "[565] Solve a graphs problem. Code in Java.",
    "answer": "// Code for graphs in Java not available."
  },
  {
    "question": "[566] Solve a strings problem. Code in Java.",
    "answer": "```java\npublic String reverseString(String s) {\n    return new StringBuilder(s).reverse().toString();\n}\n```\nReverses a string."
  },
  {
    "question": "[567] Solve a graphs problem. Code in Java.",
    "answer": "// Code for graphs in Java not available."
  },
  {
    "question": "[568] Solve a queues problem. Code in C++.",
    "answer": "```cpp\n#include <queue>\n#include <iostream>\nusing namespace std;\nqueue<int> q;\nq.push(1);\nq.push(2);\ncout << q.front() << endl;\nq.pop();\n```\nImplements a queue using STL queue."
  },
  {
    "question": "[569] Solve a bit manipulation problem. Code in C++.",
    "answer": "```cpp\nint countSetBits(int n) {\n    int count = 0;\n    while (n) {\n        count += n & 1;\n        n >>= 1;\n    }\n    return count;\n}\n```\nCounts set bits in an integer."
  },
  {
    "question": "[570] Solve a searching problem. Code in Python.",
    "answer": "```python\ndef binary_search(arr, target):\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1\n```\nPerforms binary search on a sorted array."
  },
  {
    "question": "[571] Solve a greedy problem. Code in Java.",
    "answer": "```java\nimport java.util.*;\npublic List<int[]> activitySelection(List<int[]> activities) {\n    activities.sort(Comparator.comparingInt(a -> a[1]));\n    List<int[]> res = new ArrayList<>();\n    res.add(activities.get(0));\n    for (int i = 1; i < activities.size(); i++) {\n        if (activities.get(i)[0] >= res.get(res.size()-1)[1])\n            res.add(activities.get(i));\n    }\n    return res;\n}\n```\nSelects maximum number of non-overlapping activities."
  },
  {
    "question": "[572] Solve a recursion problem. Code in Java.",
    "answer": "```java\npublic int factorial(int n) {\n    if (n == 0) return 1;\n    return n * factorial(n-1);\n}\n```\nCalculates factorial using recursion."
  },
  {
    "question": "[573] Solve a strings problem. Code in C++.",
    "answer": "```cpp\n#include <iostream>\n#include <algorithm>\nusing namespace std;\nstring reverseString(string s) {\n    reverse(s.begin(), s.end());\n    return s;\n}\n```\nReverses a string."
  },
  {
    "question": "[574] Solve a dynamic programming problem. Code in Python.",
    "answer": "// Code for dynamic programming in Python not available."
  },
  {
    "question": "[575] Solve a dynamic programming problem. Code in C++.",
    "answer": "// Code for dynamic programming in C++ not available."
  },
  {
    "question": "[576] Solve a hashing problem. Code in C++.",
    "answer": "```cpp\n#include <unordered_map>\n#include <iostream>\nusing namespace std;\nunordered_map<string, int> hash_map;\nhash_map[\"a\"] = 1;\ncout << hash_map[\"a\"] << endl;\n```\nImplements a hash map using unordered_map."
  },
  {
    "question": "[577] Solve a number theory problem. Code in Python.",
    "answer": "```python\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True\n```\nChecks if a number is prime."
  },
  {
    "question": "[578] Solve a dynamic programming problem. Code in C++.",
    "answer": "// Code for dynamic programming in C++ not available."
  },
  {
    "question": "[579] Solve a math problem. Code in C++.",
    "answer": "```cpp\n#include <cmath>\nbool isArmstrong(int n) {\n    int temp = n, digitCount = 0, sum = 0;\n    digitCount = (int)(log10(n)) + 1;\n    while (temp != 0) {\n        int digit = temp % 10;\n        sum += pow(digit, digitCount);\n        temp /= 10;\n    }\n    return n == sum;\n}\n```\nChecks if a number is an Armstrong number."
  },
  {
    "question": "[580] Solve a backtracking problem. Code in C++.",
    "answer": "```cpp\n#include <vector>\n#include <iostream>\nusing namespace std;\nvoid solve(vector<int>& nums, vector<int>& path) {\n    if (nums.empty()) {\n        for (int x : path) cout << x << \" \";\n        cout << endl;\n        return;\n    }\n    for (size_t i = 0; i < nums.size(); ++i) {\n        vector<int> nums2 = nums;\n        nums2.erase(nums2.begin() + i);\n        vector<int> path2 = path;\n        path2.push_back(nums[i]);\n        solve(nums2, path2);\n    }\n}\n```\nGenerates all permutations using backtracking."
  },
  {
    "question": "[581] Solve a bit manipulation problem. Code in C++.",
    "answer": "```cpp\nint countSetBits(int n) {\n    int count = 0;\n    while (n) {\n        count += n & 1;\n        n >>= 1;\n    }\n    return count;\n}\n```\nCounts set bits in an integer."
  },
  {
    "question": "[582] Solve a number theory problem. Code in Python.",
    "answer": "```python\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True\n```\nChecks if a number is prime."
  },
  {
    "question": "[583] Solve a heaps problem. Code in Java.",
    "answer": "```java\nimport java.util.*;\nPriorityQueue<Integer> h = new PriorityQueue<>();\nh.add(3);\nh.add(1);\nh.add(2);\nSystem.out.println(h.poll());\n```\nImplements a min-heap using PriorityQueue."
  },
  {
    "question": "[584] Solve a queues problem. Code in Python.",
    "answer": "```python\nfrom collections import deque\nq = deque()\nq.append(1)\nq.append(2)\nprint(q.popleft())\n```\nImplements a queue using deque."
  },
  {
    "question": "[585] Solve a stacks problem. Code in Python.",
    "answer": "```python\nstack = []\nstack.append(1)\nstack.append(2)\nprint(stack.pop())\n```\nImplements a stack using list."
  },
  {
    "question": "[586] Solve a graphs problem. Code in Java.",
    "answer": "// Code for graphs in Java not available."
  },
  {
    "question": "[587] Solve a strings problem. Code in Python.",
    "answer": "```python\ndef reverse_string(s):\n    return s[::-1]\n```\nReverses a string."
  },
  {
    "question": "[588] Solve a tries problem. Code in Java.",
    "answer": "```java\nclass TrieNode {\n    Map<Character, TrieNode> children = new HashMap<>();\n    boolean isEnd = false;\n}\nclass Trie {\n    TrieNode root = new TrieNode();\n    void insert(String word) {\n        TrieNode node = root;\n        for (char c : word.toCharArray()) {\n            node.children.putIfAbsent(c, new TrieNode());\n            node = node.children.get(c);\n        }\n        node.isEnd = true;\n    }\n}\n```\nBasic Trie implementation."
  },
  {
    "question": "[589] Solve a graphs problem. Code in Python.",
    "answer": "// Code for graphs in Python not available."
  },
  {
    "question": "[590] Solve a backtracking problem. Code in Python.",
    "answer": "```python\ndef solve(nums, path):\n    if not nums:\n        print(path)\n        return\n    for i in range(len(nums)):\n        solve(nums[:i]+nums[i+1:], path+[nums[i]])\n```\nGenerates all permutations using backtracking."
  },
  {
    "question": "[591] Solve a greedy problem. Code in Java.",
    "answer": "```java\nimport java.util.*;\npublic List<int[]> activitySelection(List<int[]> activities) {\n    activities.sort(Comparator.comparingInt(a -> a[1]));\n    List<int[]> res = new ArrayList<>();\n    res.add(activities.get(0));\n    for (int i = 1; i < activities.size(); i++) {\n        if (activities.get(i)[0] >= res.get(res.size()-1)[1])\n            res.add(activities.get(i));\n    }\n    return res;\n}\n```\nSelects maximum number of non-overlapping activities."
  },
  {
    "question": "[592] Solve a arrays problem. Code in Java.",
    "answer": "```java\npublic int findMax(int[] arr) {\n    int maxVal = arr[0];\n    for(int i=1;i<arr.length;i++)\n        if(arr[i]>maxVal) maxVal=arr[i];\n    return maxVal;\n}\n```\nFinds the maximum element in an array."
  },
  {
    "question": "[593] Solve a arrays problem. Code in C++.",
    "answer": "```cpp\n#include <iostream>\nusing namespace std;\nint findMax(int arr[], int n) {\n    int maxVal = arr[0];\n    for(int i=1;i<n;i++)\n        if(arr[i]>maxVal) maxVal=arr[i];\n    return maxVal;\n}\n```\nFinds the maximum element in an array."
  },
  {
    "question": "[594] Solve a bit manipulation problem. Code in C++.",
    "answer": "```cpp\nint countSetBits(int n) {\n    int count = 0;\n    while (n) {\n        count += n & 1;\n        n >>= 1;\n    }\n    return count;\n}\n```\nCounts set bits in an integer."
  },
  {
    "question": "[595] Solve a binary trees problem. Code in Java.",
    "answer": "```java\nclass TreeNode {\n    int val;\n    TreeNode left, right;\n    TreeNode(int x) { val = x; }\n}\npublic int treeHeight(TreeNode root) {\n    if (root == null) return 0;\n    return 1 + Math.max(treeHeight(root.left), treeHeight(root.right));\n}\n```\nComputes the height of a binary tree."
  },
  {
    "question": "[596] Solve a greedy problem. Code in Python.",
    "answer": "```python\ndef activity_selection(activities):\n    activities.sort(key=lambda x: x[1])\n    res = [activities[0]]\n    for i in range(1, len(activities)):\n        if activities[i][0] >= res[-1][1]:\n            res.append(activities[i])\n    return res\n```\nSelects maximum number of non-overlapping activities."
  },
  {
    "question": "[597] Solve a tries problem. Code in Java.",
    "answer": "```java\nclass TrieNode {\n    Map<Character, TrieNode> children = new HashMap<>();\n    boolean isEnd = false;\n}\nclass Trie {\n    TrieNode root = new TrieNode();\n    void insert(String word) {\n        TrieNode node = root;\n        for (char c : word.toCharArray()) {\n            node.children.putIfAbsent(c, new TrieNode());\n            node = node.children.get(c);\n        }\n        node.isEnd = true;\n    }\n}\n```\nBasic Trie implementation."
  },
  {
    "question": "[598] Solve a greedy problem. Code in Python.",
    "answer": "```python\ndef activity_selection(activities):\n    activities.sort(key=lambda x: x[1])\n    res = [activities[0]]\n    for i in range(1, len(activities)):\n        if activities[i][0] >= res[-1][1]:\n            res.append(activities[i])\n    return res\n```\nSelects maximum number of non-overlapping activities."
  },
  {
    "question": "[599] Solve a stacks problem. Code in Java.",
    "answer": "```java\nimport java.util.*;\nStack<Integer> stack = new Stack<>();\nstack.push(1);\nstack.push(2);\nSystem.out.println(stack.pop());\n```\nImplements a stack using Stack class."
  },
  {
    "question": "[600] Solve a searching problem. Code in C++.",
    "answer": "```cpp\nint binarySearch(int arr[], int n, int target) {\n    int left=0,right=n-1;\n    while(left<=right){\n        int mid=left+(right-left)/2;\n        if(arr[mid]==target) return mid;\n        else if(arr[mid]<target) left=mid+1;\n        else right=mid-1;\n    }\n    return -1;\n}\n```\nPerforms binary search on a sorted array."
  },
  {
    "question": "[601] Solve a strings problem. Code in Java.",
    "answer": "```java\npublic String reverseString(String s) {\n    return new StringBuilder(s).reverse().toString();\n}\n```\nReverses a string."
  },
  {
    "question": "[602] Solve a dynamic programming problem. Code in C++.",
    "answer": "// Code for dynamic programming in C++ not available."
  },
  {
    "question": "[603] Solve a hashing problem. Code in C++.",
    "answer": "```cpp\n#include <unordered_map>\n#include <iostream>\nusing namespace std;\nunordered_map<string, int> hash_map;\nhash_map[\"a\"] = 1;\ncout << hash_map[\"a\"] << endl;\n```\nImplements a hash map using unordered_map."
  },
  {
    "question": "[604] Solve a graphs problem. Code in Java.",
    "answer": "// Code for graphs in Java not available."
  },
  {
    "question": "[605] Solve a hashing problem. Code in Java.",
    "answer": "```java\nimport java.util.*;\nMap<String, Integer> hashMap = new HashMap<>();\nhashMap.put(\"a\", 1);\nSystem.out.println(hashMap.get(\"a\"));\n```\nImplements a hash map using HashMap."
  },
  {
    "question": "[606] Solve a binary trees problem. Code in Java.",
    "answer": "```java\nclass TreeNode {\n    int val;\n    TreeNode left, right;\n    TreeNode(int x) { val = x; }\n}\npublic int treeHeight(TreeNode root) {\n    if (root == null) return 0;\n    return 1 + Math.max(treeHeight(root.left), treeHeight(root.right));\n}\n```\nComputes the height of a binary tree."
  },
  {
    "question": "[607] Solve a tries problem. Code in C++.",
    "answer": "```cpp\n#include <unordered_map>\nclass TrieNode {\npublic:\n    unordered_map<char, TrieNode*> children;\n    bool is_end = false;\n};\nclass Trie {\npublic:\n    TrieNode* root = new TrieNode();\n    void insert(string word) {\n        TrieNode* node = root;\n        for (char c : word) {\n            if (!node->children[c]) node->children[c] = new TrieNode();\n            node = node->children[c];\n        }\n        node->is_end = true;\n    }\n};\n```\nBasic Trie implementation."
  },
  {
    "question": "[608] Solve a backtracking problem. Code in C++.",
    "answer": "```cpp\n#include <vector>\n#include <iostream>\nusing namespace std;\nvoid solve(vector<int>& nums, vector<int>& path) {\n    if (nums.empty()) {\n        for (int x : path) cout << x << \" \";\n        cout << endl;\n        return;\n    }\n    for (size_t i = 0; i < nums.size(); ++i) {\n        vector<int> nums2 = nums;\n        nums2.erase(nums2.begin() + i);\n        vector<int> path2 = path;\n        path2.push_back(nums[i]);\n        solve(nums2, path2);\n    }\n}\n```\nGenerates all permutations using backtracking."
  },
  {
    "question": "[609] Solve a stacks problem. Code in C++.",
    "answer": "```cpp\n#include <stack>\n#include <iostream>\nusing namespace std;\nstack<int> s;\ns.push(1);\ns.push(2);\ncout << s.top() << endl;\ns.pop();\n```\nImplements a stack using STL stack."
  },
  {
    "question": "[610] Solve a binary trees problem. Code in Python.",
    "answer": "```python\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef treeHeight(root):\n    if not root:\n        return 0\n    return 1 + max(treeHeight(root.left), treeHeight(root.right))\n```\nComputes the height of a binary tree."
  },
  {
    "question": "[611] Solve a stacks problem. Code in C++.",
    "answer": "```cpp\n#include <stack>\n#include <iostream>\nusing namespace std;\nstack<int> s;\ns.push(1);\ns.push(2);\ncout << s.top() << endl;\ns.pop();\n```\nImplements a stack using STL stack."
  },
  {
    "question": "[612] Solve a bit manipulation problem. Code in C++.",
    "answer": "```cpp\nint countSetBits(int n) {\n    int count = 0;\n    while (n) {\n        count += n & 1;\n        n >>= 1;\n    }\n    return count;\n}\n```\nCounts set bits in an integer."
  },
  {
    "question": "[613] Solve a arrays problem. Code in C++.",
    "answer": "```cpp\n#include <iostream>\nusing namespace std;\nint findMax(int arr[], int n) {\n    int maxVal = arr[0];\n    for(int i=1;i<n;i++)\n        if(arr[i]>maxVal) maxVal=arr[i];\n    return maxVal;\n}\n```\nFinds the maximum element in an array."
  },
  {
    "question": "[614] Solve a math problem. Code in Java.",
    "answer": "```java\npublic boolean isArmstrong(int n) {\n    int temp = n, digitCount = 0, sum = 0;\n    digitCount = (int)(Math.log10(n)) + 1;\n    while (temp != 0) {\n        int digit = temp % 10;\n        sum += Math.pow(digit, digitCount);\n        temp /= 10;\n    }\n    return n == sum;\n}\n```\nChecks if a number is an Armstrong number."
  },
  {
    "question": "[615] Solve a math problem. Code in Java.",
    "answer": "```java\npublic boolean isArmstrong(int n) {\n    int temp = n, digitCount = 0, sum = 0;\n    digitCount = (int)(Math.log10(n)) + 1;\n    while (temp != 0) {\n        int digit = temp % 10;\n        sum += Math.pow(digit, digitCount);\n        temp /= 10;\n    }\n    return n == sum;\n}\n```\nChecks if a number is an Armstrong number."
  },
  {
    "question": "[616] Solve a tries problem. Code in Python.",
    "answer": "```python\nclass TrieNode:\n    def __init__(self):\n        self.children = {}\n        self.is_end = False\nclass Trie:\n    def __init__(self):\n        self.root = TrieNode()\n    def insert(self, word):\n        node = self.root\n        for char in word:\n            if char not in node.children:\n                node.children[char] = TrieNode()\n            node = node.children[char]\n        node.is_end = True\n```\nBasic Trie implementation."
  },
  {
    "question": "[617] Solve a linked lists problem. Code in Java.",
    "answer": "```java\nclass ListNode {\n    int val;\n    ListNode next;\n    ListNode(int x) { val = x; }\n}\npublic ListNode reverseList(ListNode head) {\n    ListNode prev = null;\n    while (head != null) {\n        ListNode next = head.next;\n        head.next = prev;\n        prev = head;\n        head = next;\n    }\n    return prev;\n}\n```\nReverses a singly linked list."
  },
  {
    "question": "[618] Solve a dynamic programming problem. Code in C++.",
    "answer": "// Code for dynamic programming in C++ not available."
  },
  {
    "question": "[619] Solve a linked lists problem. Code in Java.",
    "answer": "```java\nclass ListNode {\n    int val;\n    ListNode next;\n    ListNode(int x) { val = x; }\n}\npublic ListNode reverseList(ListNode head) {\n    ListNode prev = null;\n    while (head != null) {\n        ListNode next = head.next;\n        head.next = prev;\n        prev = head;\n        head = next;\n    }\n    return prev;\n}\n```\nReverses a singly linked list."
  },
  {
    "question": "[620] Solve a linked lists problem. Code in Python.",
    "answer": "```python\nclass ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n\ndef reverseList(head):\n    prev = None\n    curr = head\n    while curr:\n        next_node = curr.next\n        curr.next = prev\n        prev = curr\n        curr = next_node\n    return prev\n```\nReverses a singly linked list."
  },
  {
    "question": "[621] Solve a searching problem. Code in Java.",
    "answer": "```java\npublic int binarySearch(int[] arr, int target) {\n    int left=0,right=arr.length-1;\n    while(left<=right){\n        int mid=left+(right-left)/2;\n        if(arr[mid]==target) return mid;\n        else if(arr[mid]<target) left=mid+1;\n        else right=mid-1;\n    }\n    return -1;\n}\n```\nPerforms binary search on a sorted array."
  },
  {
    "question": "[622] Solve a binary trees problem. Code in C++.",
    "answer": "```cpp\nstruct TreeNode {\n    int val;\n    TreeNode* left;\n    TreeNode* right;\n    TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n};\nint treeHeight(TreeNode* root) {\n    if (!root) return 0;\n    return 1 + max(treeHeight(root->left), treeHeight(root->right));\n}\n```\nComputes the height of a binary tree."
  },
  {
    "question": "[623] Solve a queues problem. Code in Python.",
    "answer": "```python\nfrom collections import deque\nq = deque()\nq.append(1)\nq.append(2)\nprint(q.popleft())\n```\nImplements a queue using deque."
  },
  {
    "question": "[624] Solve a arrays problem. Code in C++.",
    "answer": "```cpp\n#include <iostream>\nusing namespace std;\nint findMax(int arr[], int n) {\n    int maxVal = arr[0];\n    for(int i=1;i<n;i++)\n        if(arr[i]>maxVal) maxVal=arr[i];\n    return maxVal;\n}\n```\nFinds the maximum element in an array."
  },
  {
    "question": "[625] Solve a bit manipulation problem. Code in C++.",
    "answer": "```cpp\nint countSetBits(int n) {\n    int count = 0;\n    while (n) {\n        count += n & 1;\n        n >>= 1;\n    }\n    return count;\n}\n```\nCounts set bits in an integer."
  },
  {
    "question": "[626] Solve a dynamic programming problem. Code in Python.",
    "answer": "// Code for dynamic programming in Python not available."
  },
  {
    "question": "[627] Solve a bit manipulation problem. Code in Java.",
    "answer": "```java\npublic int countSetBits(int n) {\n    int count = 0;\n    while (n != 0) {\n        count += n & 1;\n        n >>= 1;\n    }\n    return count;\n}\n```\nCounts set bits in an integer."
  },
  {
    "question": "[628] Solve a sorting problem. Code in C++.",
    "answer": "```cpp\nvoid bubbleSort(int arr[], int n) {\n    for(int i=0;i<n-1;i++)\n        for(int j=0;j<n-i-1;j++)\n            if(arr[j]>arr[j+1]) swap(arr[j],arr[j+1]);\n}\n```\nSorts an array using bubble sort."
  },
  {
    "question": "[629] Solve a bit manipulation problem. Code in Python.",
    "answer": "```python\ndef count_set_bits(n):\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n```\nCounts set bits in an integer."
  },
  {
    "question": "[630] Solve a math problem. Code in Python.",
    "answer": "```python\ndef is_armstrong(n):\n    digits = [int(d) for d in str(n)]\n    power = len(digits)\n    return n == sum([d**power for d in digits])\n```\nChecks if a number is an Armstrong number."
  },
  {
    "question": "[631] Solve a number theory problem. Code in Java.",
    "answer": "```java\npublic boolean isPrime(int n) {\n    if (n < 2) return false;\n    for (int i = 2; i * i <= n; i++)\n        if (n % i == 0) return false;\n    return true;\n}\n```\nChecks if a number is prime."
  },
  {
    "question": "[632] Solve a strings problem. Code in Python.",
    "answer": "```python\ndef reverse_string(s):\n    return s[::-1]\n```\nReverses a string."
  },
  {
    "question": "[633] Solve a recursion problem. Code in C++.",
    "answer": "```cpp\nint factorial(int n) {\n    if (n == 0) return 1;\n    return n * factorial(n-1);\n}\n```\nCalculates factorial using recursion."
  },
  {
    "question": "[634] Solve a linked lists problem. Code in Java.",
    "answer": "```java\nclass ListNode {\n    int val;\n    ListNode next;\n    ListNode(int x) { val = x; }\n}\npublic ListNode reverseList(ListNode head) {\n    ListNode prev = null;\n    while (head != null) {\n        ListNode next = head.next;\n        head.next = prev;\n        prev = head;\n        head = next;\n    }\n    return prev;\n}\n```\nReverses a singly linked list."
  },
  {
    "question": "[635] Solve a searching problem. Code in C++.",
    "answer": "```cpp\nint binarySearch(int arr[], int n, int target) {\n    int left=0,right=n-1;\n    while(left<=right){\n        int mid=left+(right-left)/2;\n        if(arr[mid]==target) return mid;\n        else if(arr[mid]<target) left=mid+1;\n        else right=mid-1;\n    }\n    return -1;\n}\n```\nPerforms binary search on a sorted array."
  },
  {
    "question": "[636] Solve a bit manipulation problem. Code in Python.",
    "answer": "```python\ndef count_set_bits(n):\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n```\nCounts set bits in an integer."
  },
  {
    "question": "[637] Solve a greedy problem. Code in C++.",
    "answer": "```cpp\n#include <vector>\n#include <algorithm>\nusing namespace std;\nvector<pair<int,int>> activitySelection(vector<pair<int,int>>& activities) {\n    sort(activities.begin(), activities.end(), [](auto &a, auto &b){ return a.second < b.second; });\n    vector<pair<int,int>> res;\n    res.push_back(activities[0]);\n    for (size_t i = 1; i < activities.size(); ++i) {\n        if (activities[i].first >= res.back().second)\n            res.push_back(activities[i]);\n    }\n    return res;\n}\n```\nSelects maximum number of non-overlapping activities."
  },
  {
    "question": "[638] Solve a linked lists problem. Code in Python.",
    "answer": "```python\nclass ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n\ndef reverseList(head):\n    prev = None\n    curr = head\n    while curr:\n        next_node = curr.next\n        curr.next = prev\n        prev = curr\n        curr = next_node\n    return prev\n```\nReverses a singly linked list."
  },
  {
    "question": "[639] Solve a heaps problem. Code in Python.",
    "answer": "```python\nimport heapq\nh = []\nheapq.heappush(h, 3)\nheapq.heappush(h, 1)\nheapq.heappush(h, 2)\nprint(heapq.heappop(h))\n```\nImplements a min-heap using heapq."
  },
  {
    "question": "[640] Solve a strings problem. Code in Python.",
    "answer": "```python\ndef reverse_string(s):\n    return s[::-1]\n```\nReverses a string."
  },
  {
    "question": "[641] Solve a number theory problem. Code in C++.",
    "answer": "```cpp\nbool isPrime(int n) {\n    if (n < 2) return false;\n    for (int i = 2; i * i <= n; ++i)\n        if (n % i == 0) return false;\n    return true;\n}\n```\nChecks if a number is prime."
  },
  {
    "question": "[642] Solve a queues problem. Code in Java.",
    "answer": "```java\nimport java.util.*;\nQueue<Integer> q = new LinkedList<>();\nq.add(1);\nq.add(2);\nSystem.out.println(q.poll());\n```\nImplements a queue using LinkedList."
  },
  {
    "question": "[643] Solve a math problem. Code in Python.",
    "answer": "```python\ndef is_armstrong(n):\n    digits = [int(d) for d in str(n)]\n    power = len(digits)\n    return n == sum([d**power for d in digits])\n```\nChecks if a number is an Armstrong number."
  },
  {
    "question": "[644] Solve a queues problem. Code in Python.",
    "answer": "```python\nfrom collections import deque\nq = deque()\nq.append(1)\nq.append(2)\nprint(q.popleft())\n```\nImplements a queue using deque."
  },
  {
    "question": "[645] Solve a strings problem. Code in Java.",
    "answer": "```java\npublic String reverseString(String s) {\n    return new StringBuilder(s).reverse().toString();\n}\n```\nReverses a string."
  },
  {
    "question": "[646] Solve a strings problem. Code in Python.",
    "answer": "```python\ndef reverse_string(s):\n    return s[::-1]\n```\nReverses a string."
  },
  {
    "question": "[647] Solve a recursion problem. Code in C++.",
    "answer": "```cpp\nint factorial(int n) {\n    if (n == 0) return 1;\n    return n * factorial(n-1);\n}\n```\nCalculates factorial using recursion."
  },
  {
    "question": "[648] Solve a hashing problem. Code in Java.",
    "answer": "```java\nimport java.util.*;\nMap<String, Integer> hashMap = new HashMap<>();\nhashMap.put(\"a\", 1);\nSystem.out.println(hashMap.get(\"a\"));\n```\nImplements a hash map using HashMap."
  },
  {
    "question": "[649] Solve a queues problem. Code in Python.",
    "answer": "```python\nfrom collections import deque\nq = deque()\nq.append(1)\nq.append(2)\nprint(q.popleft())\n```\nImplements a queue using deque."
  },
  {
    "question": "[650] Solve a backtracking problem. Code in Java.",
    "answer": "```java\npublic void solve(List<Integer> nums, List<Integer> path) {\n    if (nums.isEmpty()) {\n        System.out.println(path);\n        return;\n    }\n    for (int i = 0; i < nums.size(); i++) {\n        List<Integer> nums2 = new ArrayList<>(nums);\n        nums2.remove(i);\n        List<Integer> path2 = new ArrayList<>(path);\n        path2.add(nums.get(i));\n        solve(nums2, path2);\n    }\n}\n```\nGenerates all permutations using backtracking."
  },
  {
    "question": "[651] Solve a sorting problem. Code in Python.",
    "answer": "```python\ndef bubble_sort(arr):\n    n = len(arr)\n    for i in range(n):\n        for j in range(0, n-i-1):\n            if arr[j] > arr[j+1]:\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n    return arr\n```\nSorts an array using bubble sort."
  },
  {
    "question": "[652] Solve a searching problem. Code in C++.",
    "answer": "```cpp\nint binarySearch(int arr[], int n, int target) {\n    int left=0,right=n-1;\n    while(left<=right){\n        int mid=left+(right-left)/2;\n        if(arr[mid]==target) return mid;\n        else if(arr[mid]<target) left=mid+1;\n        else right=mid-1;\n    }\n    return -1;\n}\n```\nPerforms binary search on a sorted array."
  },
  {
    "question": "[653] Solve a geometry problem. Code in C++.",
    "answer": "```cpp\n#include <cmath>\ndouble areaOfCircle(double r) {\n    return M_PI * r * r;\n}\n```\nCalculates area of a circle."
  },
  {
    "question": "[654] Solve a dynamic programming problem. Code in Python.",
    "answer": "// Code for dynamic programming in Python not available."
  },
  {
    "question": "[655] Solve a tries problem. Code in Python.",
    "answer": "```python\nclass TrieNode:\n    def __init__(self):\n        self.children = {}\n        self.is_end = False\nclass Trie:\n    def __init__(self):\n        self.root = TrieNode()\n    def insert(self, word):\n        node = self.root\n        for char in word:\n            if char not in node.children:\n                node.children[char] = TrieNode()\n            node = node.children[char]\n        node.is_end = True\n```\nBasic Trie implementation."
  },
  {
    "question": "[656] Solve a geometry problem. Code in C++.",
    "answer": "```cpp\n#include <cmath>\ndouble areaOfCircle(double r) {\n    return M_PI * r * r;\n}\n```\nCalculates area of a circle."
  },
  {
    "question": "[657] Solve a recursion problem. Code in Python.",
    "answer": "```python\ndef factorial(n):\n    if n == 0:\n        return 1\n    return n * factorial(n-1)\n```\nCalculates factorial using recursion."
  },
  {
    "question": "[658] Solve a graphs problem. Code in Java.",
    "answer": "// Code for graphs in Java not available."
  },
  {
    "question": "[659] Solve a greedy problem. Code in Java.",
    "answer": "```java\nimport java.util.*;\npublic List<int[]> activitySelection(List<int[]> activities) {\n    activities.sort(Comparator.comparingInt(a -> a[1]));\n    List<int[]> res = new ArrayList<>();\n    res.add(activities.get(0));\n    for (int i = 1; i < activities.size(); i++) {\n        if (activities.get(i)[0] >= res.get(res.size()-1)[1])\n            res.add(activities.get(i));\n    }\n    return res;\n}\n```\nSelects maximum number of non-overlapping activities."
  },
  {
    "question": "[660] Solve a binary trees problem. Code in Python.",
    "answer": "```python\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef treeHeight(root):\n    if not root:\n        return 0\n    return 1 + max(treeHeight(root.left), treeHeight(root.right))\n```\nComputes the height of a binary tree."
  },
  {
    "question": "[661] Solve a dynamic programming problem. Code in C++.",
    "answer": "// Code for dynamic programming in C++ not available."
  },
  {
    "question": "[662] Solve a queues problem. Code in C++.",
    "answer": "```cpp\n#include <queue>\n#include <iostream>\nusing namespace std;\nqueue<int> q;\nq.push(1);\nq.push(2);\ncout << q.front() << endl;\nq.pop();\n```\nImplements a queue using STL queue."
  },
  {
    "question": "[663] Solve a binary trees problem. Code in Python.",
    "answer": "```python\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef treeHeight(root):\n    if not root:\n        return 0\n    return 1 + max(treeHeight(root.left), treeHeight(root.right))\n```\nComputes the height of a binary tree."
  },
  {
    "question": "[664] Solve a queues problem. Code in Java.",
    "answer": "```java\nimport java.util.*;\nQueue<Integer> q = new LinkedList<>();\nq.add(1);\nq.add(2);\nSystem.out.println(q.poll());\n```\nImplements a queue using LinkedList."
  },
  {
    "question": "[665] Solve a strings problem. Code in Python.",
    "answer": "```python\ndef reverse_string(s):\n    return s[::-1]\n```\nReverses a string."
  },
  {
    "question": "[666] Solve a searching problem. Code in Java.",
    "answer": "```java\npublic int binarySearch(int[] arr, int target) {\n    int left=0,right=arr.length-1;\n    while(left<=right){\n        int mid=left+(right-left)/2;\n        if(arr[mid]==target) return mid;\n        else if(arr[mid]<target) left=mid+1;\n        else right=mid-1;\n    }\n    return -1;\n}\n```\nPerforms binary search on a sorted array."
  },
  {
    "question": "[667] Solve a heaps problem. Code in C++.",
    "answer": "```cpp\n#include <queue>\n#include <vector>\n#include <iostream>\nusing namespace std;\npriority_queue<int, vector<int>, greater<int>> h;\nh.push(3);\nh.push(1);\nh.push(2);\ncout << h.top() << endl;\nh.pop();\n```\nImplements a min-heap using STL priority_queue."
  },
  {
    "question": "[668] Solve a arrays problem. Code in Java.",
    "answer": "```java\npublic int findMax(int[] arr) {\n    int maxVal = arr[0];\n    for(int i=1;i<arr.length;i++)\n        if(arr[i]>maxVal) maxVal=arr[i];\n    return maxVal;\n}\n```\nFinds the maximum element in an array."
  },
  {
    "question": "[669] Solve a graphs problem. Code in Java.",
    "answer": "// Code for graphs in Java not available."
  },
  {
    "question": "[670] Solve a hashing problem. Code in C++.",
    "answer": "```cpp\n#include <unordered_map>\n#include <iostream>\nusing namespace std;\nunordered_map<string, int> hash_map;\nhash_map[\"a\"] = 1;\ncout << hash_map[\"a\"] << endl;\n```\nImplements a hash map using unordered_map."
  },
  {
    "question": "[671] Solve a recursion problem. Code in Python.",
    "answer": "```python\ndef factorial(n):\n    if n == 0:\n        return 1\n    return n * factorial(n-1)\n```\nCalculates factorial using recursion."
  },
  {
    "question": "[672] Solve a number theory problem. Code in C++.",
    "answer": "```cpp\nbool isPrime(int n) {\n    if (n < 2) return false;\n    for (int i = 2; i * i <= n; ++i)\n        if (n % i == 0) return false;\n    return true;\n}\n```\nChecks if a number is prime."
  },
  {
    "question": "[673] Solve a graphs problem. Code in C++.",
    "answer": "// Code for graphs in C++ not available."
  },
  {
    "question": "[674] Solve a dynamic programming problem. Code in Java.",
    "answer": "// Code for dynamic programming in Java not available."
  },
  {
    "question": "[675] Solve a math problem. Code in C++.",
    "answer": "```cpp\n#include <cmath>\nbool isArmstrong(int n) {\n    int temp = n, digitCount = 0, sum = 0;\n    digitCount = (int)(log10(n)) + 1;\n    while (temp != 0) {\n        int digit = temp % 10;\n        sum += pow(digit, digitCount);\n        temp /= 10;\n    }\n    return n == sum;\n}\n```\nChecks if a number is an Armstrong number."
  },
  {
    "question": "[676] Solve a queues problem. Code in Python.",
    "answer": "```python\nfrom collections import deque\nq = deque()\nq.append(1)\nq.append(2)\nprint(q.popleft())\n```\nImplements a queue using deque."
  },
  {
    "question": "[677] Solve a heaps problem. Code in Python.",
    "answer": "```python\nimport heapq\nh = []\nheapq.heappush(h, 3)\nheapq.heappush(h, 1)\nheapq.heappush(h, 2)\nprint(heapq.heappop(h))\n```\nImplements a min-heap using heapq."
  },
  {
    "question": "[678] Solve a geometry problem. Code in Python.",
    "answer": "```python\ndef area_of_circle(r):\n    import math\n    return math.pi * r * r\n```\nCalculates area of a circle."
  },
  {
    "question": "[679] Solve a hashing problem. Code in Python.",
    "answer": "```python\nhash_map = {}\nhash_map['a'] = 1\nprint(hash_map['a'])\n```\nImplements a hash map using dict."
  },
  {
    "question": "[680] Solve a sorting problem. Code in Java.",
    "answer": "```java\npublic void bubbleSort(int[] arr) {\n    int n = arr.length;\n    for(int i=0;i<n-1;i++)\n        for(int j=0;j<n-i-1;j++)\n            if(arr[j]>arr[j+1]) {\n                int temp=arr[j];arr[j]=arr[j+1];arr[j+1]=temp;\n            }\n}\n```\nSorts an array using bubble sort."
  },
  {
    "question": "[681] Solve a bit manipulation problem. Code in C++.",
    "answer": "```cpp\nint countSetBits(int n) {\n    int count = 0;\n    while (n) {\n        count += n & 1;\n        n >>= 1;\n    }\n    return count;\n}\n```\nCounts set bits in an integer."
  },
  {
    "question": "[682] Solve a geometry problem. Code in C++.",
    "answer": "```cpp\n#include <cmath>\ndouble areaOfCircle(double r) {\n    return M_PI * r * r;\n}\n```\nCalculates area of a circle."
  },
  {
    "question": "[683] Solve a recursion problem. Code in Java.",
    "answer": "```java\npublic int factorial(int n) {\n    if (n == 0) return 1;\n    return n * factorial(n-1);\n}\n```\nCalculates factorial using recursion."
  },
  {
    "question": "[684] Solve a math problem. Code in Python.",
    "answer": "```python\ndef is_armstrong(n):\n    digits = [int(d) for d in str(n)]\n    power = len(digits)\n    return n == sum([d**power for d in digits])\n```\nChecks if a number is an Armstrong number."
  },
  {
    "question": "[685] Solve a strings problem. Code in Java.",
    "answer": "```java\npublic String reverseString(String s) {\n    return new StringBuilder(s).reverse().toString();\n}\n```\nReverses a string."
  },
  {
    "question": "[686] Solve a linked lists problem. Code in Python.",
    "answer": "```python\nclass ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n\ndef reverseList(head):\n    prev = None\n    curr = head\n    while curr:\n        next_node = curr.next\n        curr.next = prev\n        prev = curr\n        curr = next_node\n    return prev\n```\nReverses a singly linked list."
  },
  {
    "question": "[687] Solve a recursion problem. Code in C++.",
    "answer": "```cpp\nint factorial(int n) {\n    if (n == 0) return 1;\n    return n * factorial(n-1);\n}\n```\nCalculates factorial using recursion."
  },
  {
    "question": "[688] Solve a searching problem. Code in Python.",
    "answer": "```python\ndef binary_search(arr, target):\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1\n```\nPerforms binary search on a sorted array."
  },
  {
    "question": "[689] Solve a backtracking problem. Code in Java.",
    "answer": "```java\npublic void solve(List<Integer> nums, List<Integer> path) {\n    if (nums.isEmpty()) {\n        System.out.println(path);\n        return;\n    }\n    for (int i = 0; i < nums.size(); i++) {\n        List<Integer> nums2 = new ArrayList<>(nums);\n        nums2.remove(i);\n        List<Integer> path2 = new ArrayList<>(path);\n        path2.add(nums.get(i));\n        solve(nums2, path2);\n    }\n}\n```\nGenerates all permutations using backtracking."
  },
  {
    "question": "[690] Solve a arrays problem. Code in C++.",
    "answer": "```cpp\n#include <iostream>\nusing namespace std;\nint findMax(int arr[], int n) {\n    int maxVal = arr[0];\n    for(int i=1;i<n;i++)\n        if(arr[i]>maxVal) maxVal=arr[i];\n    return maxVal;\n}\n```\nFinds the maximum element in an array."
  },
  {
    "question": "[691] Solve a linked lists problem. Code in C++.",
    "answer": "```cpp\nstruct ListNode {\n    int val;\n    ListNode* next;\n    ListNode(int x) : val(x), next(nullptr) {}\n};\nListNode* reverseList(ListNode* head) {\n    ListNode* prev = nullptr;\n    while (head) {\n        ListNode* next = head->next;\n        head->next = prev;\n        prev = head;\n        head = next;\n    }\n    return prev;\n}\n```\nReverses a singly linked list."
  },
  {
    "question": "[692] Solve a number theory problem. Code in Java.",
    "answer": "```java\npublic boolean isPrime(int n) {\n    if (n < 2) return false;\n    for (int i = 2; i * i <= n; i++)\n        if (n % i == 0) return false;\n    return true;\n}\n```\nChecks if a number is prime."
  },
  {
    "question": "[693] Solve a hashing problem. Code in Java.",
    "answer": "```java\nimport java.util.*;\nMap<String, Integer> hashMap = new HashMap<>();\nhashMap.put(\"a\", 1);\nSystem.out.println(hashMap.get(\"a\"));\n```\nImplements a hash map using HashMap."
  },
  {
    "question": "[694] Solve a recursion problem. Code in Java.",
    "answer": "```java\npublic int factorial(int n) {\n    if (n == 0) return 1;\n    return n * factorial(n-1);\n}\n```\nCalculates factorial using recursion."
  },
  {
    "question": "[695] Solve a recursion problem. Code in C++.",
    "answer": "```cpp\nint factorial(int n) {\n    if (n == 0) return 1;\n    return n * factorial(n-1);\n}\n```\nCalculates factorial using recursion."
  },
  {
    "question": "[696] Solve a heaps problem. Code in Java.",
    "answer": "```java\nimport java.util.*;\nPriorityQueue<Integer> h = new PriorityQueue<>();\nh.add(3);\nh.add(1);\nh.add(2);\nSystem.out.println(h.poll());\n```\nImplements a min-heap using PriorityQueue."
  },
  {
    "question": "[697] Solve a linked lists problem. Code in Python.",
    "answer": "```python\nclass ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n\ndef reverseList(head):\n    prev = None\n    curr = head\n    while curr:\n        next_node = curr.next\n        curr.next = prev\n        prev = curr\n        curr = next_node\n    return prev\n```\nReverses a singly linked list."
  },
  {
    "question": "[698] Solve a binary trees problem. Code in C++.",
    "answer": "```cpp\nstruct TreeNode {\n    int val;\n    TreeNode* left;\n    TreeNode* right;\n    TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n};\nint treeHeight(TreeNode* root) {\n    if (!root) return 0;\n    return 1 + max(treeHeight(root->left), treeHeight(root->right));\n}\n```\nComputes the height of a binary tree."
  },
  {
    "question": "[699] Solve a backtracking problem. Code in Java.",
    "answer": "```java\npublic void solve(List<Integer> nums, List<Integer> path) {\n    if (nums.isEmpty()) {\n        System.out.println(path);\n        return;\n    }\n    for (int i = 0; i < nums.size(); i++) {\n        List<Integer> nums2 = new ArrayList<>(nums);\n        nums2.remove(i);\n        List<Integer> path2 = new ArrayList<>(path);\n        path2.add(nums.get(i));\n        solve(nums2, path2);\n    }\n}\n```\nGenerates all permutations using backtracking."
  },
  {
    "question": "[700] Solve a sorting problem. Code in Java.",
    "answer": "```java\npublic void bubbleSort(int[] arr) {\n    int n = arr.length;\n    for(int i=0;i<n-1;i++)\n        for(int j=0;j<n-i-1;j++)\n            if(arr[j]>arr[j+1]) {\n                int temp=arr[j];arr[j]=arr[j+1];arr[j+1]=temp;\n            }\n}\n```\nSorts an array using bubble sort."
  },
  {
    "question": "[701] Solve a greedy problem. Code in Python.",
    "answer": "```python\ndef activity_selection(activities):\n    activities.sort(key=lambda x: x[1])\n    res = [activities[0]]\n    for i in range(1, len(activities)):\n        if activities[i][0] >= res[-1][1]:\n            res.append(activities[i])\n    return res\n```\nSelects maximum number of non-overlapping activities."
  },
  {
    "question": "[702] Solve a geometry problem. Code in C++.",
    "answer": "```cpp\n#include <cmath>\ndouble areaOfCircle(double r) {\n    return M_PI * r * r;\n}\n```\nCalculates area of a circle."
  },
  {
    "question": "[703] Solve a searching problem. Code in C++.",
    "answer": "```cpp\nint binarySearch(int arr[], int n, int target) {\n    int left=0,right=n-1;\n    while(left<=right){\n        int mid=left+(right-left)/2;\n        if(arr[mid]==target) return mid;\n        else if(arr[mid]<target) left=mid+1;\n        else right=mid-1;\n    }\n    return -1;\n}\n```\nPerforms binary search on a sorted array."
  },
  {
    "question": "[704] Solve a dynamic programming problem. Code in Java.",
    "answer": "// Code for dynamic programming in Java not available."
  },
  {
    "question": "[705] Solve a number theory problem. Code in Python.",
    "answer": "```python\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True\n```\nChecks if a number is prime."
  },
  {
    "question": "[706] Solve a hashing problem. Code in Python.",
    "answer": "```python\nhash_map = {}\nhash_map['a'] = 1\nprint(hash_map['a'])\n```\nImplements a hash map using dict."
  },
  {
    "question": "[707] Solve a hashing problem. Code in C++.",
    "answer": "```cpp\n#include <unordered_map>\n#include <iostream>\nusing namespace std;\nunordered_map<string, int> hash_map;\nhash_map[\"a\"] = 1;\ncout << hash_map[\"a\"] << endl;\n```\nImplements a hash map using unordered_map."
  },
  {
    "question": "[708] Solve a linked lists problem. Code in Python.",
    "answer": "```python\nclass ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n\ndef reverseList(head):\n    prev = None\n    curr = head\n    while curr:\n        next_node = curr.next\n        curr.next = prev\n        prev = curr\n        curr = next_node\n    return prev\n```\nReverses a singly linked list."
  },
  {
    "question": "[709] Solve a strings problem. Code in Java.",
    "answer": "```java\npublic String reverseString(String s) {\n    return new StringBuilder(s).reverse().toString();\n}\n```\nReverses a string."
  },
  {
    "question": "[710] Solve a recursion problem. Code in C++.",
    "answer": "```cpp\nint factorial(int n) {\n    if (n == 0) return 1;\n    return n * factorial(n-1);\n}\n```\nCalculates factorial using recursion."
  },
  {
    "question": "[711] Solve a graphs problem. Code in C++.",
    "answer": "// Code for graphs in C++ not available."
  },
  {
    "question": "[712] Solve a binary trees problem. Code in C++.",
    "answer": "```cpp\nstruct TreeNode {\n    int val;\n    TreeNode* left;\n    TreeNode* right;\n    TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n};\nint treeHeight(TreeNode* root) {\n    if (!root) return 0;\n    return 1 + max(treeHeight(root->left), treeHeight(root->right));\n}\n```\nComputes the height of a binary tree."
  },
  {
    "question": "[713] Solve a sorting problem. Code in C++.",
    "answer": "```cpp\nvoid bubbleSort(int arr[], int n) {\n    for(int i=0;i<n-1;i++)\n        for(int j=0;j<n-i-1;j++)\n            if(arr[j]>arr[j+1]) swap(arr[j],arr[j+1]);\n}\n```\nSorts an array using bubble sort."
  },
  {
    "question": "[714] Solve a backtracking problem. Code in C++.",
    "answer": "```cpp\n#include <vector>\n#include <iostream>\nusing namespace std;\nvoid solve(vector<int>& nums, vector<int>& path) {\n    if (nums.empty()) {\n        for (int x : path) cout << x << \" \";\n        cout << endl;\n        return;\n    }\n    for (size_t i = 0; i < nums.size(); ++i) {\n        vector<int> nums2 = nums;\n        nums2.erase(nums2.begin() + i);\n        vector<int> path2 = path;\n        path2.push_back(nums[i]);\n        solve(nums2, path2);\n    }\n}\n```\nGenerates all permutations using backtracking."
  },
  {
    "question": "[715] Solve a graphs problem. Code in Python.",
    "answer": "// Code for graphs in Python not available."
  },
  {
    "question": "[716] Solve a sorting problem. Code in C++.",
    "answer": "```cpp\nvoid bubbleSort(int arr[], int n) {\n    for(int i=0;i<n-1;i++)\n        for(int j=0;j<n-i-1;j++)\n            if(arr[j]>arr[j+1]) swap(arr[j],arr[j+1]);\n}\n```\nSorts an array using bubble sort."
  },
  {
    "question": "[717] Solve a hashing problem. Code in C++.",
    "answer": "```cpp\n#include <unordered_map>\n#include <iostream>\nusing namespace std;\nunordered_map<string, int> hash_map;\nhash_map[\"a\"] = 1;\ncout << hash_map[\"a\"] << endl;\n```\nImplements a hash map using unordered_map."
  },
  {
    "question": "[718] Solve a searching problem. Code in Python.",
    "answer": "```python\ndef binary_search(arr, target):\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1\n```\nPerforms binary search on a sorted array."
  },
  {
    "question": "[719] Solve a stacks problem. Code in Java.",
    "answer": "```java\nimport java.util.*;\nStack<Integer> stack = new Stack<>();\nstack.push(1);\nstack.push(2);\nSystem.out.println(stack.pop());\n```\nImplements a stack using Stack class."
  },
  {
    "question": "[720] Solve a linked lists problem. Code in Java.",
    "answer": "```java\nclass ListNode {\n    int val;\n    ListNode next;\n    ListNode(int x) { val = x; }\n}\npublic ListNode reverseList(ListNode head) {\n    ListNode prev = null;\n    while (head != null) {\n        ListNode next = head.next;\n        head.next = prev;\n        prev = head;\n        head = next;\n    }\n    return prev;\n}\n```\nReverses a singly linked list."
  },
  {
    "question": "[721] Solve a stacks problem. Code in C++.",
    "answer": "```cpp\n#include <stack>\n#include <iostream>\nusing namespace std;\nstack<int> s;\ns.push(1);\ns.push(2);\ncout << s.top() << endl;\ns.pop();\n```\nImplements a stack using STL stack."
  },
  {
    "question": "[722] Solve a math problem. Code in C++.",
    "answer": "```cpp\n#include <cmath>\nbool isArmstrong(int n) {\n    int temp = n, digitCount = 0, sum = 0;\n    digitCount = (int)(log10(n)) + 1;\n    while (temp != 0) {\n        int digit = temp % 10;\n        sum += pow(digit, digitCount);\n        temp /= 10;\n    }\n    return n == sum;\n}\n```\nChecks if a number is an Armstrong number."
  },
  {
    "question": "[723] Solve a sorting problem. Code in Python.",
    "answer": "```python\ndef bubble_sort(arr):\n    n = len(arr)\n    for i in range(n):\n        for j in range(0, n-i-1):\n            if arr[j] > arr[j+1]:\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n    return arr\n```\nSorts an array using bubble sort."
  },
  {
    "question": "[724] Solve a backtracking problem. Code in Python.",
    "answer": "```python\ndef solve(nums, path):\n    if not nums:\n        print(path)\n        return\n    for i in range(len(nums)):\n        solve(nums[:i]+nums[i+1:], path+[nums[i]])\n```\nGenerates all permutations using backtracking."
  },
  {
    "question": "[725] Solve a queues problem. Code in Python.",
    "answer": "```python\nfrom collections import deque\nq = deque()\nq.append(1)\nq.append(2)\nprint(q.popleft())\n```\nImplements a queue using deque."
  },
  {
    "question": "[726] Solve a recursion problem. Code in Java.",
    "answer": "```java\npublic int factorial(int n) {\n    if (n == 0) return 1;\n    return n * factorial(n-1);\n}\n```\nCalculates factorial using recursion."
  },
  {
    "question": "[727] Solve a arrays problem. Code in Java.",
    "answer": "```java\npublic int findMax(int[] arr) {\n    int maxVal = arr[0];\n    for(int i=1;i<arr.length;i++)\n        if(arr[i]>maxVal) maxVal=arr[i];\n    return maxVal;\n}\n```\nFinds the maximum element in an array."
  },
  {
    "question": "[728] Solve a geometry problem. Code in Python.",
    "answer": "```python\ndef area_of_circle(r):\n    import math\n    return math.pi * r * r\n```\nCalculates area of a circle."
  },
  {
    "question": "[729] Solve a number theory problem. Code in Java.",
    "answer": "```java\npublic boolean isPrime(int n) {\n    if (n < 2) return false;\n    for (int i = 2; i * i <= n; i++)\n        if (n % i == 0) return false;\n    return true;\n}\n```\nChecks if a number is prime."
  },
  {
    "question": "[730] Solve a recursion problem. Code in C++.",
    "answer": "```cpp\nint factorial(int n) {\n    if (n == 0) return 1;\n    return n * factorial(n-1);\n}\n```\nCalculates factorial using recursion."
  },
  {
    "question": "[731] Solve a bit manipulation problem. Code in C++.",
    "answer": "```cpp\nint countSetBits(int n) {\n    int count = 0;\n    while (n) {\n        count += n & 1;\n        n >>= 1;\n    }\n    return count;\n}\n```\nCounts set bits in an integer."
  },
  {
    "question": "[732] Solve a dynamic programming problem. Code in C++.",
    "answer": "// Code for dynamic programming in C++ not available."
  },
  {
    "question": "[733] Solve a tries problem. Code in Python.",
    "answer": "```python\nclass TrieNode:\n    def __init__(self):\n        self.children = {}\n        self.is_end = False\nclass Trie:\n    def __init__(self):\n        self.root = TrieNode()\n    def insert(self, word):\n        node = self.root\n        for char in word:\n            if char not in node.children:\n                node.children[char] = TrieNode()\n            node = node.children[char]\n        node.is_end = True\n```\nBasic Trie implementation."
  },
  {
    "question": "[734] Solve a heaps problem. Code in Python.",
    "answer": "```python\nimport heapq\nh = []\nheapq.heappush(h, 3)\nheapq.heappush(h, 1)\nheapq.heappush(h, 2)\nprint(heapq.heappop(h))\n```\nImplements a min-heap using heapq."
  },
  {
    "question": "[735] Solve a stacks problem. Code in Java.",
    "answer": "```java\nimport java.util.*;\nStack<Integer> stack = new Stack<>();\nstack.push(1);\nstack.push(2);\nSystem.out.println(stack.pop());\n```\nImplements a stack using Stack class."
  },
  {
    "question": "[736] Solve a hashing problem. Code in Java.",
    "answer": "```java\nimport java.util.*;\nMap<String, Integer> hashMap = new HashMap<>();\nhashMap.put(\"a\", 1);\nSystem.out.println(hashMap.get(\"a\"));\n```\nImplements a hash map using HashMap."
  },
  {
    "question": "[737] Solve a tries problem. Code in Java.",
    "answer": "```java\nclass TrieNode {\n    Map<Character, TrieNode> children = new HashMap<>();\n    boolean isEnd = false;\n}\nclass Trie {\n    TrieNode root = new TrieNode();\n    void insert(String word) {\n        TrieNode node = root;\n        for (char c : word.toCharArray()) {\n            node.children.putIfAbsent(c, new TrieNode());\n            node = node.children.get(c);\n        }\n        node.isEnd = true;\n    }\n}\n```\nBasic Trie implementation."
  },
  {
    "question": "[738] Solve a dynamic programming problem. Code in Python.",
    "answer": "// Code for dynamic programming in Python not available."
  },
  {
    "question": "[739] Solve a recursion problem. Code in Python.",
    "answer": "```python\ndef factorial(n):\n    if n == 0:\n        return 1\n    return n * factorial(n-1)\n```\nCalculates factorial using recursion."
  },
  {
    "question": "[740] Solve a bit manipulation problem. Code in C++.",
    "answer": "```cpp\nint countSetBits(int n) {\n    int count = 0;\n    while (n) {\n        count += n & 1;\n        n >>= 1;\n    }\n    return count;\n}\n```\nCounts set bits in an integer."
  },
  {
    "question": "[741] Solve a dynamic programming problem. Code in Python.",
    "answer": "// Code for dynamic programming in Python not available."
  },
  {
    "question": "[742] Solve a stacks problem. Code in Python.",
    "answer": "```python\nstack = []\nstack.append(1)\nstack.append(2)\nprint(stack.pop())\n```\nImplements a stack using list."
  },
  {
    "question": "[743] Solve a dynamic programming problem. Code in Python.",
    "answer": "// Code for dynamic programming in Python not available."
  },
  {
    "question": "[744] Solve a number theory problem. Code in C++.",
    "answer": "```cpp\nbool isPrime(int n) {\n    if (n < 2) return false;\n    for (int i = 2; i * i <= n; ++i)\n        if (n % i == 0) return false;\n    return true;\n}\n```\nChecks if a number is prime."
  },
  {
    "question": "[745] Solve a heaps problem. Code in Python.",
    "answer": "```python\nimport heapq\nh = []\nheapq.heappush(h, 3)\nheapq.heappush(h, 1)\nheapq.heappush(h, 2)\nprint(heapq.heappop(h))\n```\nImplements a min-heap using heapq."
  },
  {
    "question": "[746] Solve a linked lists problem. Code in C++.",
    "answer": "```cpp\nstruct ListNode {\n    int val;\n    ListNode* next;\n    ListNode(int x) : val(x), next(nullptr) {}\n};\nListNode* reverseList(ListNode* head) {\n    ListNode* prev = nullptr;\n    while (head) {\n        ListNode* next = head->next;\n        head->next = prev;\n        prev = head;\n        head = next;\n    }\n    return prev;\n}\n```\nReverses a singly linked list."
  },
  {
    "question": "[747] Solve a linked lists problem. Code in C++.",
    "answer": "```cpp\nstruct ListNode {\n    int val;\n    ListNode* next;\n    ListNode(int x) : val(x), next(nullptr) {}\n};\nListNode* reverseList(ListNode* head) {\n    ListNode* prev = nullptr;\n    while (head) {\n        ListNode* next = head->next;\n        head->next = prev;\n        prev = head;\n        head = next;\n    }\n    return prev;\n}\n```\nReverses a singly linked list."
  },
  {
    "question": "[748] Solve a searching problem. Code in Java.",
    "answer": "```java\npublic int binarySearch(int[] arr, int target) {\n    int left=0,right=arr.length-1;\n    while(left<=right){\n        int mid=left+(right-left)/2;\n        if(arr[mid]==target) return mid;\n        else if(arr[mid]<target) left=mid+1;\n        else right=mid-1;\n    }\n    return -1;\n}\n```\nPerforms binary search on a sorted array."
  },
  {
    "question": "[749] Solve a hashing problem. Code in C++.",
    "answer": "```cpp\n#include <unordered_map>\n#include <iostream>\nusing namespace std;\nunordered_map<string, int> hash_map;\nhash_map[\"a\"] = 1;\ncout << hash_map[\"a\"] << endl;\n```\nImplements a hash map using unordered_map."
  },
  {
    "question": "[750] Solve a geometry problem. Code in C++.",
    "answer": "```cpp\n#include <cmath>\ndouble areaOfCircle(double r) {\n    return M_PI * r * r;\n}\n```\nCalculates area of a circle."
  },
  {
    "question": "[751] Solve a dynamic programming problem. Code in C++.",
    "answer": "// Code for dynamic programming in C++ not available."
  },
  {
    "question": "[752] Solve a graphs problem. Code in Python.",
    "answer": "// Code for graphs in Python not available."
  },
  {
    "question": "[753] Solve a recursion problem. Code in Java.",
    "answer": "```java\npublic int factorial(int n) {\n    if (n == 0) return 1;\n    return n * factorial(n-1);\n}\n```\nCalculates factorial using recursion."
  },
  {
    "question": "[754] Solve a math problem. Code in Python.",
    "answer": "```python\ndef is_armstrong(n):\n    digits = [int(d) for d in str(n)]\n    power = len(digits)\n    return n == sum([d**power for d in digits])\n```\nChecks if a number is an Armstrong number."
  },
  {
    "question": "[755] Solve a linked lists problem. Code in Python.",
    "answer": "```python\nclass ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n\ndef reverseList(head):\n    prev = None\n    curr = head\n    while curr:\n        next_node = curr.next\n        curr.next = prev\n        prev = curr\n        curr = next_node\n    return prev\n```\nReverses a singly linked list."
  },
  {
    "question": "[756] Solve a binary trees problem. Code in Java.",
    "answer": "```java\nclass TreeNode {\n    int val;\n    TreeNode left, right;\n    TreeNode(int x) { val = x; }\n}\npublic int treeHeight(TreeNode root) {\n    if (root == null) return 0;\n    return 1 + Math.max(treeHeight(root.left), treeHeight(root.right));\n}\n```\nComputes the height of a binary tree."
  },
  {
    "question": "[757] Solve a greedy problem. Code in Java.",
    "answer": "```java\nimport java.util.*;\npublic List<int[]> activitySelection(List<int[]> activities) {\n    activities.sort(Comparator.comparingInt(a -> a[1]));\n    List<int[]> res = new ArrayList<>();\n    res.add(activities.get(0));\n    for (int i = 1; i < activities.size(); i++) {\n        if (activities.get(i)[0] >= res.get(res.size()-1)[1])\n            res.add(activities.get(i));\n    }\n    return res;\n}\n```\nSelects maximum number of non-overlapping activities."
  },
  {
    "question": "[758] Solve a strings problem. Code in Java.",
    "answer": "```java\npublic String reverseString(String s) {\n    return new StringBuilder(s).reverse().toString();\n}\n```\nReverses a string."
  },
  {
    "question": "[759] Solve a hashing problem. Code in Java.",
    "answer": "```java\nimport java.util.*;\nMap<String, Integer> hashMap = new HashMap<>();\nhashMap.put(\"a\", 1);\nSystem.out.println(hashMap.get(\"a\"));\n```\nImplements a hash map using HashMap."
  },
  {
    "question": "[760] Solve a arrays problem. Code in Python.",
    "answer": "```python\ndef find_max(arr):\n    return max(arr)\n```\nFinds the maximum element in an array."
  },
  {
    "question": "[761] Solve a heaps problem. Code in C++.",
    "answer": "```cpp\n#include <queue>\n#include <vector>\n#include <iostream>\nusing namespace std;\npriority_queue<int, vector<int>, greater<int>> h;\nh.push(3);\nh.push(1);\nh.push(2);\ncout << h.top() << endl;\nh.pop();\n```\nImplements a min-heap using STL priority_queue."
  },
  {
    "question": "[762] Solve a queues problem. Code in Java.",
    "answer": "```java\nimport java.util.*;\nQueue<Integer> q = new LinkedList<>();\nq.add(1);\nq.add(2);\nSystem.out.println(q.poll());\n```\nImplements a queue using LinkedList."
  },
  {
    "question": "[763] Solve a arrays problem. Code in Python.",
    "answer": "```python\ndef find_max(arr):\n    return max(arr)\n```\nFinds the maximum element in an array."
  },
  {
    "question": "[764] Solve a arrays problem. Code in Java.",
    "answer": "```java\npublic int findMax(int[] arr) {\n    int maxVal = arr[0];\n    for(int i=1;i<arr.length;i++)\n        if(arr[i]>maxVal) maxVal=arr[i];\n    return maxVal;\n}\n```\nFinds the maximum element in an array."
  },
  {
    "question": "[765] Solve a bit manipulation problem. Code in C++.",
    "answer": "```cpp\nint countSetBits(int n) {\n    int count = 0;\n    while (n) {\n        count += n & 1;\n        n >>= 1;\n    }\n    return count;\n}\n```\nCounts set bits in an integer."
  },
  {
    "question": "[766] Solve a graphs problem. Code in Python.",
    "answer": "// Code for graphs in Python not available."
  },
  {
    "question": "[767] Solve a graphs problem. Code in C++.",
    "answer": "// Code for graphs in C++ not available."
  },
  {
    "question": "[768] Solve a heaps problem. Code in C++.",
    "answer": "```cpp\n#include <queue>\n#include <vector>\n#include <iostream>\nusing namespace std;\npriority_queue<int, vector<int>, greater<int>> h;\nh.push(3);\nh.push(1);\nh.push(2);\ncout << h.top() << endl;\nh.pop();\n```\nImplements a min-heap using STL priority_queue."
  },
  {
    "question": "[769] Solve a queues problem. Code in C++.",
    "answer": "```cpp\n#include <queue>\n#include <iostream>\nusing namespace std;\nqueue<int> q;\nq.push(1);\nq.push(2);\ncout << q.front() << endl;\nq.pop();\n```\nImplements a queue using STL queue."
  },
  {
    "question": "[770] Solve a searching problem. Code in Java.",
    "answer": "```java\npublic int binarySearch(int[] arr, int target) {\n    int left=0,right=arr.length-1;\n    while(left<=right){\n        int mid=left+(right-left)/2;\n        if(arr[mid]==target) return mid;\n        else if(arr[mid]<target) left=mid+1;\n        else right=mid-1;\n    }\n    return -1;\n}\n```\nPerforms binary search on a sorted array."
  },
  {
    "question": "[771] Solve a sorting problem. Code in C++.",
    "answer": "```cpp\nvoid bubbleSort(int arr[], int n) {\n    for(int i=0;i<n-1;i++)\n        for(int j=0;j<n-i-1;j++)\n            if(arr[j]>arr[j+1]) swap(arr[j],arr[j+1]);\n}\n```\nSorts an array using bubble sort."
  },
  {
    "question": "[772] Solve a searching problem. Code in Python.",
    "answer": "```python\ndef binary_search(arr, target):\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1\n```\nPerforms binary search on a sorted array."
  },
  {
    "question": "[773] Solve a strings problem. Code in C++.",
    "answer": "```cpp\n#include <iostream>\n#include <algorithm>\nusing namespace std;\nstring reverseString(string s) {\n    reverse(s.begin(), s.end());\n    return s;\n}\n```\nReverses a string."
  },
  {
    "question": "[774] Solve a queues problem. Code in C++.",
    "answer": "```cpp\n#include <queue>\n#include <iostream>\nusing namespace std;\nqueue<int> q;\nq.push(1);\nq.push(2);\ncout << q.front() << endl;\nq.pop();\n```\nImplements a queue using STL queue."
  },
  {
    "question": "[775] Solve a dynamic programming problem. Code in C++.",
    "answer": "// Code for dynamic programming in C++ not available."
  },
  {
    "question": "[776] Solve a sorting problem. Code in Java.",
    "answer": "```java\npublic void bubbleSort(int[] arr) {\n    int n = arr.length;\n    for(int i=0;i<n-1;i++)\n        for(int j=0;j<n-i-1;j++)\n            if(arr[j]>arr[j+1]) {\n                int temp=arr[j];arr[j]=arr[j+1];arr[j+1]=temp;\n            }\n}\n```\nSorts an array using bubble sort."
  },
  {
    "question": "[777] Solve a recursion problem. Code in C++.",
    "answer": "```cpp\nint factorial(int n) {\n    if (n == 0) return 1;\n    return n * factorial(n-1);\n}\n```\nCalculates factorial using recursion."
  },
  {
    "question": "[778] Solve a dynamic programming problem. Code in C++.",
    "answer": "// Code for dynamic programming in C++ not available."
  },
  {
    "question": "[779] Solve a graphs problem. Code in C++.",
    "answer": "// Code for graphs in C++ not available."
  },
  {
    "question": "[780] Solve a hashing problem. Code in Python.",
    "answer": "```python\nhash_map = {}\nhash_map['a'] = 1\nprint(hash_map['a'])\n```\nImplements a hash map using dict."
  },
  {
    "question": "[781] Solve a stacks problem. Code in Python.",
    "answer": "```python\nstack = []\nstack.append(1)\nstack.append(2)\nprint(stack.pop())\n```\nImplements a stack using list."
  },
  {
    "question": "[782] Solve a backtracking problem. Code in Python.",
    "answer": "```python\ndef solve(nums, path):\n    if not nums:\n        print(path)\n        return\n    for i in range(len(nums)):\n        solve(nums[:i]+nums[i+1:], path+[nums[i]])\n```\nGenerates all permutations using backtracking."
  },
  {
    "question": "[783] Solve a bit manipulation problem. Code in C++.",
    "answer": "```cpp\nint countSetBits(int n) {\n    int count = 0;\n    while (n) {\n        count += n & 1;\n        n >>= 1;\n    }\n    return count;\n}\n```\nCounts set bits in an integer."
  },
  {
    "question": "[784] Solve a tries problem. Code in Python.",
    "answer": "```python\nclass TrieNode:\n    def __init__(self):\n        self.children = {}\n        self.is_end = False\nclass Trie:\n    def __init__(self):\n        self.root = TrieNode()\n    def insert(self, word):\n        node = self.root\n        for char in word:\n            if char not in node.children:\n                node.children[char] = TrieNode()\n            node = node.children[char]\n        node.is_end = True\n```\nBasic Trie implementation."
  },
  {
    "question": "[785] Solve a sorting problem. Code in Python.",
    "answer": "```python\ndef bubble_sort(arr):\n    n = len(arr)\n    for i in range(n):\n        for j in range(0, n-i-1):\n            if arr[j] > arr[j+1]:\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n    return arr\n```\nSorts an array using bubble sort."
  },
  {
    "question": "[786] Solve a math problem. Code in Python.",
    "answer": "```python\ndef is_armstrong(n):\n    digits = [int(d) for d in str(n)]\n    power = len(digits)\n    return n == sum([d**power for d in digits])\n```\nChecks if a number is an Armstrong number."
  },
  {
    "question": "[787] Solve a linked lists problem. Code in Java.",
    "answer": "```java\nclass ListNode {\n    int val;\n    ListNode next;\n    ListNode(int x) { val = x; }\n}\npublic ListNode reverseList(ListNode head) {\n    ListNode prev = null;\n    while (head != null) {\n        ListNode next = head.next;\n        head.next = prev;\n        prev = head;\n        head = next;\n    }\n    return prev;\n}\n```\nReverses a singly linked list."
  },
  {
    "question": "[788] Solve a number theory problem. Code in Java.",
    "answer": "```java\npublic boolean isPrime(int n) {\n    if (n < 2) return false;\n    for (int i = 2; i * i <= n; i++)\n        if (n % i == 0) return false;\n    return true;\n}\n```\nChecks if a number is prime."
  },
  {
    "question": "[789] Solve a tries problem. Code in C++.",
    "answer": "```cpp\n#include <unordered_map>\nclass TrieNode {\npublic:\n    unordered_map<char, TrieNode*> children;\n    bool is_end = false;\n};\nclass Trie {\npublic:\n    TrieNode* root = new TrieNode();\n    void insert(string word) {\n        TrieNode* node = root;\n        for (char c : word) {\n            if (!node->children[c]) node->children[c] = new TrieNode();\n            node = node->children[c];\n        }\n        node->is_end = true;\n    }\n};\n```\nBasic Trie implementation."
  },
  {
    "question": "[790] Solve a searching problem. Code in Java.",
    "answer": "```java\npublic int binarySearch(int[] arr, int target) {\n    int left=0,right=arr.length-1;\n    while(left<=right){\n        int mid=left+(right-left)/2;\n        if(arr[mid]==target) return mid;\n        else if(arr[mid]<target) left=mid+1;\n        else right=mid-1;\n    }\n    return -1;\n}\n```\nPerforms binary search on a sorted array."
  },
  {
    "question": "[791] Solve a queues problem. Code in C++.",
    "answer": "```cpp\n#include <queue>\n#include <iostream>\nusing namespace std;\nqueue<int> q;\nq.push(1);\nq.push(2);\ncout << q.front() << endl;\nq.pop();\n```\nImplements a queue using STL queue."
  },
  {
    "question": "[792] Solve a linked lists problem. Code in Python.",
    "answer": "```python\nclass ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n\ndef reverseList(head):\n    prev = None\n    curr = head\n    while curr:\n        next_node = curr.next\n        curr.next = prev\n        prev = curr\n        curr = next_node\n    return prev\n```\nReverses a singly linked list."
  },
  {
    "question": "[793] Solve a bit manipulation problem. Code in C++.",
    "answer": "```cpp\nint countSetBits(int n) {\n    int count = 0;\n    while (n) {\n        count += n & 1;\n        n >>= 1;\n    }\n    return count;\n}\n```\nCounts set bits in an integer."
  },
  {
    "question": "[794] Solve a linked lists problem. Code in C++.",
    "answer": "```cpp\nstruct ListNode {\n    int val;\n    ListNode* next;\n    ListNode(int x) : val(x), next(nullptr) {}\n};\nListNode* reverseList(ListNode* head) {\n    ListNode* prev = nullptr;\n    while (head) {\n        ListNode* next = head->next;\n        head->next = prev;\n        prev = head;\n        head = next;\n    }\n    return prev;\n}\n```\nReverses a singly linked list."
  },
  {
    "question": "[795] Solve a backtracking problem. Code in C++.",
    "answer": "```cpp\n#include <vector>\n#include <iostream>\nusing namespace std;\nvoid solve(vector<int>& nums, vector<int>& path) {\n    if (nums.empty()) {\n        for (int x : path) cout << x << \" \";\n        cout << endl;\n        return;\n    }\n    for (size_t i = 0; i < nums.size(); ++i) {\n        vector<int> nums2 = nums;\n        nums2.erase(nums2.begin() + i);\n        vector<int> path2 = path;\n        path2.push_back(nums[i]);\n        solve(nums2, path2);\n    }\n}\n```\nGenerates all permutations using backtracking."
  },
  {
    "question": "[796] Solve a searching problem. Code in Java.",
    "answer": "```java\npublic int binarySearch(int[] arr, int target) {\n    int left=0,right=arr.length-1;\n    while(left<=right){\n        int mid=left+(right-left)/2;\n        if(arr[mid]==target) return mid;\n        else if(arr[mid]<target) left=mid+1;\n        else right=mid-1;\n    }\n    return -1;\n}\n```\nPerforms binary search on a sorted array."
  },
  {
    "question": "[797] Solve a geometry problem. Code in Python.",
    "answer": "```python\ndef area_of_circle(r):\n    import math\n    return math.pi * r * r\n```\nCalculates area of a circle."
  },
  {
    "question": "[798] Solve a geometry problem. Code in Python.",
    "answer": "```python\ndef area_of_circle(r):\n    import math\n    return math.pi * r * r\n```\nCalculates area of a circle."
  },
  {
    "question": "[799] Solve a recursion problem. Code in C++.",
    "answer": "```cpp\nint factorial(int n) {\n    if (n == 0) return 1;\n    return n * factorial(n-1);\n}\n```\nCalculates factorial using recursion."
  },
  {
    "question": "[800] Solve a bit manipulation problem. Code in Java.",
    "answer": "```java\npublic int countSetBits(int n) {\n    int count = 0;\n    while (n != 0) {\n        count += n & 1;\n        n >>= 1;\n    }\n    return count;\n}\n```\nCounts set bits in an integer."
  },
  {
    "question": "[801] Solve a greedy problem. Code in C++.",
    "answer": "```cpp\n#include <vector>\n#include <algorithm>\nusing namespace std;\nvector<pair<int,int>> activitySelection(vector<pair<int,int>>& activities) {\n    sort(activities.begin(), activities.end(), [](auto &a, auto &b){ return a.second < b.second; });\n    vector<pair<int,int>> res;\n    res.push_back(activities[0]);\n    for (size_t i = 1; i < activities.size(); ++i) {\n        if (activities[i].first >= res.back().second)\n            res.push_back(activities[i]);\n    }\n    return res;\n}\n```\nSelects maximum number of non-overlapping activities."
  },
  {
    "question": "[802] Solve a heaps problem. Code in Java.",
    "answer": "```java\nimport java.util.*;\nPriorityQueue<Integer> h = new PriorityQueue<>();\nh.add(3);\nh.add(1);\nh.add(2);\nSystem.out.println(h.poll());\n```\nImplements a min-heap using PriorityQueue."
  },
  {
    "question": "[803] Solve a hashing problem. Code in C++.",
    "answer": "```cpp\n#include <unordered_map>\n#include <iostream>\nusing namespace std;\nunordered_map<string, int> hash_map;\nhash_map[\"a\"] = 1;\ncout << hash_map[\"a\"] << endl;\n```\nImplements a hash map using unordered_map."
  },
  {
    "question": "[804] Solve a linked lists problem. Code in Python.",
    "answer": "```python\nclass ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n\ndef reverseList(head):\n    prev = None\n    curr = head\n    while curr:\n        next_node = curr.next\n        curr.next = prev\n        prev = curr\n        curr = next_node\n    return prev\n```\nReverses a singly linked list."
  },
  {
    "question": "[805] Solve a searching problem. Code in C++.",
    "answer": "```cpp\nint binarySearch(int arr[], int n, int target) {\n    int left=0,right=n-1;\n    while(left<=right){\n        int mid=left+(right-left)/2;\n        if(arr[mid]==target) return mid;\n        else if(arr[mid]<target) left=mid+1;\n        else right=mid-1;\n    }\n    return -1;\n}\n```\nPerforms binary search on a sorted array."
  },
  {
    "question": "[806] Solve a greedy problem. Code in Java.",
    "answer": "```java\nimport java.util.*;\npublic List<int[]> activitySelection(List<int[]> activities) {\n    activities.sort(Comparator.comparingInt(a -> a[1]));\n    List<int[]> res = new ArrayList<>();\n    res.add(activities.get(0));\n    for (int i = 1; i < activities.size(); i++) {\n        if (activities.get(i)[0] >= res.get(res.size()-1)[1])\n            res.add(activities.get(i));\n    }\n    return res;\n}\n```\nSelects maximum number of non-overlapping activities."
  },
  {
    "question": "[807] Solve a number theory problem. Code in Java.",
    "answer": "```java\npublic boolean isPrime(int n) {\n    if (n < 2) return false;\n    for (int i = 2; i * i <= n; i++)\n        if (n % i == 0) return false;\n    return true;\n}\n```\nChecks if a number is prime."
  },
  {
    "question": "[808] Solve a number theory problem. Code in C++.",
    "answer": "```cpp\nbool isPrime(int n) {\n    if (n < 2) return false;\n    for (int i = 2; i * i <= n; ++i)\n        if (n % i == 0) return false;\n    return true;\n}\n```\nChecks if a number is prime."
  },
  {
    "question": "[809] Solve a dynamic programming problem. Code in C++.",
    "answer": "// Code for dynamic programming in C++ not available."
  },
  {
    "question": "[810] Solve a binary trees problem. Code in Java.",
    "answer": "```java\nclass TreeNode {\n    int val;\n    TreeNode left, right;\n    TreeNode(int x) { val = x; }\n}\npublic int treeHeight(TreeNode root) {\n    if (root == null) return 0;\n    return 1 + Math.max(treeHeight(root.left), treeHeight(root.right));\n}\n```\nComputes the height of a binary tree."
  },
  {
    "question": "[811] Solve a tries problem. Code in Java.",
    "answer": "```java\nclass TrieNode {\n    Map<Character, TrieNode> children = new HashMap<>();\n    boolean isEnd = false;\n}\nclass Trie {\n    TrieNode root = new TrieNode();\n    void insert(String word) {\n        TrieNode node = root;\n        for (char c : word.toCharArray()) {\n            node.children.putIfAbsent(c, new TrieNode());\n            node = node.children.get(c);\n        }\n        node.isEnd = true;\n    }\n}\n```\nBasic Trie implementation."
  },
  {
    "question": "[812] Solve a arrays problem. Code in C++.",
    "answer": "```cpp\n#include <iostream>\nusing namespace std;\nint findMax(int arr[], int n) {\n    int maxVal = arr[0];\n    for(int i=1;i<n;i++)\n        if(arr[i]>maxVal) maxVal=arr[i];\n    return maxVal;\n}\n```\nFinds the maximum element in an array."
  },
  {
    "question": "[813] Solve a binary trees problem. Code in Python.",
    "answer": "```python\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef treeHeight(root):\n    if not root:\n        return 0\n    return 1 + max(treeHeight(root.left), treeHeight(root.right))\n```\nComputes the height of a binary tree."
  },
  {
    "question": "[814] Solve a bit manipulation problem. Code in Python.",
    "answer": "```python\ndef count_set_bits(n):\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n```\nCounts set bits in an integer."
  },
  {
    "question": "[815] Solve a hashing problem. Code in C++.",
    "answer": "```cpp\n#include <unordered_map>\n#include <iostream>\nusing namespace std;\nunordered_map<string, int> hash_map;\nhash_map[\"a\"] = 1;\ncout << hash_map[\"a\"] << endl;\n```\nImplements a hash map using unordered_map."
  },
  {
    "question": "[816] Solve a queues problem. Code in C++.",
    "answer": "```cpp\n#include <queue>\n#include <iostream>\nusing namespace std;\nqueue<int> q;\nq.push(1);\nq.push(2);\ncout << q.front() << endl;\nq.pop();\n```\nImplements a queue using STL queue."
  },
  {
    "question": "[817] Solve a binary trees problem. Code in Java.",
    "answer": "```java\nclass TreeNode {\n    int val;\n    TreeNode left, right;\n    TreeNode(int x) { val = x; }\n}\npublic int treeHeight(TreeNode root) {\n    if (root == null) return 0;\n    return 1 + Math.max(treeHeight(root.left), treeHeight(root.right));\n}\n```\nComputes the height of a binary tree."
  },
  {
    "question": "[818] Solve a tries problem. Code in C++.",
    "answer": "```cpp\n#include <unordered_map>\nclass TrieNode {\npublic:\n    unordered_map<char, TrieNode*> children;\n    bool is_end = false;\n};\nclass Trie {\npublic:\n    TrieNode* root = new TrieNode();\n    void insert(string word) {\n        TrieNode* node = root;\n        for (char c : word) {\n            if (!node->children[c]) node->children[c] = new TrieNode();\n            node = node->children[c];\n        }\n        node->is_end = true;\n    }\n};\n```\nBasic Trie implementation."
  },
  {
    "question": "[819] Solve a binary trees problem. Code in C++.",
    "answer": "```cpp\nstruct TreeNode {\n    int val;\n    TreeNode* left;\n    TreeNode* right;\n    TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n};\nint treeHeight(TreeNode* root) {\n    if (!root) return 0;\n    return 1 + max(treeHeight(root->left), treeHeight(root->right));\n}\n```\nComputes the height of a binary tree."
  },
  {
    "question": "[820] Solve a number theory problem. Code in Python.",
    "answer": "```python\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True\n```\nChecks if a number is prime."
  },
  {
    "question": "[821] Solve a hashing problem. Code in Java.",
    "answer": "```java\nimport java.util.*;\nMap<String, Integer> hashMap = new HashMap<>();\nhashMap.put(\"a\", 1);\nSystem.out.println(hashMap.get(\"a\"));\n```\nImplements a hash map using HashMap."
  },
  {
    "question": "[822] Solve a heaps problem. Code in C++.",
    "answer": "```cpp\n#include <queue>\n#include <vector>\n#include <iostream>\nusing namespace std;\npriority_queue<int, vector<int>, greater<int>> h;\nh.push(3);\nh.push(1);\nh.push(2);\ncout << h.top() << endl;\nh.pop();\n```\nImplements a min-heap using STL priority_queue."
  },
  {
    "question": "[823] Solve a stacks problem. Code in Python.",
    "answer": "```python\nstack = []\nstack.append(1)\nstack.append(2)\nprint(stack.pop())\n```\nImplements a stack using list."
  },
  {
    "question": "[824] Solve a recursion problem. Code in Java.",
    "answer": "```java\npublic int factorial(int n) {\n    if (n == 0) return 1;\n    return n * factorial(n-1);\n}\n```\nCalculates factorial using recursion."
  },
  {
    "question": "[825] Solve a hashing problem. Code in C++.",
    "answer": "```cpp\n#include <unordered_map>\n#include <iostream>\nusing namespace std;\nunordered_map<string, int> hash_map;\nhash_map[\"a\"] = 1;\ncout << hash_map[\"a\"] << endl;\n```\nImplements a hash map using unordered_map."
  },
  {
    "question": "[826] Solve a binary trees problem. Code in Java.",
    "answer": "```java\nclass TreeNode {\n    int val;\n    TreeNode left, right;\n    TreeNode(int x) { val = x; }\n}\npublic int treeHeight(TreeNode root) {\n    if (root == null) return 0;\n    return 1 + Math.max(treeHeight(root.left), treeHeight(root.right));\n}\n```\nComputes the height of a binary tree."
  },
  {
    "question": "[827] Solve a math problem. Code in Python.",
    "answer": "```python\ndef is_armstrong(n):\n    digits = [int(d) for d in str(n)]\n    power = len(digits)\n    return n == sum([d**power for d in digits])\n```\nChecks if a number is an Armstrong number."
  },
  {
    "question": "[828] Solve a math problem. Code in Java.",
    "answer": "```java\npublic boolean isArmstrong(int n) {\n    int temp = n, digitCount = 0, sum = 0;\n    digitCount = (int)(Math.log10(n)) + 1;\n    while (temp != 0) {\n        int digit = temp % 10;\n        sum += Math.pow(digit, digitCount);\n        temp /= 10;\n    }\n    return n == sum;\n}\n```\nChecks if a number is an Armstrong number."
  },
  {
    "question": "[829] Solve a geometry problem. Code in Python.",
    "answer": "```python\ndef area_of_circle(r):\n    import math\n    return math.pi * r * r\n```\nCalculates area of a circle."
  },
  {
    "question": "[830] Solve a hashing problem. Code in Java.",
    "answer": "```java\nimport java.util.*;\nMap<String, Integer> hashMap = new HashMap<>();\nhashMap.put(\"a\", 1);\nSystem.out.println(hashMap.get(\"a\"));\n```\nImplements a hash map using HashMap."
  },
  {
    "question": "[831] Solve a bit manipulation problem. Code in C++.",
    "answer": "```cpp\nint countSetBits(int n) {\n    int count = 0;\n    while (n) {\n        count += n & 1;\n        n >>= 1;\n    }\n    return count;\n}\n```\nCounts set bits in an integer."
  },
  {
    "question": "[832] Solve a hashing problem. Code in Java.",
    "answer": "```java\nimport java.util.*;\nMap<String, Integer> hashMap = new HashMap<>();\nhashMap.put(\"a\", 1);\nSystem.out.println(hashMap.get(\"a\"));\n```\nImplements a hash map using HashMap."
  },
  {
    "question": "[833] Solve a tries problem. Code in Python.",
    "answer": "```python\nclass TrieNode:\n    def __init__(self):\n        self.children = {}\n        self.is_end = False\nclass Trie:\n    def __init__(self):\n        self.root = TrieNode()\n    def insert(self, word):\n        node = self.root\n        for char in word:\n            if char not in node.children:\n                node.children[char] = TrieNode()\n            node = node.children[char]\n        node.is_end = True\n```\nBasic Trie implementation."
  },
  {
    "question": "[834] Solve a hashing problem. Code in Python.",
    "answer": "```python\nhash_map = {}\nhash_map['a'] = 1\nprint(hash_map['a'])\n```\nImplements a hash map using dict."
  },
  {
    "question": "[835] Solve a greedy problem. Code in Java.",
    "answer": "```java\nimport java.util.*;\npublic List<int[]> activitySelection(List<int[]> activities) {\n    activities.sort(Comparator.comparingInt(a -> a[1]));\n    List<int[]> res = new ArrayList<>();\n    res.add(activities.get(0));\n    for (int i = 1; i < activities.size(); i++) {\n        if (activities.get(i)[0] >= res.get(res.size()-1)[1])\n            res.add(activities.get(i));\n    }\n    return res;\n}\n```\nSelects maximum number of non-overlapping activities."
  },
  {
    "question": "[836] Solve a stacks problem. Code in C++.",
    "answer": "```cpp\n#include <stack>\n#include <iostream>\nusing namespace std;\nstack<int> s;\ns.push(1);\ns.push(2);\ncout << s.top() << endl;\ns.pop();\n```\nImplements a stack using STL stack."
  },
  {
    "question": "[837] Solve a strings problem. Code in Java.",
    "answer": "```java\npublic String reverseString(String s) {\n    return new StringBuilder(s).reverse().toString();\n}\n```\nReverses a string."
  },
  {
    "question": "[838] Solve a recursion problem. Code in Python.",
    "answer": "```python\ndef factorial(n):\n    if n == 0:\n        return 1\n    return n * factorial(n-1)\n```\nCalculates factorial using recursion."
  },
  {
    "question": "[839] Solve a arrays problem. Code in Python.",
    "answer": "```python\ndef find_max(arr):\n    return max(arr)\n```\nFinds the maximum element in an array."
  },
  {
    "question": "[840] Solve a arrays problem. Code in C++.",
    "answer": "```cpp\n#include <iostream>\nusing namespace std;\nint findMax(int arr[], int n) {\n    int maxVal = arr[0];\n    for(int i=1;i<n;i++)\n        if(arr[i]>maxVal) maxVal=arr[i];\n    return maxVal;\n}\n```\nFinds the maximum element in an array."
  },
  {
    "question": "[841] Solve a arrays problem. Code in C++.",
    "answer": "```cpp\n#include <iostream>\nusing namespace std;\nint findMax(int arr[], int n) {\n    int maxVal = arr[0];\n    for(int i=1;i<n;i++)\n        if(arr[i]>maxVal) maxVal=arr[i];\n    return maxVal;\n}\n```\nFinds the maximum element in an array."
  },
  {
    "question": "[842] Solve a recursion problem. Code in Java.",
    "answer": "```java\npublic int factorial(int n) {\n    if (n == 0) return 1;\n    return n * factorial(n-1);\n}\n```\nCalculates factorial using recursion."
  },
  {
    "question": "[843] Solve a geometry problem. Code in Java.",
    "answer": "```java\npublic double areaOfCircle(double r) {\n    return Math.PI * r * r;\n}\n```\nCalculates area of a circle."
  },
  {
    "question": "[844] Solve a hashing problem. Code in C++.",
    "answer": "```cpp\n#include <unordered_map>\n#include <iostream>\nusing namespace std;\nunordered_map<string, int> hash_map;\nhash_map[\"a\"] = 1;\ncout << hash_map[\"a\"] << endl;\n```\nImplements a hash map using unordered_map."
  },
  {
    "question": "[845] Solve a linked lists problem. Code in C++.",
    "answer": "```cpp\nstruct ListNode {\n    int val;\n    ListNode* next;\n    ListNode(int x) : val(x), next(nullptr) {}\n};\nListNode* reverseList(ListNode* head) {\n    ListNode* prev = nullptr;\n    while (head) {\n        ListNode* next = head->next;\n        head->next = prev;\n        prev = head;\n        head = next;\n    }\n    return prev;\n}\n```\nReverses a singly linked list."
  },
  {
    "question": "[846] Solve a recursion problem. Code in Python.",
    "answer": "```python\ndef factorial(n):\n    if n == 0:\n        return 1\n    return n * factorial(n-1)\n```\nCalculates factorial using recursion."
  },
  {
    "question": "[847] Solve a heaps problem. Code in Python.",
    "answer": "```python\nimport heapq\nh = []\nheapq.heappush(h, 3)\nheapq.heappush(h, 1)\nheapq.heappush(h, 2)\nprint(heapq.heappop(h))\n```\nImplements a min-heap using heapq."
  },
  {
    "question": "[848] Solve a arrays problem. Code in Java.",
    "answer": "```java\npublic int findMax(int[] arr) {\n    int maxVal = arr[0];\n    for(int i=1;i<arr.length;i++)\n        if(arr[i]>maxVal) maxVal=arr[i];\n    return maxVal;\n}\n```\nFinds the maximum element in an array."
  },
  {
    "question": "[849] Solve a searching problem. Code in C++.",
    "answer": "```cpp\nint binarySearch(int arr[], int n, int target) {\n    int left=0,right=n-1;\n    while(left<=right){\n        int mid=left+(right-left)/2;\n        if(arr[mid]==target) return mid;\n        else if(arr[mid]<target) left=mid+1;\n        else right=mid-1;\n    }\n    return -1;\n}\n```\nPerforms binary search on a sorted array."
  },
  {
    "question": "[850] Solve a dynamic programming problem. Code in Java.",
    "answer": "// Code for dynamic programming in Java not available."
  },
  {
    "question": "[851] Solve a bit manipulation problem. Code in Java.",
    "answer": "```java\npublic int countSetBits(int n) {\n    int count = 0;\n    while (n != 0) {\n        count += n & 1;\n        n >>= 1;\n    }\n    return count;\n}\n```\nCounts set bits in an integer."
  },
  {
    "question": "[852] Solve a stacks problem. Code in Python.",
    "answer": "```python\nstack = []\nstack.append(1)\nstack.append(2)\nprint(stack.pop())\n```\nImplements a stack using list."
  },
  {
    "question": "[853] Solve a hashing problem. Code in Java.",
    "answer": "```java\nimport java.util.*;\nMap<String, Integer> hashMap = new HashMap<>();\nhashMap.put(\"a\", 1);\nSystem.out.println(hashMap.get(\"a\"));\n```\nImplements a hash map using HashMap."
  },
  {
    "question": "[854] Solve a math problem. Code in Python.",
    "answer": "```python\ndef is_armstrong(n):\n    digits = [int(d) for d in str(n)]\n    power = len(digits)\n    return n == sum([d**power for d in digits])\n```\nChecks if a number is an Armstrong number."
  },
  {
    "question": "[855] Solve a hashing problem. Code in Python.",
    "answer": "```python\nhash_map = {}\nhash_map['a'] = 1\nprint(hash_map['a'])\n```\nImplements a hash map using dict."
  },
  {
    "question": "[856] Solve a linked lists problem. Code in C++.",
    "answer": "```cpp\nstruct ListNode {\n    int val;\n    ListNode* next;\n    ListNode(int x) : val(x), next(nullptr) {}\n};\nListNode* reverseList(ListNode* head) {\n    ListNode* prev = nullptr;\n    while (head) {\n        ListNode* next = head->next;\n        head->next = prev;\n        prev = head;\n        head = next;\n    }\n    return prev;\n}\n```\nReverses a singly linked list."
  },
  {
    "question": "[857] Solve a graphs problem. Code in Java.",
    "answer": "// Code for graphs in Java not available."
  },
  {
    "question": "[858] Solve a linked lists problem. Code in Java.",
    "answer": "```java\nclass ListNode {\n    int val;\n    ListNode next;\n    ListNode(int x) { val = x; }\n}\npublic ListNode reverseList(ListNode head) {\n    ListNode prev = null;\n    while (head != null) {\n        ListNode next = head.next;\n        head.next = prev;\n        prev = head;\n        head = next;\n    }\n    return prev;\n}\n```\nReverses a singly linked list."
  },
  {
    "question": "[859] Solve a backtracking problem. Code in Java.",
    "answer": "```java\npublic void solve(List<Integer> nums, List<Integer> path) {\n    if (nums.isEmpty()) {\n        System.out.println(path);\n        return;\n    }\n    for (int i = 0; i < nums.size(); i++) {\n        List<Integer> nums2 = new ArrayList<>(nums);\n        nums2.remove(i);\n        List<Integer> path2 = new ArrayList<>(path);\n        path2.add(nums.get(i));\n        solve(nums2, path2);\n    }\n}\n```\nGenerates all permutations using backtracking."
  },
  {
    "question": "[860] Solve a dynamic programming problem. Code in Python.",
    "answer": "// Code for dynamic programming in Python not available."
  },
  {
    "question": "[861] Solve a heaps problem. Code in C++.",
    "answer": "```cpp\n#include <queue>\n#include <vector>\n#include <iostream>\nusing namespace std;\npriority_queue<int, vector<int>, greater<int>> h;\nh.push(3);\nh.push(1);\nh.push(2);\ncout << h.top() << endl;\nh.pop();\n```\nImplements a min-heap using STL priority_queue."
  },
  {
    "question": "[862] Solve a stacks problem. Code in Java.",
    "answer": "```java\nimport java.util.*;\nStack<Integer> stack = new Stack<>();\nstack.push(1);\nstack.push(2);\nSystem.out.println(stack.pop());\n```\nImplements a stack using Stack class."
  },
  {
    "question": "[863] Solve a strings problem. Code in Python.",
    "answer": "```python\ndef reverse_string(s):\n    return s[::-1]\n```\nReverses a string."
  },
  {
    "question": "[864] Solve a queues problem. Code in Python.",
    "answer": "```python\nfrom collections import deque\nq = deque()\nq.append(1)\nq.append(2)\nprint(q.popleft())\n```\nImplements a queue using deque."
  },
  {
    "question": "[865] Solve a binary trees problem. Code in Python.",
    "answer": "```python\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef treeHeight(root):\n    if not root:\n        return 0\n    return 1 + max(treeHeight(root.left), treeHeight(root.right))\n```\nComputes the height of a binary tree."
  },
  {
    "question": "[866] Solve a geometry problem. Code in Java.",
    "answer": "```java\npublic double areaOfCircle(double r) {\n    return Math.PI * r * r;\n}\n```\nCalculates area of a circle."
  },
  {
    "question": "[867] Solve a geometry problem. Code in Python.",
    "answer": "```python\ndef area_of_circle(r):\n    import math\n    return math.pi * r * r\n```\nCalculates area of a circle."
  },
  {
    "question": "[868] Solve a heaps problem. Code in C++.",
    "answer": "```cpp\n#include <queue>\n#include <vector>\n#include <iostream>\nusing namespace std;\npriority_queue<int, vector<int>, greater<int>> h;\nh.push(3);\nh.push(1);\nh.push(2);\ncout << h.top() << endl;\nh.pop();\n```\nImplements a min-heap using STL priority_queue."
  },
  {
    "question": "[869] Solve a stacks problem. Code in Python.",
    "answer": "```python\nstack = []\nstack.append(1)\nstack.append(2)\nprint(stack.pop())\n```\nImplements a stack using list."
  },
  {
    "question": "[870] Solve a queues problem. Code in Python.",
    "answer": "```python\nfrom collections import deque\nq = deque()\nq.append(1)\nq.append(2)\nprint(q.popleft())\n```\nImplements a queue using deque."
  },
  {
    "question": "[871] Solve a linked lists problem. Code in Java.",
    "answer": "```java\nclass ListNode {\n    int val;\n    ListNode next;\n    ListNode(int x) { val = x; }\n}\npublic ListNode reverseList(ListNode head) {\n    ListNode prev = null;\n    while (head != null) {\n        ListNode next = head.next;\n        head.next = prev;\n        prev = head;\n        head = next;\n    }\n    return prev;\n}\n```\nReverses a singly linked list."
  },
  {
    "question": "[872] Solve a greedy problem. Code in C++.",
    "answer": "```cpp\n#include <vector>\n#include <algorithm>\nusing namespace std;\nvector<pair<int,int>> activitySelection(vector<pair<int,int>>& activities) {\n    sort(activities.begin(), activities.end(), [](auto &a, auto &b){ return a.second < b.second; });\n    vector<pair<int,int>> res;\n    res.push_back(activities[0]);\n    for (size_t i = 1; i < activities.size(); ++i) {\n        if (activities[i].first >= res.back().second)\n            res.push_back(activities[i]);\n    }\n    return res;\n}\n```\nSelects maximum number of non-overlapping activities."
  },
  {
    "question": "[873] Solve a number theory problem. Code in Python.",
    "answer": "```python\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True\n```\nChecks if a number is prime."
  },
  {
    "question": "[874] Solve a number theory problem. Code in C++.",
    "answer": "```cpp\nbool isPrime(int n) {\n    if (n < 2) return false;\n    for (int i = 2; i * i <= n; ++i)\n        if (n % i == 0) return false;\n    return true;\n}\n```\nChecks if a number is prime."
  },
  {
    "question": "[875] Solve a searching problem. Code in Java.",
    "answer": "```java\npublic int binarySearch(int[] arr, int target) {\n    int left=0,right=arr.length-1;\n    while(left<=right){\n        int mid=left+(right-left)/2;\n        if(arr[mid]==target) return mid;\n        else if(arr[mid]<target) left=mid+1;\n        else right=mid-1;\n    }\n    return -1;\n}\n```\nPerforms binary search on a sorted array."
  },
  {
    "question": "[876] Solve a dynamic programming problem. Code in Java.",
    "answer": "// Code for dynamic programming in Java not available."
  },
  {
    "question": "[877] Solve a recursion problem. Code in C++.",
    "answer": "```cpp\nint factorial(int n) {\n    if (n == 0) return 1;\n    return n * factorial(n-1);\n}\n```\nCalculates factorial using recursion."
  },
  {
    "question": "[878] Solve a backtracking problem. Code in Java.",
    "answer": "```java\npublic void solve(List<Integer> nums, List<Integer> path) {\n    if (nums.isEmpty()) {\n        System.out.println(path);\n        return;\n    }\n    for (int i = 0; i < nums.size(); i++) {\n        List<Integer> nums2 = new ArrayList<>(nums);\n        nums2.remove(i);\n        List<Integer> path2 = new ArrayList<>(path);\n        path2.add(nums.get(i));\n        solve(nums2, path2);\n    }\n}\n```\nGenerates all permutations using backtracking."
  },
  {
    "question": "[879] Solve a binary trees problem. Code in C++.",
    "answer": "```cpp\nstruct TreeNode {\n    int val;\n    TreeNode* left;\n    TreeNode* right;\n    TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n};\nint treeHeight(TreeNode* root) {\n    if (!root) return 0;\n    return 1 + max(treeHeight(root->left), treeHeight(root->right));\n}\n```\nComputes the height of a binary tree."
  },
  {
    "question": "[880] Solve a dynamic programming problem. Code in C++.",
    "answer": "// Code for dynamic programming in C++ not available."
  },
  {
    "question": "[881] Solve a backtracking problem. Code in C++.",
    "answer": "```cpp\n#include <vector>\n#include <iostream>\nusing namespace std;\nvoid solve(vector<int>& nums, vector<int>& path) {\n    if (nums.empty()) {\n        for (int x : path) cout << x << \" \";\n        cout << endl;\n        return;\n    }\n    for (size_t i = 0; i < nums.size(); ++i) {\n        vector<int> nums2 = nums;\n        nums2.erase(nums2.begin() + i);\n        vector<int> path2 = path;\n        path2.push_back(nums[i]);\n        solve(nums2, path2);\n    }\n}\n```\nGenerates all permutations using backtracking."
  },
  {
    "question": "[882] Solve a dynamic programming problem. Code in Python.",
    "answer": "// Code for dynamic programming in Python not available."
  },
  {
    "question": "[883] Solve a recursion problem. Code in Java.",
    "answer": "```java\npublic int factorial(int n) {\n    if (n == 0) return 1;\n    return n * factorial(n-1);\n}\n```\nCalculates factorial using recursion."
  },
  {
    "question": "[884] Solve a backtracking problem. Code in C++.",
    "answer": "```cpp\n#include <vector>\n#include <iostream>\nusing namespace std;\nvoid solve(vector<int>& nums, vector<int>& path) {\n    if (nums.empty()) {\n        for (int x : path) cout << x << \" \";\n        cout << endl;\n        return;\n    }\n    for (size_t i = 0; i < nums.size(); ++i) {\n        vector<int> nums2 = nums;\n        nums2.erase(nums2.begin() + i);\n        vector<int> path2 = path;\n        path2.push_back(nums[i]);\n        solve(nums2, path2);\n    }\n}\n```\nGenerates all permutations using backtracking."
  },
  {
    "question": "[885] Solve a greedy problem. Code in Java.",
    "answer": "```java\nimport java.util.*;\npublic List<int[]> activitySelection(List<int[]> activities) {\n    activities.sort(Comparator.comparingInt(a -> a[1]));\n    List<int[]> res = new ArrayList<>();\n    res.add(activities.get(0));\n    for (int i = 1; i < activities.size(); i++) {\n        if (activities.get(i)[0] >= res.get(res.size()-1)[1])\n            res.add(activities.get(i));\n    }\n    return res;\n}\n```\nSelects maximum number of non-overlapping activities."
  },
  {
    "question": "[886] Solve a backtracking problem. Code in Java.",
    "answer": "```java\npublic void solve(List<Integer> nums, List<Integer> path) {\n    if (nums.isEmpty()) {\n        System.out.println(path);\n        return;\n    }\n    for (int i = 0; i < nums.size(); i++) {\n        List<Integer> nums2 = new ArrayList<>(nums);\n        nums2.remove(i);\n        List<Integer> path2 = new ArrayList<>(path);\n        path2.add(nums.get(i));\n        solve(nums2, path2);\n    }\n}\n```\nGenerates all permutations using backtracking."
  },
  {
    "question": "[887] Solve a bit manipulation problem. Code in C++.",
    "answer": "```cpp\nint countSetBits(int n) {\n    int count = 0;\n    while (n) {\n        count += n & 1;\n        n >>= 1;\n    }\n    return count;\n}\n```\nCounts set bits in an integer."
  },
  {
    "question": "[888] Solve a sorting problem. Code in C++.",
    "answer": "```cpp\nvoid bubbleSort(int arr[], int n) {\n    for(int i=0;i<n-1;i++)\n        for(int j=0;j<n-i-1;j++)\n            if(arr[j]>arr[j+1]) swap(arr[j],arr[j+1]);\n}\n```\nSorts an array using bubble sort."
  },
  {
    "question": "[889] Solve a tries problem. Code in Java.",
    "answer": "```java\nclass TrieNode {\n    Map<Character, TrieNode> children = new HashMap<>();\n    boolean isEnd = false;\n}\nclass Trie {\n    TrieNode root = new TrieNode();\n    void insert(String word) {\n        TrieNode node = root;\n        for (char c : word.toCharArray()) {\n            node.children.putIfAbsent(c, new TrieNode());\n            node = node.children.get(c);\n        }\n        node.isEnd = true;\n    }\n}\n```\nBasic Trie implementation."
  },
  {
    "question": "[890] Solve a searching problem. Code in Java.",
    "answer": "```java\npublic int binarySearch(int[] arr, int target) {\n    int left=0,right=arr.length-1;\n    while(left<=right){\n        int mid=left+(right-left)/2;\n        if(arr[mid]==target) return mid;\n        else if(arr[mid]<target) left=mid+1;\n        else right=mid-1;\n    }\n    return -1;\n}\n```\nPerforms binary search on a sorted array."
  },
  {
    "question": "[891] Solve a greedy problem. Code in Python.",
    "answer": "```python\ndef activity_selection(activities):\n    activities.sort(key=lambda x: x[1])\n    res = [activities[0]]\n    for i in range(1, len(activities)):\n        if activities[i][0] >= res[-1][1]:\n            res.append(activities[i])\n    return res\n```\nSelects maximum number of non-overlapping activities."
  },
  {
    "question": "[892] Solve a sorting problem. Code in Java.",
    "answer": "```java\npublic void bubbleSort(int[] arr) {\n    int n = arr.length;\n    for(int i=0;i<n-1;i++)\n        for(int j=0;j<n-i-1;j++)\n            if(arr[j]>arr[j+1]) {\n                int temp=arr[j];arr[j]=arr[j+1];arr[j+1]=temp;\n            }\n}\n```\nSorts an array using bubble sort."
  },
  {
    "question": "[893] Solve a binary trees problem. Code in Python.",
    "answer": "```python\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef treeHeight(root):\n    if not root:\n        return 0\n    return 1 + max(treeHeight(root.left), treeHeight(root.right))\n```\nComputes the height of a binary tree."
  },
  {
    "question": "[894] Solve a stacks problem. Code in Python.",
    "answer": "```python\nstack = []\nstack.append(1)\nstack.append(2)\nprint(stack.pop())\n```\nImplements a stack using list."
  },
  {
    "question": "[895] Solve a binary trees problem. Code in Python.",
    "answer": "```python\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef treeHeight(root):\n    if not root:\n        return 0\n    return 1 + max(treeHeight(root.left), treeHeight(root.right))\n```\nComputes the height of a binary tree."
  },
  {
    "question": "[896] Solve a hashing problem. Code in Java.",
    "answer": "```java\nimport java.util.*;\nMap<String, Integer> hashMap = new HashMap<>();\nhashMap.put(\"a\", 1);\nSystem.out.println(hashMap.get(\"a\"));\n```\nImplements a hash map using HashMap."
  },
  {
    "question": "[897] Solve a stacks problem. Code in Java.",
    "answer": "```java\nimport java.util.*;\nStack<Integer> stack = new Stack<>();\nstack.push(1);\nstack.push(2);\nSystem.out.println(stack.pop());\n```\nImplements a stack using Stack class."
  },
  {
    "question": "[898] Solve a linked lists problem. Code in Python.",
    "answer": "```python\nclass ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n\ndef reverseList(head):\n    prev = None\n    curr = head\n    while curr:\n        next_node = curr.next\n        curr.next = prev\n        prev = curr\n        curr = next_node\n    return prev\n```\nReverses a singly linked list."
  },
  {
    "question": "[899] Solve a recursion problem. Code in C++.",
    "answer": "```cpp\nint factorial(int n) {\n    if (n == 0) return 1;\n    return n * factorial(n-1);\n}\n```\nCalculates factorial using recursion."
  },
  {
    "question": "[900] Solve a tries problem. Code in Java.",
    "answer": "```java\nclass TrieNode {\n    Map<Character, TrieNode> children = new HashMap<>();\n    boolean isEnd = false;\n}\nclass Trie {\n    TrieNode root = new TrieNode();\n    void insert(String word) {\n        TrieNode node = root;\n        for (char c : word.toCharArray()) {\n            node.children.putIfAbsent(c, new TrieNode());\n            node = node.children.get(c);\n        }\n        node.isEnd = true;\n    }\n}\n```\nBasic Trie implementation."
  },
  {
    "question": "[901] Solve a binary trees problem. Code in C++.",
    "answer": "```cpp\nstruct TreeNode {\n    int val;\n    TreeNode* left;\n    TreeNode* right;\n    TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n};\nint treeHeight(TreeNode* root) {\n    if (!root) return 0;\n    return 1 + max(treeHeight(root->left), treeHeight(root->right));\n}\n```\nComputes the height of a binary tree."
  },
  {
    "question": "[902] Solve a geometry problem. Code in Java.",
    "answer": "```java\npublic double areaOfCircle(double r) {\n    return Math.PI * r * r;\n}\n```\nCalculates area of a circle."
  },
  {
    "question": "[903] Solve a sorting problem. Code in Java.",
    "answer": "```java\npublic void bubbleSort(int[] arr) {\n    int n = arr.length;\n    for(int i=0;i<n-1;i++)\n        for(int j=0;j<n-i-1;j++)\n            if(arr[j]>arr[j+1]) {\n                int temp=arr[j];arr[j]=arr[j+1];arr[j+1]=temp;\n            }\n}\n```\nSorts an array using bubble sort."
  },
  {
    "question": "[904] Solve a hashing problem. Code in C++.",
    "answer": "```cpp\n#include <unordered_map>\n#include <iostream>\nusing namespace std;\nunordered_map<string, int> hash_map;\nhash_map[\"a\"] = 1;\ncout << hash_map[\"a\"] << endl;\n```\nImplements a hash map using unordered_map."
  },
  {
    "question": "[905] Solve a number theory problem. Code in Java.",
    "answer": "```java\npublic boolean isPrime(int n) {\n    if (n < 2) return false;\n    for (int i = 2; i * i <= n; i++)\n        if (n % i == 0) return false;\n    return true;\n}\n```\nChecks if a number is prime."
  },
  {
    "question": "[906] Solve a strings problem. Code in C++.",
    "answer": "```cpp\n#include <iostream>\n#include <algorithm>\nusing namespace std;\nstring reverseString(string s) {\n    reverse(s.begin(), s.end());\n    return s;\n}\n```\nReverses a string."
  },
  {
    "question": "[907] Solve a linked lists problem. Code in C++.",
    "answer": "```cpp\nstruct ListNode {\n    int val;\n    ListNode* next;\n    ListNode(int x) : val(x), next(nullptr) {}\n};\nListNode* reverseList(ListNode* head) {\n    ListNode* prev = nullptr;\n    while (head) {\n        ListNode* next = head->next;\n        head->next = prev;\n        prev = head;\n        head = next;\n    }\n    return prev;\n}\n```\nReverses a singly linked list."
  },
  {
    "question": "[908] Solve a math problem. Code in Python.",
    "answer": "```python\ndef is_armstrong(n):\n    digits = [int(d) for d in str(n)]\n    power = len(digits)\n    return n == sum([d**power for d in digits])\n```\nChecks if a number is an Armstrong number."
  },
  {
    "question": "[909] Solve a hashing problem. Code in C++.",
    "answer": "```cpp\n#include <unordered_map>\n#include <iostream>\nusing namespace std;\nunordered_map<string, int> hash_map;\nhash_map[\"a\"] = 1;\ncout << hash_map[\"a\"] << endl;\n```\nImplements a hash map using unordered_map."
  },
  {
    "question": "[910] Solve a searching problem. Code in C++.",
    "answer": "```cpp\nint binarySearch(int arr[], int n, int target) {\n    int left=0,right=n-1;\n    while(left<=right){\n        int mid=left+(right-left)/2;\n        if(arr[mid]==target) return mid;\n        else if(arr[mid]<target) left=mid+1;\n        else right=mid-1;\n    }\n    return -1;\n}\n```\nPerforms binary search on a sorted array."
  },
  {
    "question": "[911] Solve a stacks problem. Code in C++.",
    "answer": "```cpp\n#include <stack>\n#include <iostream>\nusing namespace std;\nstack<int> s;\ns.push(1);\ns.push(2);\ncout << s.top() << endl;\ns.pop();\n```\nImplements a stack using STL stack."
  },
  {
    "question": "[912] Solve a linked lists problem. Code in Python.",
    "answer": "```python\nclass ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n\ndef reverseList(head):\n    prev = None\n    curr = head\n    while curr:\n        next_node = curr.next\n        curr.next = prev\n        prev = curr\n        curr = next_node\n    return prev\n```\nReverses a singly linked list."
  },
  {
    "question": "[913] Solve a recursion problem. Code in C++.",
    "answer": "```cpp\nint factorial(int n) {\n    if (n == 0) return 1;\n    return n * factorial(n-1);\n}\n```\nCalculates factorial using recursion."
  },
  {
    "question": "[914] Solve a hashing problem. Code in C++.",
    "answer": "```cpp\n#include <unordered_map>\n#include <iostream>\nusing namespace std;\nunordered_map<string, int> hash_map;\nhash_map[\"a\"] = 1;\ncout << hash_map[\"a\"] << endl;\n```\nImplements a hash map using unordered_map."
  },
  {
    "question": "[915] Solve a number theory problem. Code in C++.",
    "answer": "```cpp\nbool isPrime(int n) {\n    if (n < 2) return false;\n    for (int i = 2; i * i <= n; ++i)\n        if (n % i == 0) return false;\n    return true;\n}\n```\nChecks if a number is prime."
  },
  {
    "question": "[916] Solve a strings problem. Code in Python.",
    "answer": "```python\ndef reverse_string(s):\n    return s[::-1]\n```\nReverses a string."
  },
  {
    "question": "[917] Solve a queues problem. Code in C++.",
    "answer": "```cpp\n#include <queue>\n#include <iostream>\nusing namespace std;\nqueue<int> q;\nq.push(1);\nq.push(2);\ncout << q.front() << endl;\nq.pop();\n```\nImplements a queue using STL queue."
  },
  {
    "question": "[918] Solve a linked lists problem. Code in Python.",
    "answer": "```python\nclass ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n\ndef reverseList(head):\n    prev = None\n    curr = head\n    while curr:\n        next_node = curr.next\n        curr.next = prev\n        prev = curr\n        curr = next_node\n    return prev\n```\nReverses a singly linked list."
  },
  {
    "question": "[919] Solve a math problem. Code in Java.",
    "answer": "```java\npublic boolean isArmstrong(int n) {\n    int temp = n, digitCount = 0, sum = 0;\n    digitCount = (int)(Math.log10(n)) + 1;\n    while (temp != 0) {\n        int digit = temp % 10;\n        sum += Math.pow(digit, digitCount);\n        temp /= 10;\n    }\n    return n == sum;\n}\n```\nChecks if a number is an Armstrong number."
  },
  {
    "question": "[920] Solve a stacks problem. Code in Java.",
    "answer": "```java\nimport java.util.*;\nStack<Integer> stack = new Stack<>();\nstack.push(1);\nstack.push(2);\nSystem.out.println(stack.pop());\n```\nImplements a stack using Stack class."
  },
  {
    "question": "[921] Solve a dynamic programming problem. Code in Python.",
    "answer": "// Code for dynamic programming in Python not available."
  },
  {
    "question": "[922] Solve a linked lists problem. Code in C++.",
    "answer": "```cpp\nstruct ListNode {\n    int val;\n    ListNode* next;\n    ListNode(int x) : val(x), next(nullptr) {}\n};\nListNode* reverseList(ListNode* head) {\n    ListNode* prev = nullptr;\n    while (head) {\n        ListNode* next = head->next;\n        head->next = prev;\n        prev = head;\n        head = next;\n    }\n    return prev;\n}\n```\nReverses a singly linked list."
  },
  {
    "question": "[923] Solve a dynamic programming problem. Code in C++.",
    "answer": "// Code for dynamic programming in C++ not available."
  },
  {
    "question": "[924] Solve a linked lists problem. Code in Java.",
    "answer": "```java\nclass ListNode {\n    int val;\n    ListNode next;\n    ListNode(int x) { val = x; }\n}\npublic ListNode reverseList(ListNode head) {\n    ListNode prev = null;\n    while (head != null) {\n        ListNode next = head.next;\n        head.next = prev;\n        prev = head;\n        head = next;\n    }\n    return prev;\n}\n```\nReverses a singly linked list."
  },
  {
    "question": "[925] Solve a sorting problem. Code in Python.",
    "answer": "```python\ndef bubble_sort(arr):\n    n = len(arr)\n    for i in range(n):\n        for j in range(0, n-i-1):\n            if arr[j] > arr[j+1]:\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n    return arr\n```\nSorts an array using bubble sort."
  },
  {
    "question": "[926] Solve a math problem. Code in Java.",
    "answer": "```java\npublic boolean isArmstrong(int n) {\n    int temp = n, digitCount = 0, sum = 0;\n    digitCount = (int)(Math.log10(n)) + 1;\n    while (temp != 0) {\n        int digit = temp % 10;\n        sum += Math.pow(digit, digitCount);\n        temp /= 10;\n    }\n    return n == sum;\n}\n```\nChecks if a number is an Armstrong number."
  },
  {
    "question": "[927] Solve a bit manipulation problem. Code in C++.",
    "answer": "```cpp\nint countSetBits(int n) {\n    int count = 0;\n    while (n) {\n        count += n & 1;\n        n >>= 1;\n    }\n    return count;\n}\n```\nCounts set bits in an integer."
  },
  {
    "question": "[928] Solve a heaps problem. Code in Python.",
    "answer": "```python\nimport heapq\nh = []\nheapq.heappush(h, 3)\nheapq.heappush(h, 1)\nheapq.heappush(h, 2)\nprint(heapq.heappop(h))\n```\nImplements a min-heap using heapq."
  },
  {
    "question": "[929] Solve a arrays problem. Code in Java.",
    "answer": "```java\npublic int findMax(int[] arr) {\n    int maxVal = arr[0];\n    for(int i=1;i<arr.length;i++)\n        if(arr[i]>maxVal) maxVal=arr[i];\n    return maxVal;\n}\n```\nFinds the maximum element in an array."
  },
  {
    "question": "[930] Solve a sorting problem. Code in C++.",
    "answer": "```cpp\nvoid bubbleSort(int arr[], int n) {\n    for(int i=0;i<n-1;i++)\n        for(int j=0;j<n-i-1;j++)\n            if(arr[j]>arr[j+1]) swap(arr[j],arr[j+1]);\n}\n```\nSorts an array using bubble sort."
  },
  {
    "question": "[931] Solve a linked lists problem. Code in C++.",
    "answer": "```cpp\nstruct ListNode {\n    int val;\n    ListNode* next;\n    ListNode(int x) : val(x), next(nullptr) {}\n};\nListNode* reverseList(ListNode* head) {\n    ListNode* prev = nullptr;\n    while (head) {\n        ListNode* next = head->next;\n        head->next = prev;\n        prev = head;\n        head = next;\n    }\n    return prev;\n}\n```\nReverses a singly linked list."
  },
  {
    "question": "[932] Solve a strings problem. Code in Java.",
    "answer": "```java\npublic String reverseString(String s) {\n    return new StringBuilder(s).reverse().toString();\n}\n```\nReverses a string."
  },
  {
    "question": "[933] Solve a queues problem. Code in Java.",
    "answer": "```java\nimport java.util.*;\nQueue<Integer> q = new LinkedList<>();\nq.add(1);\nq.add(2);\nSystem.out.println(q.poll());\n```\nImplements a queue using LinkedList."
  },
  {
    "question": "[934] Solve a number theory problem. Code in Python.",
    "answer": "```python\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True\n```\nChecks if a number is prime."
  },
  {
    "question": "[935] Solve a arrays problem. Code in Java.",
    "answer": "```java\npublic int findMax(int[] arr) {\n    int maxVal = arr[0];\n    for(int i=1;i<arr.length;i++)\n        if(arr[i]>maxVal) maxVal=arr[i];\n    return maxVal;\n}\n```\nFinds the maximum element in an array."
  },
  {
    "question": "[936] Solve a arrays problem. Code in C++.",
    "answer": "```cpp\n#include <iostream>\nusing namespace std;\nint findMax(int arr[], int n) {\n    int maxVal = arr[0];\n    for(int i=1;i<n;i++)\n        if(arr[i]>maxVal) maxVal=arr[i];\n    return maxVal;\n}\n```\nFinds the maximum element in an array."
  },
  {
    "question": "[937] Solve a hashing problem. Code in Java.",
    "answer": "```java\nimport java.util.*;\nMap<String, Integer> hashMap = new HashMap<>();\nhashMap.put(\"a\", 1);\nSystem.out.println(hashMap.get(\"a\"));\n```\nImplements a hash map using HashMap."
  },
  {
    "question": "[938] Solve a greedy problem. Code in Java.",
    "answer": "```java\nimport java.util.*;\npublic List<int[]> activitySelection(List<int[]> activities) {\n    activities.sort(Comparator.comparingInt(a -> a[1]));\n    List<int[]> res = new ArrayList<>();\n    res.add(activities.get(0));\n    for (int i = 1; i < activities.size(); i++) {\n        if (activities.get(i)[0] >= res.get(res.size()-1)[1])\n            res.add(activities.get(i));\n    }\n    return res;\n}\n```\nSelects maximum number of non-overlapping activities."
  },
  {
    "question": "[939] Solve a queues problem. Code in Python.",
    "answer": "```python\nfrom collections import deque\nq = deque()\nq.append(1)\nq.append(2)\nprint(q.popleft())\n```\nImplements a queue using deque."
  },
  {
    "question": "[940] Solve a bit manipulation problem. Code in Java.",
    "answer": "```java\npublic int countSetBits(int n) {\n    int count = 0;\n    while (n != 0) {\n        count += n & 1;\n        n >>= 1;\n    }\n    return count;\n}\n```\nCounts set bits in an integer."
  },
  {
    "question": "[941] Solve a sorting problem. Code in C++.",
    "answer": "```cpp\nvoid bubbleSort(int arr[], int n) {\n    for(int i=0;i<n-1;i++)\n        for(int j=0;j<n-i-1;j++)\n            if(arr[j]>arr[j+1]) swap(arr[j],arr[j+1]);\n}\n```\nSorts an array using bubble sort."
  },
  {
    "question": "[942] Solve a math problem. Code in Python.",
    "answer": "```python\ndef is_armstrong(n):\n    digits = [int(d) for d in str(n)]\n    power = len(digits)\n    return n == sum([d**power for d in digits])\n```\nChecks if a number is an Armstrong number."
  },
  {
    "question": "[943] Solve a tries problem. Code in C++.",
    "answer": "```cpp\n#include <unordered_map>\nclass TrieNode {\npublic:\n    unordered_map<char, TrieNode*> children;\n    bool is_end = false;\n};\nclass Trie {\npublic:\n    TrieNode* root = new TrieNode();\n    void insert(string word) {\n        TrieNode* node = root;\n        for (char c : word) {\n            if (!node->children[c]) node->children[c] = new TrieNode();\n            node = node->children[c];\n        }\n        node->is_end = true;\n    }\n};\n```\nBasic Trie implementation."
  },
  {
    "question": "[944] Solve a geometry problem. Code in Python.",
    "answer": "```python\ndef area_of_circle(r):\n    import math\n    return math.pi * r * r\n```\nCalculates area of a circle."
  },
  {
    "question": "[945] Solve a linked lists problem. Code in C++.",
    "answer": "```cpp\nstruct ListNode {\n    int val;\n    ListNode* next;\n    ListNode(int x) : val(x), next(nullptr) {}\n};\nListNode* reverseList(ListNode* head) {\n    ListNode* prev = nullptr;\n    while (head) {\n        ListNode* next = head->next;\n        head->next = prev;\n        prev = head;\n        head = next;\n    }\n    return prev;\n}\n```\nReverses a singly linked list."
  },
  {
    "question": "[946] Solve a strings problem. Code in Java.",
    "answer": "```java\npublic String reverseString(String s) {\n    return new StringBuilder(s).reverse().toString();\n}\n```\nReverses a string."
  },
  {
    "question": "[947] Solve a hashing problem. Code in C++.",
    "answer": "```cpp\n#include <unordered_map>\n#include <iostream>\nusing namespace std;\nunordered_map<string, int> hash_map;\nhash_map[\"a\"] = 1;\ncout << hash_map[\"a\"] << endl;\n```\nImplements a hash map using unordered_map."
  },
  {
    "question": "[948] Solve a stacks problem. Code in Java.",
    "answer": "```java\nimport java.util.*;\nStack<Integer> stack = new Stack<>();\nstack.push(1);\nstack.push(2);\nSystem.out.println(stack.pop());\n```\nImplements a stack using Stack class."
  },
  {
    "question": "[949] Solve a heaps problem. Code in Python.",
    "answer": "```python\nimport heapq\nh = []\nheapq.heappush(h, 3)\nheapq.heappush(h, 1)\nheapq.heappush(h, 2)\nprint(heapq.heappop(h))\n```\nImplements a min-heap using heapq."
  },
  {
    "question": "[950] Solve a searching problem. Code in Java.",
    "answer": "```java\npublic int binarySearch(int[] arr, int target) {\n    int left=0,right=arr.length-1;\n    while(left<=right){\n        int mid=left+(right-left)/2;\n        if(arr[mid]==target) return mid;\n        else if(arr[mid]<target) left=mid+1;\n        else right=mid-1;\n    }\n    return -1;\n}\n```\nPerforms binary search on a sorted array."
  },
  {
    "question": "[951] Solve a sorting problem. Code in C++.",
    "answer": "```cpp\nvoid bubbleSort(int arr[], int n) {\n    for(int i=0;i<n-1;i++)\n        for(int j=0;j<n-i-1;j++)\n            if(arr[j]>arr[j+1]) swap(arr[j],arr[j+1]);\n}\n```\nSorts an array using bubble sort."
  },
  {
    "question": "[952] Solve a bit manipulation problem. Code in C++.",
    "answer": "```cpp\nint countSetBits(int n) {\n    int count = 0;\n    while (n) {\n        count += n & 1;\n        n >>= 1;\n    }\n    return count;\n}\n```\nCounts set bits in an integer."
  },
  {
    "question": "[953] Solve a sorting problem. Code in Python.",
    "answer": "```python\ndef bubble_sort(arr):\n    n = len(arr)\n    for i in range(n):\n        for j in range(0, n-i-1):\n            if arr[j] > arr[j+1]:\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n    return arr\n```\nSorts an array using bubble sort."
  },
  {
    "question": "[954] Solve a strings problem. Code in Java.",
    "answer": "```java\npublic String reverseString(String s) {\n    return new StringBuilder(s).reverse().toString();\n}\n```\nReverses a string."
  },
  {
    "question": "[955] Solve a heaps problem. Code in Python.",
    "answer": "```python\nimport heapq\nh = []\nheapq.heappush(h, 3)\nheapq.heappush(h, 1)\nheapq.heappush(h, 2)\nprint(heapq.heappop(h))\n```\nImplements a min-heap using heapq."
  },
  {
    "question": "[956] Solve a linked lists problem. Code in Python.",
    "answer": "```python\nclass ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n\ndef reverseList(head):\n    prev = None\n    curr = head\n    while curr:\n        next_node = curr.next\n        curr.next = prev\n        prev = curr\n        curr = next_node\n    return prev\n```\nReverses a singly linked list."
  },
  {
    "question": "[957] Solve a dynamic programming problem. Code in Python.",
    "answer": "// Code for dynamic programming in Python not available."
  },
  {
    "question": "[958] Solve a heaps problem. Code in Java.",
    "answer": "```java\nimport java.util.*;\nPriorityQueue<Integer> h = new PriorityQueue<>();\nh.add(3);\nh.add(1);\nh.add(2);\nSystem.out.println(h.poll());\n```\nImplements a min-heap using PriorityQueue."
  },
  {
    "question": "[959] Solve a sorting problem. Code in C++.",
    "answer": "```cpp\nvoid bubbleSort(int arr[], int n) {\n    for(int i=0;i<n-1;i++)\n        for(int j=0;j<n-i-1;j++)\n            if(arr[j]>arr[j+1]) swap(arr[j],arr[j+1]);\n}\n```\nSorts an array using bubble sort."
  },
  {
    "question": "[960] Solve a heaps problem. Code in C++.",
    "answer": "```cpp\n#include <queue>\n#include <vector>\n#include <iostream>\nusing namespace std;\npriority_queue<int, vector<int>, greater<int>> h;\nh.push(3);\nh.push(1);\nh.push(2);\ncout << h.top() << endl;\nh.pop();\n```\nImplements a min-heap using STL priority_queue."
  },
  {
    "question": "[961] Solve a heaps problem. Code in Java.",
    "answer": "```java\nimport java.util.*;\nPriorityQueue<Integer> h = new PriorityQueue<>();\nh.add(3);\nh.add(1);\nh.add(2);\nSystem.out.println(h.poll());\n```\nImplements a min-heap using PriorityQueue."
  },
  {
    "question": "[962] Solve a dynamic programming problem. Code in Java.",
    "answer": "// Code for dynamic programming in Java not available."
  },
  {
    "question": "[963] Solve a tries problem. Code in C++.",
    "answer": "```cpp\n#include <unordered_map>\nclass TrieNode {\npublic:\n    unordered_map<char, TrieNode*> children;\n    bool is_end = false;\n};\nclass Trie {\npublic:\n    TrieNode* root = new TrieNode();\n    void insert(string word) {\n        TrieNode* node = root;\n        for (char c : word) {\n            if (!node->children[c]) node->children[c] = new TrieNode();\n            node = node->children[c];\n        }\n        node->is_end = true;\n    }\n};\n```\nBasic Trie implementation."
  },
  {
    "question": "[964] Solve a bit manipulation problem. Code in Java.",
    "answer": "```java\npublic int countSetBits(int n) {\n    int count = 0;\n    while (n != 0) {\n        count += n & 1;\n        n >>= 1;\n    }\n    return count;\n}\n```\nCounts set bits in an integer."
  },
  {
    "question": "[965] Solve a dynamic programming problem. Code in C++.",
    "answer": "// Code for dynamic programming in C++ not available."
  },
  {
    "question": "[966] Solve a stacks problem. Code in C++.",
    "answer": "```cpp\n#include <stack>\n#include <iostream>\nusing namespace std;\nstack<int> s;\ns.push(1);\ns.push(2);\ncout << s.top() << endl;\ns.pop();\n```\nImplements a stack using STL stack."
  },
  {
    "question": "[967] Solve a greedy problem. Code in Python.",
    "answer": "```python\ndef activity_selection(activities):\n    activities.sort(key=lambda x: x[1])\n    res = [activities[0]]\n    for i in range(1, len(activities)):\n        if activities[i][0] >= res[-1][1]:\n            res.append(activities[i])\n    return res\n```\nSelects maximum number of non-overlapping activities."
  },
  {
    "question": "[968] Solve a bit manipulation problem. Code in Java.",
    "answer": "```java\npublic int countSetBits(int n) {\n    int count = 0;\n    while (n != 0) {\n        count += n & 1;\n        n >>= 1;\n    }\n    return count;\n}\n```\nCounts set bits in an integer."
  },
  {
    "question": "[969] Solve a linked lists problem. Code in Java.",
    "answer": "```java\nclass ListNode {\n    int val;\n    ListNode next;\n    ListNode(int x) { val = x; }\n}\npublic ListNode reverseList(ListNode head) {\n    ListNode prev = null;\n    while (head != null) {\n        ListNode next = head.next;\n        head.next = prev;\n        prev = head;\n        head = next;\n    }\n    return prev;\n}\n```\nReverses a singly linked list."
  },
  {
    "question": "[970] Solve a sorting problem. Code in Python.",
    "answer": "```python\ndef bubble_sort(arr):\n    n = len(arr)\n    for i in range(n):\n        for j in range(0, n-i-1):\n            if arr[j] > arr[j+1]:\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n    return arr\n```\nSorts an array using bubble sort."
  },
  {
    "question": "[971] Solve a stacks problem. Code in Python.",
    "answer": "```python\nstack = []\nstack.append(1)\nstack.append(2)\nprint(stack.pop())\n```\nImplements a stack using list."
  },
  {
    "question": "[972] Solve a queues problem. Code in C++.",
    "answer": "```cpp\n#include <queue>\n#include <iostream>\nusing namespace std;\nqueue<int> q;\nq.push(1);\nq.push(2);\ncout << q.front() << endl;\nq.pop();\n```\nImplements a queue using STL queue."
  },
  {
    "question": "[973] Solve a recursion problem. Code in Python.",
    "answer": "```python\ndef factorial(n):\n    if n == 0:\n        return 1\n    return n * factorial(n-1)\n```\nCalculates factorial using recursion."
  },
  {
    "question": "[974] Solve a bit manipulation problem. Code in Python.",
    "answer": "```python\ndef count_set_bits(n):\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n```\nCounts set bits in an integer."
  },
  {
    "question": "[975] Solve a linked lists problem. Code in Java.",
    "answer": "```java\nclass ListNode {\n    int val;\n    ListNode next;\n    ListNode(int x) { val = x; }\n}\npublic ListNode reverseList(ListNode head) {\n    ListNode prev = null;\n    while (head != null) {\n        ListNode next = head.next;\n        head.next = prev;\n        prev = head;\n        head = next;\n    }\n    return prev;\n}\n```\nReverses a singly linked list."
  },
  {
    "question": "[976] Solve a stacks problem. Code in C++.",
    "answer": "```cpp\n#include <stack>\n#include <iostream>\nusing namespace std;\nstack<int> s;\ns.push(1);\ns.push(2);\ncout << s.top() << endl;\ns.pop();\n```\nImplements a stack using STL stack."
  },
  {
    "question": "[977] Solve a recursion problem. Code in Python.",
    "answer": "```python\ndef factorial(n):\n    if n == 0:\n        return 1\n    return n * factorial(n-1)\n```\nCalculates factorial using recursion."
  },
  {
    "question": "[978] Solve a recursion problem. Code in C++.",
    "answer": "```cpp\nint factorial(int n) {\n    if (n == 0) return 1;\n    return n * factorial(n-1);\n}\n```\nCalculates factorial using recursion."
  },
  {
    "question": "[979] Solve a backtracking problem. Code in C++.",
    "answer": "```cpp\n#include <vector>\n#include <iostream>\nusing namespace std;\nvoid solve(vector<int>& nums, vector<int>& path) {\n    if (nums.empty()) {\n        for (int x : path) cout << x << \" \";\n        cout << endl;\n        return;\n    }\n    for (size_t i = 0; i < nums.size(); ++i) {\n        vector<int> nums2 = nums;\n        nums2.erase(nums2.begin() + i);\n        vector<int> path2 = path;\n        path2.push_back(nums[i]);\n        solve(nums2, path2);\n    }\n}\n```\nGenerates all permutations using backtracking."
  },
  {
    "question": "[980] Solve a hashing problem. Code in C++.",
    "answer": "```cpp\n#include <unordered_map>\n#include <iostream>\nusing namespace std;\nunordered_map<string, int> hash_map;\nhash_map[\"a\"] = 1;\ncout << hash_map[\"a\"] << endl;\n```\nImplements a hash map using unordered_map."
  },
  {
    "question": "[981] Solve a dynamic programming problem. Code in Python.",
    "answer": "// Code for dynamic programming in Python not available."
  },
  {
    "question": "[982] Solve a sorting problem. Code in C++.",
    "answer": "```cpp\nvoid bubbleSort(int arr[], int n) {\n    for(int i=0;i<n-1;i++)\n        for(int j=0;j<n-i-1;j++)\n            if(arr[j]>arr[j+1]) swap(arr[j],arr[j+1]);\n}\n```\nSorts an array using bubble sort."
  },
  {
    "question": "[983] Solve a greedy problem. Code in Python.",
    "answer": "```python\ndef activity_selection(activities):\n    activities.sort(key=lambda x: x[1])\n    res = [activities[0]]\n    for i in range(1, len(activities)):\n        if activities[i][0] >= res[-1][1]:\n            res.append(activities[i])\n    return res\n```\nSelects maximum number of non-overlapping activities."
  },
  {
    "question": "[984] Solve a greedy problem. Code in C++.",
    "answer": "```cpp\n#include <vector>\n#include <algorithm>\nusing namespace std;\nvector<pair<int,int>> activitySelection(vector<pair<int,int>>& activities) {\n    sort(activities.begin(), activities.end(), [](auto &a, auto &b){ return a.second < b.second; });\n    vector<pair<int,int>> res;\n    res.push_back(activities[0]);\n    for (size_t i = 1; i < activities.size(); ++i) {\n        if (activities[i].first >= res.back().second)\n            res.push_back(activities[i]);\n    }\n    return res;\n}\n```\nSelects maximum number of non-overlapping activities."
  },
  {
    "question": "[985] Solve a heaps problem. Code in Python.",
    "answer": "```python\nimport heapq\nh = []\nheapq.heappush(h, 3)\nheapq.heappush(h, 1)\nheapq.heappush(h, 2)\nprint(heapq.heappop(h))\n```\nImplements a min-heap using heapq."
  },
  {
    "question": "[986] Solve a linked lists problem. Code in Java.",
    "answer": "```java\nclass ListNode {\n    int val;\n    ListNode next;\n    ListNode(int x) { val = x; }\n}\npublic ListNode reverseList(ListNode head) {\n    ListNode prev = null;\n    while (head != null) {\n        ListNode next = head.next;\n        head.next = prev;\n        prev = head;\n        head = next;\n    }\n    return prev;\n}\n```\nReverses a singly linked list."
  },
  {
    "question": "[987] Solve a strings problem. Code in Python.",
    "answer": "```python\ndef reverse_string(s):\n    return s[::-1]\n```\nReverses a string."
  },
  {
    "question": "[988] Solve a greedy problem. Code in Python.",
    "answer": "```python\ndef activity_selection(activities):\n    activities.sort(key=lambda x: x[1])\n    res = [activities[0]]\n    for i in range(1, len(activities)):\n        if activities[i][0] >= res[-1][1]:\n            res.append(activities[i])\n    return res\n```\nSelects maximum number of non-overlapping activities."
  },
  {
    "question": "[989] Solve a queues problem. Code in Python.",
    "answer": "```python\nfrom collections import deque\nq = deque()\nq.append(1)\nq.append(2)\nprint(q.popleft())\n```\nImplements a queue using deque."
  },
  {
    "question": "[990] Solve a sorting problem. Code in Python.",
    "answer": "```python\ndef bubble_sort(arr):\n    n = len(arr)\n    for i in range(n):\n        for j in range(0, n-i-1):\n            if arr[j] > arr[j+1]:\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n    return arr\n```\nSorts an array using bubble sort."
  },
  {
    "question": "[991] Solve a sorting problem. Code in Python.",
    "answer": "```python\ndef bubble_sort(arr):\n    n = len(arr)\n    for i in range(n):\n        for j in range(0, n-i-1):\n            if arr[j] > arr[j+1]:\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n    return arr\n```\nSorts an array using bubble sort."
  },
  {
    "question": "[992] Solve a strings problem. Code in Java.",
    "answer": "```java\npublic String reverseString(String s) {\n    return new StringBuilder(s).reverse().toString();\n}\n```\nReverses a string."
  },
  {
    "question": "[993] Solve a math problem. Code in Python.",
    "answer": "```python\ndef is_armstrong(n):\n    digits = [int(d) for d in str(n)]\n    power = len(digits)\n    return n == sum([d**power for d in digits])\n```\nChecks if a number is an Armstrong number."
  },
  {
    "question": "[994] Solve a number theory problem. Code in Python.",
    "answer": "```python\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True\n```\nChecks if a number is prime."
  },
  {
    "question": "[995] Solve a strings problem. Code in Java.",
    "answer": "```java\npublic String reverseString(String s) {\n    return new StringBuilder(s).reverse().toString();\n}\n```\nReverses a string."
  },
  {
    "question": "[996] Solve a hashing problem. Code in Java.",
    "answer": "```java\nimport java.util.*;\nMap<String, Integer> hashMap = new HashMap<>();\nhashMap.put(\"a\", 1);\nSystem.out.println(hashMap.get(\"a\"));\n```\nImplements a hash map using HashMap."
  },
  {
    "question": "[997] Solve a queues problem. Code in Java.",
    "answer": "```java\nimport java.util.*;\nQueue<Integer> q = new LinkedList<>();\nq.add(1);\nq.add(2);\nSystem.out.println(q.poll());\n```\nImplements a queue using LinkedList."
  },
  {
    "question": "[998] Solve a heaps problem. Code in C++.",
    "answer": "```cpp\n#include <queue>\n#include <vector>\n#include <iostream>\nusing namespace std;\npriority_queue<int, vector<int>, greater<int>> h;\nh.push(3);\nh.push(1);\nh.push(2);\ncout << h.top() << endl;\nh.pop();\n```\nImplements a min-heap using STL priority_queue."
  },
  {
    "question": "[999] Solve a geometry problem. Code in C++.",
    "answer": "```cpp\n#include <cmath>\ndouble areaOfCircle(double r) {\n    return M_PI * r * r;\n}\n```\nCalculates area of a circle."
  },
  {
    "question": "[1000] Solve a arrays problem. Code in Python.",
    "answer": "```python\ndef find_max(arr):\n    return max(arr)\n```\nFinds the maximum element in an array."
  }
]